// Copyright 2018 Sagittarius LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package sagittarius.media.v1;

import "google/api/annotations.proto";
import "google/rpc/status.proto";

option cc_enable_arenas = true;
option go_package = "media";
option java_multiple_files = true;
option java_outer_classname = "MediaProto";
option java_package = "ai.sagittarius.media.v1";


// Service that implements Sagittarius Media API
service Media {
  //
  rpc GetInfo(GetInfoRequest) returns (Info) {
    option (google.api.http) = {
      get: "/v1/media/{media_hash}/info"
    };
  };

  //
  rpc UpdateInfo(UpdateInfoRequest) returns (Info) {
    option (google.api.http) = {
      post: "/v1/media/{media_hash}/info"
      body: "*"
    };
  };

  // Query thumb exist by media identity
  rpc GetThumbInfo(GetThumbInfoRequest) returns (GetThumbInfoResponse) {
    option (google.api.http) = {
      get: "/v1/media/{media_hash}/thumb/info"
    };
  };

  // Query thumb list
  rpc GetThumb(GetThumbRequest) returns (GetThumbResponse) {
    option (google.api.http) = {
      post: "/v1/media/{media_hash}/thumb"
      body: "*"
    };
  };

  // Upload thumb
  rpc PutThumb(PutThumbRequest) returns (google.rpc.Status) {
    option (google.api.http) = {
      post: "/v1/media/{media_hash}/thumb/{thumb_id}/upload"
      body: "*"
    };
  };
}

message Info {
  // Resource id of the media. It must have the format of "media/*/info".
  // For example: "media/1111-2222-3333-4444/info".
  string media_hash = 1;

  repeated TrackInfo tracks = 2;

  // TODO: movie/tv names, tv ep, length, rating, imdb id,
  // previews, posters, thumbnails, trickplay images
}

message TrackInfo {
  enum Type {
    VIDEO = 0;
    AUDIO = 1;
    TEXT = 2;
    OTHER = 3;
  }
  Type types = 1;
}

message GetInfoRequest {
  // quick hash of a media. For example: "media/1111-2222-3333-4444/info".
  string media_hash = 1;
}

message UpdateInfoRequest {
  // Resource name of the parent resource where to create the book.
  // For example: "shelves/shelf1".
  string media_hash = 1;
  // The Book resource to be created. Client must not set the `Book.name` field.
  Info info = 2;
}

message ThumbRange {
  int64 begin_time = 1;
  int64 over_time = 2;
  int64 interval =3;
}

message Thumb {
  bytes context =1;
  string ext = 2;
}

message GetThumbInfoRequest {
  string media_hash = 1;
  int64 total_time = 2;
}


message GetThumbInfoResponse {
  google.rpc.Status error = 1;

  string media_hash = 2;
  repeated int64 children = 3;
  repeated ThumbRange thumb_need = 4;
}

message PutThumbRequest {
  string media_hash = 1;
  int64 thumb_id = 2;
  string mime_type = 3;
  bytes payload = 4;
}

message GetThumbRequest {
  string media_hash = 1;
  repeated int64 thumb_id = 2;
}

message GetThumbResponse {
  google.rpc.Status error = 1;

  string media_hash = 2;
  map<int64, Thumb> thumb_set = 3;
}