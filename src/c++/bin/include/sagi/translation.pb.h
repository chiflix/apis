// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: translation/v1/translation.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_translation_2fv1_2ftranslation_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_translation_2fv1_2ftranslation_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/rpc/status.pb.h"
#include "google/cloud/speech/v1/cloud_speech.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_translation_2fv1_2ftranslation_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_translation_2fv1_2ftranslation_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[21]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_translation_2fv1_2ftranslation_2eproto;
namespace sagittarius {
namespace translation {
namespace v1 {
class DetectionPrediction;
class DetectionPredictionDefaultTypeInternal;
extern DetectionPredictionDefaultTypeInternal _DetectionPrediction_default_instance_;
class DetectionRequest;
class DetectionRequestDefaultTypeInternal;
extern DetectionRequestDefaultTypeInternal _DetectionRequest_default_instance_;
class DetectionResponse;
class DetectionResponseDefaultTypeInternal;
extern DetectionResponseDefaultTypeInternal _DetectionResponse_default_instance_;
class MediaTranslationRequest;
class MediaTranslationRequestDefaultTypeInternal;
extern MediaTranslationRequestDefaultTypeInternal _MediaTranslationRequest_default_instance_;
class MediaTranslationResponse;
class MediaTranslationResponseDefaultTypeInternal;
extern MediaTranslationResponseDefaultTypeInternal _MediaTranslationResponse_default_instance_;
class StreamingTranslationRequest;
class StreamingTranslationRequestDefaultTypeInternal;
extern StreamingTranslationRequestDefaultTypeInternal _StreamingTranslationRequest_default_instance_;
class StreamingTranslationRequestConfig;
class StreamingTranslationRequestConfigDefaultTypeInternal;
extern StreamingTranslationRequestConfigDefaultTypeInternal _StreamingTranslationRequestConfig_default_instance_;
class StreamingTranslationResponse;
class StreamingTranslationResponseDefaultTypeInternal;
extern StreamingTranslationResponseDefaultTypeInternal _StreamingTranslationResponse_default_instance_;
class StreamingTranslationResult;
class StreamingTranslationResultDefaultTypeInternal;
extern StreamingTranslationResultDefaultTypeInternal _StreamingTranslationResult_default_instance_;
class StreamingTranslationTaskInfo;
class StreamingTranslationTaskInfoDefaultTypeInternal;
extern StreamingTranslationTaskInfoDefaultTypeInternal _StreamingTranslationTaskInfo_default_instance_;
class StreamingTranslationTaskRequest;
class StreamingTranslationTaskRequestDefaultTypeInternal;
extern StreamingTranslationTaskRequestDefaultTypeInternal _StreamingTranslationTaskRequest_default_instance_;
class StreamingTranslationTaskResponse;
class StreamingTranslationTaskResponseDefaultTypeInternal;
extern StreamingTranslationTaskResponseDefaultTypeInternal _StreamingTranslationTaskResponse_default_instance_;
class TextTranslationRequest;
class TextTranslationRequestDefaultTypeInternal;
extern TextTranslationRequestDefaultTypeInternal _TextTranslationRequest_default_instance_;
class TextTranslationResponse;
class TextTranslationResponseDefaultTypeInternal;
extern TextTranslationResponseDefaultTypeInternal _TextTranslationResponse_default_instance_;
class TextTranslationResponse_Text;
class TextTranslationResponse_TextDefaultTypeInternal;
extern TextTranslationResponse_TextDefaultTypeInternal _TextTranslationResponse_Text_default_instance_;
class TranscriptInfo;
class TranscriptInfoDefaultTypeInternal;
extern TranscriptInfoDefaultTypeInternal _TranscriptInfo_default_instance_;
class TranscriptRequest;
class TranscriptRequestDefaultTypeInternal;
extern TranscriptRequestDefaultTypeInternal _TranscriptRequest_default_instance_;
class TranscriptResponse;
class TranscriptResponseDefaultTypeInternal;
extern TranscriptResponseDefaultTypeInternal _TranscriptResponse_default_instance_;
class TranscriptResponse_Cue;
class TranscriptResponse_CueDefaultTypeInternal;
extern TranscriptResponse_CueDefaultTypeInternal _TranscriptResponse_Cue_default_instance_;
class UserQuotaRequest;
class UserQuotaRequestDefaultTypeInternal;
extern UserQuotaRequestDefaultTypeInternal _UserQuotaRequest_default_instance_;
class UserQuotaResponse;
class UserQuotaResponseDefaultTypeInternal;
extern UserQuotaResponseDefaultTypeInternal _UserQuotaResponse_default_instance_;
}  // namespace v1
}  // namespace translation
}  // namespace sagittarius
PROTOBUF_NAMESPACE_OPEN
template<> ::sagittarius::translation::v1::DetectionPrediction* Arena::CreateMaybeMessage<::sagittarius::translation::v1::DetectionPrediction>(Arena*);
template<> ::sagittarius::translation::v1::DetectionRequest* Arena::CreateMaybeMessage<::sagittarius::translation::v1::DetectionRequest>(Arena*);
template<> ::sagittarius::translation::v1::DetectionResponse* Arena::CreateMaybeMessage<::sagittarius::translation::v1::DetectionResponse>(Arena*);
template<> ::sagittarius::translation::v1::MediaTranslationRequest* Arena::CreateMaybeMessage<::sagittarius::translation::v1::MediaTranslationRequest>(Arena*);
template<> ::sagittarius::translation::v1::MediaTranslationResponse* Arena::CreateMaybeMessage<::sagittarius::translation::v1::MediaTranslationResponse>(Arena*);
template<> ::sagittarius::translation::v1::StreamingTranslationRequest* Arena::CreateMaybeMessage<::sagittarius::translation::v1::StreamingTranslationRequest>(Arena*);
template<> ::sagittarius::translation::v1::StreamingTranslationRequestConfig* Arena::CreateMaybeMessage<::sagittarius::translation::v1::StreamingTranslationRequestConfig>(Arena*);
template<> ::sagittarius::translation::v1::StreamingTranslationResponse* Arena::CreateMaybeMessage<::sagittarius::translation::v1::StreamingTranslationResponse>(Arena*);
template<> ::sagittarius::translation::v1::StreamingTranslationResult* Arena::CreateMaybeMessage<::sagittarius::translation::v1::StreamingTranslationResult>(Arena*);
template<> ::sagittarius::translation::v1::StreamingTranslationTaskInfo* Arena::CreateMaybeMessage<::sagittarius::translation::v1::StreamingTranslationTaskInfo>(Arena*);
template<> ::sagittarius::translation::v1::StreamingTranslationTaskRequest* Arena::CreateMaybeMessage<::sagittarius::translation::v1::StreamingTranslationTaskRequest>(Arena*);
template<> ::sagittarius::translation::v1::StreamingTranslationTaskResponse* Arena::CreateMaybeMessage<::sagittarius::translation::v1::StreamingTranslationTaskResponse>(Arena*);
template<> ::sagittarius::translation::v1::TextTranslationRequest* Arena::CreateMaybeMessage<::sagittarius::translation::v1::TextTranslationRequest>(Arena*);
template<> ::sagittarius::translation::v1::TextTranslationResponse* Arena::CreateMaybeMessage<::sagittarius::translation::v1::TextTranslationResponse>(Arena*);
template<> ::sagittarius::translation::v1::TextTranslationResponse_Text* Arena::CreateMaybeMessage<::sagittarius::translation::v1::TextTranslationResponse_Text>(Arena*);
template<> ::sagittarius::translation::v1::TranscriptInfo* Arena::CreateMaybeMessage<::sagittarius::translation::v1::TranscriptInfo>(Arena*);
template<> ::sagittarius::translation::v1::TranscriptRequest* Arena::CreateMaybeMessage<::sagittarius::translation::v1::TranscriptRequest>(Arena*);
template<> ::sagittarius::translation::v1::TranscriptResponse* Arena::CreateMaybeMessage<::sagittarius::translation::v1::TranscriptResponse>(Arena*);
template<> ::sagittarius::translation::v1::TranscriptResponse_Cue* Arena::CreateMaybeMessage<::sagittarius::translation::v1::TranscriptResponse_Cue>(Arena*);
template<> ::sagittarius::translation::v1::UserQuotaRequest* Arena::CreateMaybeMessage<::sagittarius::translation::v1::UserQuotaRequest>(Arena*);
template<> ::sagittarius::translation::v1::UserQuotaResponse* Arena::CreateMaybeMessage<::sagittarius::translation::v1::UserQuotaResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sagittarius {
namespace translation {
namespace v1 {

enum StreamingTranslationTaskCode : int {
  OK = 0,
  CONTINUE = 9100,
  SKIP_AUDIO = 9101,
  StreamingTranslationTaskCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  StreamingTranslationTaskCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool StreamingTranslationTaskCode_IsValid(int value);
constexpr StreamingTranslationTaskCode StreamingTranslationTaskCode_MIN = OK;
constexpr StreamingTranslationTaskCode StreamingTranslationTaskCode_MAX = SKIP_AUDIO;
constexpr int StreamingTranslationTaskCode_ARRAYSIZE = StreamingTranslationTaskCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StreamingTranslationTaskCode_descriptor();
template<typename T>
inline const std::string& StreamingTranslationTaskCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StreamingTranslationTaskCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StreamingTranslationTaskCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    StreamingTranslationTaskCode_descriptor(), enum_t_value);
}
inline bool StreamingTranslationTaskCode_Parse(
    const std::string& name, StreamingTranslationTaskCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<StreamingTranslationTaskCode>(
    StreamingTranslationTaskCode_descriptor(), name, value);
}
// ===================================================================

class MediaTranslationRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sagittarius.translation.v1.MediaTranslationRequest) */ {
 public:
  MediaTranslationRequest();
  virtual ~MediaTranslationRequest();

  MediaTranslationRequest(const MediaTranslationRequest& from);
  MediaTranslationRequest(MediaTranslationRequest&& from) noexcept
    : MediaTranslationRequest() {
    *this = ::std::move(from);
  }

  inline MediaTranslationRequest& operator=(const MediaTranslationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MediaTranslationRequest& operator=(MediaTranslationRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MediaTranslationRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MediaTranslationRequest* internal_default_instance() {
    return reinterpret_cast<const MediaTranslationRequest*>(
               &_MediaTranslationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MediaTranslationRequest& a, MediaTranslationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MediaTranslationRequest* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MediaTranslationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MediaTranslationRequest* New() const final {
    return CreateMaybeMessage<MediaTranslationRequest>(nullptr);
  }

  MediaTranslationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MediaTranslationRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MediaTranslationRequest& from);
  void MergeFrom(const MediaTranslationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MediaTranslationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sagittarius.translation.v1.MediaTranslationRequest";
  }
  protected:
  explicit MediaTranslationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_translation_2fv1_2ftranslation_2eproto);
    return ::descriptor_table_translation_2fv1_2ftranslation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMediaIdentityFieldNumber = 1,
    kLanguageCodeFieldNumber = 2,
    kFormatFieldNumber = 3,
    kHintsFieldNumber = 7,
    kStartTimeFieldNumber = 6,
  };
  // string media_identity = 1;
  void clear_media_identity();
  const std::string& media_identity() const;
  void set_media_identity(const std::string& value);
  void set_media_identity(std::string&& value);
  void set_media_identity(const char* value);
  void set_media_identity(const char* value, size_t size);
  std::string* mutable_media_identity();
  std::string* release_media_identity();
  void set_allocated_media_identity(std::string* media_identity);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_media_identity();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_media_identity(
      std::string* media_identity);
  private:
  const std::string& _internal_media_identity() const;
  void _internal_set_media_identity(const std::string& value);
  std::string* _internal_mutable_media_identity();
  public:

  // string language_code = 2;
  void clear_language_code();
  const std::string& language_code() const;
  void set_language_code(const std::string& value);
  void set_language_code(std::string&& value);
  void set_language_code(const char* value);
  void set_language_code(const char* value, size_t size);
  std::string* mutable_language_code();
  std::string* release_language_code();
  void set_allocated_language_code(std::string* language_code);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_language_code();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_language_code(
      std::string* language_code);
  private:
  const std::string& _internal_language_code() const;
  void _internal_set_language_code(const std::string& value);
  std::string* _internal_mutable_language_code();
  public:

  // string format = 3;
  void clear_format();
  const std::string& format() const;
  void set_format(const std::string& value);
  void set_format(std::string&& value);
  void set_format(const char* value);
  void set_format(const char* value, size_t size);
  std::string* mutable_format();
  std::string* release_format();
  void set_allocated_format(std::string* format);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_format();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_format(
      std::string* format);
  private:
  const std::string& _internal_format() const;
  void _internal_set_format(const std::string& value);
  std::string* _internal_mutable_format();
  public:

  // string hints = 7;
  void clear_hints();
  const std::string& hints() const;
  void set_hints(const std::string& value);
  void set_hints(std::string&& value);
  void set_hints(const char* value);
  void set_hints(const char* value, size_t size);
  std::string* mutable_hints();
  std::string* release_hints();
  void set_allocated_hints(std::string* hints);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_hints();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_hints(
      std::string* hints);
  private:
  const std::string& _internal_hints() const;
  void _internal_set_hints(const std::string& value);
  std::string* _internal_mutable_hints();
  public:

  // double start_time = 6;
  void clear_start_time();
  double start_time() const;
  void set_start_time(double value);
  private:
  double _internal_start_time() const;
  void _internal_set_start_time(double value);
  public:

  // @@protoc_insertion_point(class_scope:sagittarius.translation.v1.MediaTranslationRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr media_identity_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr format_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hints_;
  double start_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_translation_2fv1_2ftranslation_2eproto;
};
// -------------------------------------------------------------------

class MediaTranslationResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sagittarius.translation.v1.MediaTranslationResponse) */ {
 public:
  MediaTranslationResponse();
  virtual ~MediaTranslationResponse();

  MediaTranslationResponse(const MediaTranslationResponse& from);
  MediaTranslationResponse(MediaTranslationResponse&& from) noexcept
    : MediaTranslationResponse() {
    *this = ::std::move(from);
  }

  inline MediaTranslationResponse& operator=(const MediaTranslationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MediaTranslationResponse& operator=(MediaTranslationResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MediaTranslationResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MediaTranslationResponse* internal_default_instance() {
    return reinterpret_cast<const MediaTranslationResponse*>(
               &_MediaTranslationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MediaTranslationResponse& a, MediaTranslationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MediaTranslationResponse* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MediaTranslationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MediaTranslationResponse* New() const final {
    return CreateMaybeMessage<MediaTranslationResponse>(nullptr);
  }

  MediaTranslationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MediaTranslationResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MediaTranslationResponse& from);
  void MergeFrom(const MediaTranslationResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MediaTranslationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sagittarius.translation.v1.MediaTranslationResponse";
  }
  protected:
  explicit MediaTranslationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_translation_2fv1_2ftranslation_2eproto);
    return ::descriptor_table_translation_2fv1_2ftranslation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultsFieldNumber = 2,
    kStreamTranslationTaskIdFieldNumber = 3,
    kErrorFieldNumber = 1,
  };
  // repeated .sagittarius.translation.v1.TranscriptInfo results = 2;
  int results_size() const;
  private:
  int _internal_results_size() const;
  public:
  void clear_results();
  ::sagittarius::translation::v1::TranscriptInfo* mutable_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sagittarius::translation::v1::TranscriptInfo >*
      mutable_results();
  private:
  const ::sagittarius::translation::v1::TranscriptInfo& _internal_results(int index) const;
  ::sagittarius::translation::v1::TranscriptInfo* _internal_add_results();
  public:
  const ::sagittarius::translation::v1::TranscriptInfo& results(int index) const;
  ::sagittarius::translation::v1::TranscriptInfo* add_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sagittarius::translation::v1::TranscriptInfo >&
      results() const;

  // string stream_translation_task_id = 3;
  void clear_stream_translation_task_id();
  const std::string& stream_translation_task_id() const;
  void set_stream_translation_task_id(const std::string& value);
  void set_stream_translation_task_id(std::string&& value);
  void set_stream_translation_task_id(const char* value);
  void set_stream_translation_task_id(const char* value, size_t size);
  std::string* mutable_stream_translation_task_id();
  std::string* release_stream_translation_task_id();
  void set_allocated_stream_translation_task_id(std::string* stream_translation_task_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_stream_translation_task_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_stream_translation_task_id(
      std::string* stream_translation_task_id);
  private:
  const std::string& _internal_stream_translation_task_id() const;
  void _internal_set_stream_translation_task_id(const std::string& value);
  std::string* _internal_mutable_stream_translation_task_id();
  public:

  // .google.rpc.Status error = 1;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::google::rpc::Status& error() const;
  ::google::rpc::Status* release_error();
  ::google::rpc::Status* mutable_error();
  void set_allocated_error(::google::rpc::Status* error);
  private:
  const ::google::rpc::Status& _internal_error() const;
  ::google::rpc::Status* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::google::rpc::Status* error);
  ::google::rpc::Status* unsafe_arena_release_error();

  // @@protoc_insertion_point(class_scope:sagittarius.translation.v1.MediaTranslationResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sagittarius::translation::v1::TranscriptInfo > results_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stream_translation_task_id_;
  ::google::rpc::Status* error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_translation_2fv1_2ftranslation_2eproto;
};
// -------------------------------------------------------------------

class TranscriptInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sagittarius.translation.v1.TranscriptInfo) */ {
 public:
  TranscriptInfo();
  virtual ~TranscriptInfo();

  TranscriptInfo(const TranscriptInfo& from);
  TranscriptInfo(TranscriptInfo&& from) noexcept
    : TranscriptInfo() {
    *this = ::std::move(from);
  }

  inline TranscriptInfo& operator=(const TranscriptInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TranscriptInfo& operator=(TranscriptInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TranscriptInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TranscriptInfo* internal_default_instance() {
    return reinterpret_cast<const TranscriptInfo*>(
               &_TranscriptInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TranscriptInfo& a, TranscriptInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TranscriptInfo* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TranscriptInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TranscriptInfo* New() const final {
    return CreateMaybeMessage<TranscriptInfo>(nullptr);
  }

  TranscriptInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TranscriptInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TranscriptInfo& from);
  void MergeFrom(const TranscriptInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TranscriptInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sagittarius.translation.v1.TranscriptInfo";
  }
  protected:
  explicit TranscriptInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_translation_2fv1_2ftranslation_2eproto);
    return ::descriptor_table_translation_2fv1_2ftranslation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagsFieldNumber = 4,
    kTranscriptIdentityFieldNumber = 1,
    kLanguageCodeFieldNumber = 2,
    kRankingFieldNumber = 3,
    kConfidenceFieldNumber = 6,
    kDelayFieldNumber = 5,
  };
  // repeated string tags = 4;
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  const std::string& tags(int index) const;
  std::string* mutable_tags(int index);
  void set_tags(int index, const std::string& value);
  void set_tags(int index, std::string&& value);
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  std::string* add_tags();
  void add_tags(const std::string& value);
  void add_tags(std::string&& value);
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tags();
  private:
  const std::string& _internal_tags(int index) const;
  std::string* _internal_add_tags();
  public:

  // string transcript_identity = 1;
  void clear_transcript_identity();
  const std::string& transcript_identity() const;
  void set_transcript_identity(const std::string& value);
  void set_transcript_identity(std::string&& value);
  void set_transcript_identity(const char* value);
  void set_transcript_identity(const char* value, size_t size);
  std::string* mutable_transcript_identity();
  std::string* release_transcript_identity();
  void set_allocated_transcript_identity(std::string* transcript_identity);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_transcript_identity();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_transcript_identity(
      std::string* transcript_identity);
  private:
  const std::string& _internal_transcript_identity() const;
  void _internal_set_transcript_identity(const std::string& value);
  std::string* _internal_mutable_transcript_identity();
  public:

  // string language_code = 2;
  void clear_language_code();
  const std::string& language_code() const;
  void set_language_code(const std::string& value);
  void set_language_code(std::string&& value);
  void set_language_code(const char* value);
  void set_language_code(const char* value, size_t size);
  std::string* mutable_language_code();
  std::string* release_language_code();
  void set_allocated_language_code(std::string* language_code);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_language_code();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_language_code(
      std::string* language_code);
  private:
  const std::string& _internal_language_code() const;
  void _internal_set_language_code(const std::string& value);
  std::string* _internal_mutable_language_code();
  public:

  // float ranking = 3;
  void clear_ranking();
  float ranking() const;
  void set_ranking(float value);
  private:
  float _internal_ranking() const;
  void _internal_set_ranking(float value);
  public:

  // float confidence = 6;
  void clear_confidence();
  float confidence() const;
  void set_confidence(float value);
  private:
  float _internal_confidence() const;
  void _internal_set_confidence(float value);
  public:

  // int64 delay = 5;
  void clear_delay();
  ::PROTOBUF_NAMESPACE_ID::int64 delay() const;
  void set_delay(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_delay() const;
  void _internal_set_delay(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:sagittarius.translation.v1.TranscriptInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tags_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transcript_identity_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_code_;
  float ranking_;
  float confidence_;
  ::PROTOBUF_NAMESPACE_ID::int64 delay_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_translation_2fv1_2ftranslation_2eproto;
};
// -------------------------------------------------------------------

class DetectionRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sagittarius.translation.v1.DetectionRequest) */ {
 public:
  DetectionRequest();
  virtual ~DetectionRequest();

  DetectionRequest(const DetectionRequest& from);
  DetectionRequest(DetectionRequest&& from) noexcept
    : DetectionRequest() {
    *this = ::std::move(from);
  }

  inline DetectionRequest& operator=(const DetectionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DetectionRequest& operator=(DetectionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DetectionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DetectionRequest* internal_default_instance() {
    return reinterpret_cast<const DetectionRequest*>(
               &_DetectionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DetectionRequest& a, DetectionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DetectionRequest* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DetectionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DetectionRequest* New() const final {
    return CreateMaybeMessage<DetectionRequest>(nullptr);
  }

  DetectionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DetectionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DetectionRequest& from);
  void MergeFrom(const DetectionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DetectionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sagittarius.translation.v1.DetectionRequest";
  }
  protected:
  explicit DetectionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_translation_2fv1_2ftranslation_2eproto);
    return ::descriptor_table_translation_2fv1_2ftranslation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 1,
  };
  // string text = 1;
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_text();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_text(
      std::string* text);
  private:
  const std::string& _internal_text() const;
  void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // @@protoc_insertion_point(class_scope:sagittarius.translation.v1.DetectionRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_translation_2fv1_2ftranslation_2eproto;
};
// -------------------------------------------------------------------

class DetectionResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sagittarius.translation.v1.DetectionResponse) */ {
 public:
  DetectionResponse();
  virtual ~DetectionResponse();

  DetectionResponse(const DetectionResponse& from);
  DetectionResponse(DetectionResponse&& from) noexcept
    : DetectionResponse() {
    *this = ::std::move(from);
  }

  inline DetectionResponse& operator=(const DetectionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DetectionResponse& operator=(DetectionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DetectionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DetectionResponse* internal_default_instance() {
    return reinterpret_cast<const DetectionResponse*>(
               &_DetectionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DetectionResponse& a, DetectionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DetectionResponse* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DetectionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DetectionResponse* New() const final {
    return CreateMaybeMessage<DetectionResponse>(nullptr);
  }

  DetectionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DetectionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DetectionResponse& from);
  void MergeFrom(const DetectionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DetectionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sagittarius.translation.v1.DetectionResponse";
  }
  protected:
  explicit DetectionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_translation_2fv1_2ftranslation_2eproto);
    return ::descriptor_table_translation_2fv1_2ftranslation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPredictionFieldNumber = 1,
  };
  // repeated .sagittarius.translation.v1.DetectionPrediction prediction = 1;
  int prediction_size() const;
  private:
  int _internal_prediction_size() const;
  public:
  void clear_prediction();
  ::sagittarius::translation::v1::DetectionPrediction* mutable_prediction(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sagittarius::translation::v1::DetectionPrediction >*
      mutable_prediction();
  private:
  const ::sagittarius::translation::v1::DetectionPrediction& _internal_prediction(int index) const;
  ::sagittarius::translation::v1::DetectionPrediction* _internal_add_prediction();
  public:
  const ::sagittarius::translation::v1::DetectionPrediction& prediction(int index) const;
  ::sagittarius::translation::v1::DetectionPrediction* add_prediction();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sagittarius::translation::v1::DetectionPrediction >&
      prediction() const;

  // @@protoc_insertion_point(class_scope:sagittarius.translation.v1.DetectionResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sagittarius::translation::v1::DetectionPrediction > prediction_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_translation_2fv1_2ftranslation_2eproto;
};
// -------------------------------------------------------------------

class DetectionPrediction :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sagittarius.translation.v1.DetectionPrediction) */ {
 public:
  DetectionPrediction();
  virtual ~DetectionPrediction();

  DetectionPrediction(const DetectionPrediction& from);
  DetectionPrediction(DetectionPrediction&& from) noexcept
    : DetectionPrediction() {
    *this = ::std::move(from);
  }

  inline DetectionPrediction& operator=(const DetectionPrediction& from) {
    CopyFrom(from);
    return *this;
  }
  inline DetectionPrediction& operator=(DetectionPrediction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DetectionPrediction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DetectionPrediction* internal_default_instance() {
    return reinterpret_cast<const DetectionPrediction*>(
               &_DetectionPrediction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DetectionPrediction& a, DetectionPrediction& b) {
    a.Swap(&b);
  }
  inline void Swap(DetectionPrediction* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DetectionPrediction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DetectionPrediction* New() const final {
    return CreateMaybeMessage<DetectionPrediction>(nullptr);
  }

  DetectionPrediction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DetectionPrediction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DetectionPrediction& from);
  void MergeFrom(const DetectionPrediction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DetectionPrediction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sagittarius.translation.v1.DetectionPrediction";
  }
  protected:
  explicit DetectionPrediction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_translation_2fv1_2ftranslation_2eproto);
    return ::descriptor_table_translation_2fv1_2ftranslation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLanguageCodeFieldNumber = 1,
    kConfidenceFieldNumber = 2,
  };
  // string language_code = 1;
  void clear_language_code();
  const std::string& language_code() const;
  void set_language_code(const std::string& value);
  void set_language_code(std::string&& value);
  void set_language_code(const char* value);
  void set_language_code(const char* value, size_t size);
  std::string* mutable_language_code();
  std::string* release_language_code();
  void set_allocated_language_code(std::string* language_code);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_language_code();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_language_code(
      std::string* language_code);
  private:
  const std::string& _internal_language_code() const;
  void _internal_set_language_code(const std::string& value);
  std::string* _internal_mutable_language_code();
  public:

  // float confidence = 2;
  void clear_confidence();
  float confidence() const;
  void set_confidence(float value);
  private:
  float _internal_confidence() const;
  void _internal_set_confidence(float value);
  public:

  // @@protoc_insertion_point(class_scope:sagittarius.translation.v1.DetectionPrediction)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_code_;
  float confidence_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_translation_2fv1_2ftranslation_2eproto;
};
// -------------------------------------------------------------------

class TranscriptRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sagittarius.translation.v1.TranscriptRequest) */ {
 public:
  TranscriptRequest();
  virtual ~TranscriptRequest();

  TranscriptRequest(const TranscriptRequest& from);
  TranscriptRequest(TranscriptRequest&& from) noexcept
    : TranscriptRequest() {
    *this = ::std::move(from);
  }

  inline TranscriptRequest& operator=(const TranscriptRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TranscriptRequest& operator=(TranscriptRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TranscriptRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TranscriptRequest* internal_default_instance() {
    return reinterpret_cast<const TranscriptRequest*>(
               &_TranscriptRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(TranscriptRequest& a, TranscriptRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TranscriptRequest* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TranscriptRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TranscriptRequest* New() const final {
    return CreateMaybeMessage<TranscriptRequest>(nullptr);
  }

  TranscriptRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TranscriptRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TranscriptRequest& from);
  void MergeFrom(const TranscriptRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TranscriptRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sagittarius.translation.v1.TranscriptRequest";
  }
  protected:
  explicit TranscriptRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_translation_2fv1_2ftranslation_2eproto);
    return ::descriptor_table_translation_2fv1_2ftranslation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTranscriptIdentityFieldNumber = 4,
    kStartTimeFieldNumber = 6,
  };
  // string transcript_identity = 4;
  void clear_transcript_identity();
  const std::string& transcript_identity() const;
  void set_transcript_identity(const std::string& value);
  void set_transcript_identity(std::string&& value);
  void set_transcript_identity(const char* value);
  void set_transcript_identity(const char* value, size_t size);
  std::string* mutable_transcript_identity();
  std::string* release_transcript_identity();
  void set_allocated_transcript_identity(std::string* transcript_identity);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_transcript_identity();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_transcript_identity(
      std::string* transcript_identity);
  private:
  const std::string& _internal_transcript_identity() const;
  void _internal_set_transcript_identity(const std::string& value);
  std::string* _internal_mutable_transcript_identity();
  public:

  // double start_time = 6;
  void clear_start_time();
  double start_time() const;
  void set_start_time(double value);
  private:
  double _internal_start_time() const;
  void _internal_set_start_time(double value);
  public:

  // @@protoc_insertion_point(class_scope:sagittarius.translation.v1.TranscriptRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transcript_identity_;
  double start_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_translation_2fv1_2ftranslation_2eproto;
};
// -------------------------------------------------------------------

class TranscriptResponse_Cue :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sagittarius.translation.v1.TranscriptResponse.Cue) */ {
 public:
  TranscriptResponse_Cue();
  virtual ~TranscriptResponse_Cue();

  TranscriptResponse_Cue(const TranscriptResponse_Cue& from);
  TranscriptResponse_Cue(TranscriptResponse_Cue&& from) noexcept
    : TranscriptResponse_Cue() {
    *this = ::std::move(from);
  }

  inline TranscriptResponse_Cue& operator=(const TranscriptResponse_Cue& from) {
    CopyFrom(from);
    return *this;
  }
  inline TranscriptResponse_Cue& operator=(TranscriptResponse_Cue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TranscriptResponse_Cue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TranscriptResponse_Cue* internal_default_instance() {
    return reinterpret_cast<const TranscriptResponse_Cue*>(
               &_TranscriptResponse_Cue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(TranscriptResponse_Cue& a, TranscriptResponse_Cue& b) {
    a.Swap(&b);
  }
  inline void Swap(TranscriptResponse_Cue* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TranscriptResponse_Cue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TranscriptResponse_Cue* New() const final {
    return CreateMaybeMessage<TranscriptResponse_Cue>(nullptr);
  }

  TranscriptResponse_Cue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TranscriptResponse_Cue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TranscriptResponse_Cue& from);
  void MergeFrom(const TranscriptResponse_Cue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TranscriptResponse_Cue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sagittarius.translation.v1.TranscriptResponse.Cue";
  }
  protected:
  explicit TranscriptResponse_Cue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_translation_2fv1_2ftranslation_2eproto);
    return ::descriptor_table_translation_2fv1_2ftranslation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 3,
    kStartTimeFieldNumber = 1,
    kEndTimeFieldNumber = 2,
  };
  // string text = 3;
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_text();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_text(
      std::string* text);
  private:
  const std::string& _internal_text() const;
  void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // double start_time = 1;
  void clear_start_time();
  double start_time() const;
  void set_start_time(double value);
  private:
  double _internal_start_time() const;
  void _internal_set_start_time(double value);
  public:

  // double end_time = 2;
  void clear_end_time();
  double end_time() const;
  void set_end_time(double value);
  private:
  double _internal_end_time() const;
  void _internal_set_end_time(double value);
  public:

  // @@protoc_insertion_point(class_scope:sagittarius.translation.v1.TranscriptResponse.Cue)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  double start_time_;
  double end_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_translation_2fv1_2ftranslation_2eproto;
};
// -------------------------------------------------------------------

class TranscriptResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sagittarius.translation.v1.TranscriptResponse) */ {
 public:
  TranscriptResponse();
  virtual ~TranscriptResponse();

  TranscriptResponse(const TranscriptResponse& from);
  TranscriptResponse(TranscriptResponse&& from) noexcept
    : TranscriptResponse() {
    *this = ::std::move(from);
  }

  inline TranscriptResponse& operator=(const TranscriptResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TranscriptResponse& operator=(TranscriptResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TranscriptResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TranscriptResponse* internal_default_instance() {
    return reinterpret_cast<const TranscriptResponse*>(
               &_TranscriptResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(TranscriptResponse& a, TranscriptResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TranscriptResponse* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TranscriptResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TranscriptResponse* New() const final {
    return CreateMaybeMessage<TranscriptResponse>(nullptr);
  }

  TranscriptResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TranscriptResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TranscriptResponse& from);
  void MergeFrom(const TranscriptResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TranscriptResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sagittarius.translation.v1.TranscriptResponse";
  }
  protected:
  explicit TranscriptResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_translation_2fv1_2ftranslation_2eproto);
    return ::descriptor_table_translation_2fv1_2ftranslation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TranscriptResponse_Cue Cue;

  // accessors -------------------------------------------------------

  enum : int {
    kTranscriptsFieldNumber = 2,
    kErrorFieldNumber = 1,
    kIsEndOfTranscriptFieldNumber = 3,
  };
  // repeated .sagittarius.translation.v1.TranscriptResponse.Cue transcripts = 2;
  int transcripts_size() const;
  private:
  int _internal_transcripts_size() const;
  public:
  void clear_transcripts();
  ::sagittarius::translation::v1::TranscriptResponse_Cue* mutable_transcripts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sagittarius::translation::v1::TranscriptResponse_Cue >*
      mutable_transcripts();
  private:
  const ::sagittarius::translation::v1::TranscriptResponse_Cue& _internal_transcripts(int index) const;
  ::sagittarius::translation::v1::TranscriptResponse_Cue* _internal_add_transcripts();
  public:
  const ::sagittarius::translation::v1::TranscriptResponse_Cue& transcripts(int index) const;
  ::sagittarius::translation::v1::TranscriptResponse_Cue* add_transcripts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sagittarius::translation::v1::TranscriptResponse_Cue >&
      transcripts() const;

  // .google.rpc.Status error = 1;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::google::rpc::Status& error() const;
  ::google::rpc::Status* release_error();
  ::google::rpc::Status* mutable_error();
  void set_allocated_error(::google::rpc::Status* error);
  private:
  const ::google::rpc::Status& _internal_error() const;
  ::google::rpc::Status* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::google::rpc::Status* error);
  ::google::rpc::Status* unsafe_arena_release_error();

  // bool is_end_of_transcript = 3;
  void clear_is_end_of_transcript();
  bool is_end_of_transcript() const;
  void set_is_end_of_transcript(bool value);
  private:
  bool _internal_is_end_of_transcript() const;
  void _internal_set_is_end_of_transcript(bool value);
  public:

  // @@protoc_insertion_point(class_scope:sagittarius.translation.v1.TranscriptResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sagittarius::translation::v1::TranscriptResponse_Cue > transcripts_;
  ::google::rpc::Status* error_;
  bool is_end_of_transcript_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_translation_2fv1_2ftranslation_2eproto;
};
// -------------------------------------------------------------------

class StreamingTranslationRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sagittarius.translation.v1.StreamingTranslationRequest) */ {
 public:
  StreamingTranslationRequest();
  virtual ~StreamingTranslationRequest();

  StreamingTranslationRequest(const StreamingTranslationRequest& from);
  StreamingTranslationRequest(StreamingTranslationRequest&& from) noexcept
    : StreamingTranslationRequest() {
    *this = ::std::move(from);
  }

  inline StreamingTranslationRequest& operator=(const StreamingTranslationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamingTranslationRequest& operator=(StreamingTranslationRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StreamingTranslationRequest& default_instance();

  enum StreamingRequestCase {
    kStreamingConfig = 1,
    kAudioContent = 2,
    STREAMING_REQUEST_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamingTranslationRequest* internal_default_instance() {
    return reinterpret_cast<const StreamingTranslationRequest*>(
               &_StreamingTranslationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(StreamingTranslationRequest& a, StreamingTranslationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamingTranslationRequest* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamingTranslationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamingTranslationRequest* New() const final {
    return CreateMaybeMessage<StreamingTranslationRequest>(nullptr);
  }

  StreamingTranslationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamingTranslationRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamingTranslationRequest& from);
  void MergeFrom(const StreamingTranslationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamingTranslationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sagittarius.translation.v1.StreamingTranslationRequest";
  }
  protected:
  explicit StreamingTranslationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_translation_2fv1_2ftranslation_2eproto);
    return ::descriptor_table_translation_2fv1_2ftranslation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStreamingConfigFieldNumber = 1,
    kAudioContentFieldNumber = 2,
  };
  // .sagittarius.translation.v1.StreamingTranslationRequestConfig streaming_config = 1;
  bool has_streaming_config() const;
  private:
  bool _internal_has_streaming_config() const;
  public:
  void clear_streaming_config();
  const ::sagittarius::translation::v1::StreamingTranslationRequestConfig& streaming_config() const;
  ::sagittarius::translation::v1::StreamingTranslationRequestConfig* release_streaming_config();
  ::sagittarius::translation::v1::StreamingTranslationRequestConfig* mutable_streaming_config();
  void set_allocated_streaming_config(::sagittarius::translation::v1::StreamingTranslationRequestConfig* streaming_config);
  private:
  const ::sagittarius::translation::v1::StreamingTranslationRequestConfig& _internal_streaming_config() const;
  ::sagittarius::translation::v1::StreamingTranslationRequestConfig* _internal_mutable_streaming_config();
  public:
  void unsafe_arena_set_allocated_streaming_config(
      ::sagittarius::translation::v1::StreamingTranslationRequestConfig* streaming_config);
  ::sagittarius::translation::v1::StreamingTranslationRequestConfig* unsafe_arena_release_streaming_config();

  // bytes audio_content = 2;
  private:
  bool _internal_has_audio_content() const;
  public:
  void clear_audio_content();
  const std::string& audio_content() const;
  void set_audio_content(const std::string& value);
  void set_audio_content(std::string&& value);
  void set_audio_content(const char* value);
  void set_audio_content(const void* value, size_t size);
  std::string* mutable_audio_content();
  std::string* release_audio_content();
  void set_allocated_audio_content(std::string* audio_content);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_audio_content();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_audio_content(
      std::string* audio_content);
  private:
  const std::string& _internal_audio_content() const;
  void _internal_set_audio_content(const std::string& value);
  std::string* _internal_mutable_audio_content();
  public:

  void clear_streaming_request();
  StreamingRequestCase streaming_request_case() const;
  // @@protoc_insertion_point(class_scope:sagittarius.translation.v1.StreamingTranslationRequest)
 private:
  class _Internal;
  void set_has_streaming_config();
  void set_has_audio_content();

  inline bool has_streaming_request() const;
  inline void clear_has_streaming_request();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union StreamingRequestUnion {
    StreamingRequestUnion() {}
    ::sagittarius::translation::v1::StreamingTranslationRequestConfig* streaming_config_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr audio_content_;
  } streaming_request_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_translation_2fv1_2ftranslation_2eproto;
};
// -------------------------------------------------------------------

class StreamingTranslationRequestConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sagittarius.translation.v1.StreamingTranslationRequestConfig) */ {
 public:
  StreamingTranslationRequestConfig();
  virtual ~StreamingTranslationRequestConfig();

  StreamingTranslationRequestConfig(const StreamingTranslationRequestConfig& from);
  StreamingTranslationRequestConfig(StreamingTranslationRequestConfig&& from) noexcept
    : StreamingTranslationRequestConfig() {
    *this = ::std::move(from);
  }

  inline StreamingTranslationRequestConfig& operator=(const StreamingTranslationRequestConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamingTranslationRequestConfig& operator=(StreamingTranslationRequestConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StreamingTranslationRequestConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamingTranslationRequestConfig* internal_default_instance() {
    return reinterpret_cast<const StreamingTranslationRequestConfig*>(
               &_StreamingTranslationRequestConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(StreamingTranslationRequestConfig& a, StreamingTranslationRequestConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamingTranslationRequestConfig* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamingTranslationRequestConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamingTranslationRequestConfig* New() const final {
    return CreateMaybeMessage<StreamingTranslationRequestConfig>(nullptr);
  }

  StreamingTranslationRequestConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamingTranslationRequestConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamingTranslationRequestConfig& from);
  void MergeFrom(const StreamingTranslationRequestConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamingTranslationRequestConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sagittarius.translation.v1.StreamingTranslationRequestConfig";
  }
  protected:
  explicit StreamingTranslationRequestConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_translation_2fv1_2ftranslation_2eproto);
    return ::descriptor_table_translation_2fv1_2ftranslation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMediaIdentityFieldNumber = 2,
    kAudioLanguageCodeFieldNumber = 3,
    kTargetLanguageCodeFieldNumber = 4,
    kAudioTrackFieldNumber = 5,
    kHintsFieldNumber = 6,
    kStreamingConfigFieldNumber = 1,
  };
  // string media_identity = 2;
  void clear_media_identity();
  const std::string& media_identity() const;
  void set_media_identity(const std::string& value);
  void set_media_identity(std::string&& value);
  void set_media_identity(const char* value);
  void set_media_identity(const char* value, size_t size);
  std::string* mutable_media_identity();
  std::string* release_media_identity();
  void set_allocated_media_identity(std::string* media_identity);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_media_identity();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_media_identity(
      std::string* media_identity);
  private:
  const std::string& _internal_media_identity() const;
  void _internal_set_media_identity(const std::string& value);
  std::string* _internal_mutable_media_identity();
  public:

  // string audio_language_code = 3;
  void clear_audio_language_code();
  const std::string& audio_language_code() const;
  void set_audio_language_code(const std::string& value);
  void set_audio_language_code(std::string&& value);
  void set_audio_language_code(const char* value);
  void set_audio_language_code(const char* value, size_t size);
  std::string* mutable_audio_language_code();
  std::string* release_audio_language_code();
  void set_allocated_audio_language_code(std::string* audio_language_code);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_audio_language_code();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_audio_language_code(
      std::string* audio_language_code);
  private:
  const std::string& _internal_audio_language_code() const;
  void _internal_set_audio_language_code(const std::string& value);
  std::string* _internal_mutable_audio_language_code();
  public:

  // string target_language_code = 4;
  void clear_target_language_code();
  const std::string& target_language_code() const;
  void set_target_language_code(const std::string& value);
  void set_target_language_code(std::string&& value);
  void set_target_language_code(const char* value);
  void set_target_language_code(const char* value, size_t size);
  std::string* mutable_target_language_code();
  std::string* release_target_language_code();
  void set_allocated_target_language_code(std::string* target_language_code);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_target_language_code();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_target_language_code(
      std::string* target_language_code);
  private:
  const std::string& _internal_target_language_code() const;
  void _internal_set_target_language_code(const std::string& value);
  std::string* _internal_mutable_target_language_code();
  public:

  // string audio_track = 5;
  void clear_audio_track();
  const std::string& audio_track() const;
  void set_audio_track(const std::string& value);
  void set_audio_track(std::string&& value);
  void set_audio_track(const char* value);
  void set_audio_track(const char* value, size_t size);
  std::string* mutable_audio_track();
  std::string* release_audio_track();
  void set_allocated_audio_track(std::string* audio_track);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_audio_track();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_audio_track(
      std::string* audio_track);
  private:
  const std::string& _internal_audio_track() const;
  void _internal_set_audio_track(const std::string& value);
  std::string* _internal_mutable_audio_track();
  public:

  // string hints = 6;
  void clear_hints();
  const std::string& hints() const;
  void set_hints(const std::string& value);
  void set_hints(std::string&& value);
  void set_hints(const char* value);
  void set_hints(const char* value, size_t size);
  std::string* mutable_hints();
  std::string* release_hints();
  void set_allocated_hints(std::string* hints);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_hints();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_hints(
      std::string* hints);
  private:
  const std::string& _internal_hints() const;
  void _internal_set_hints(const std::string& value);
  std::string* _internal_mutable_hints();
  public:

  // .google.cloud.speech.v1.RecognitionConfig streaming_config = 1;
  bool has_streaming_config() const;
  private:
  bool _internal_has_streaming_config() const;
  public:
  void clear_streaming_config();
  const ::google::cloud::speech::v1::RecognitionConfig& streaming_config() const;
  ::google::cloud::speech::v1::RecognitionConfig* release_streaming_config();
  ::google::cloud::speech::v1::RecognitionConfig* mutable_streaming_config();
  void set_allocated_streaming_config(::google::cloud::speech::v1::RecognitionConfig* streaming_config);
  private:
  const ::google::cloud::speech::v1::RecognitionConfig& _internal_streaming_config() const;
  ::google::cloud::speech::v1::RecognitionConfig* _internal_mutable_streaming_config();
  public:
  void unsafe_arena_set_allocated_streaming_config(
      ::google::cloud::speech::v1::RecognitionConfig* streaming_config);
  ::google::cloud::speech::v1::RecognitionConfig* unsafe_arena_release_streaming_config();

  // @@protoc_insertion_point(class_scope:sagittarius.translation.v1.StreamingTranslationRequestConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr media_identity_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr audio_language_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_language_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr audio_track_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hints_;
  ::google::cloud::speech::v1::RecognitionConfig* streaming_config_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_translation_2fv1_2ftranslation_2eproto;
};
// -------------------------------------------------------------------

class StreamingTranslationResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sagittarius.translation.v1.StreamingTranslationResponse) */ {
 public:
  StreamingTranslationResponse();
  virtual ~StreamingTranslationResponse();

  StreamingTranslationResponse(const StreamingTranslationResponse& from);
  StreamingTranslationResponse(StreamingTranslationResponse&& from) noexcept
    : StreamingTranslationResponse() {
    *this = ::std::move(from);
  }

  inline StreamingTranslationResponse& operator=(const StreamingTranslationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamingTranslationResponse& operator=(StreamingTranslationResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StreamingTranslationResponse& default_instance();

  enum StreamingResponseCase {
    kStreamingResult = 2,
    kTaskinfo = 3,
    kTranscriptResult = 4,
    STREAMING_RESPONSE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamingTranslationResponse* internal_default_instance() {
    return reinterpret_cast<const StreamingTranslationResponse*>(
               &_StreamingTranslationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(StreamingTranslationResponse& a, StreamingTranslationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamingTranslationResponse* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamingTranslationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamingTranslationResponse* New() const final {
    return CreateMaybeMessage<StreamingTranslationResponse>(nullptr);
  }

  StreamingTranslationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamingTranslationResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamingTranslationResponse& from);
  void MergeFrom(const StreamingTranslationResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamingTranslationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sagittarius.translation.v1.StreamingTranslationResponse";
  }
  protected:
  explicit StreamingTranslationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_translation_2fv1_2ftranslation_2eproto);
    return ::descriptor_table_translation_2fv1_2ftranslation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1,
    kStreamingResultFieldNumber = 2,
    kTaskinfoFieldNumber = 3,
    kTranscriptResultFieldNumber = 4,
  };
  // .google.rpc.Status error = 1;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::google::rpc::Status& error() const;
  ::google::rpc::Status* release_error();
  ::google::rpc::Status* mutable_error();
  void set_allocated_error(::google::rpc::Status* error);
  private:
  const ::google::rpc::Status& _internal_error() const;
  ::google::rpc::Status* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::google::rpc::Status* error);
  ::google::rpc::Status* unsafe_arena_release_error();

  // .sagittarius.translation.v1.StreamingTranslationResult streaming_result = 2;
  bool has_streaming_result() const;
  private:
  bool _internal_has_streaming_result() const;
  public:
  void clear_streaming_result();
  const ::sagittarius::translation::v1::StreamingTranslationResult& streaming_result() const;
  ::sagittarius::translation::v1::StreamingTranslationResult* release_streaming_result();
  ::sagittarius::translation::v1::StreamingTranslationResult* mutable_streaming_result();
  void set_allocated_streaming_result(::sagittarius::translation::v1::StreamingTranslationResult* streaming_result);
  private:
  const ::sagittarius::translation::v1::StreamingTranslationResult& _internal_streaming_result() const;
  ::sagittarius::translation::v1::StreamingTranslationResult* _internal_mutable_streaming_result();
  public:
  void unsafe_arena_set_allocated_streaming_result(
      ::sagittarius::translation::v1::StreamingTranslationResult* streaming_result);
  ::sagittarius::translation::v1::StreamingTranslationResult* unsafe_arena_release_streaming_result();

  // .sagittarius.translation.v1.StreamingTranslationTaskInfo taskinfo = 3;
  bool has_taskinfo() const;
  private:
  bool _internal_has_taskinfo() const;
  public:
  void clear_taskinfo();
  const ::sagittarius::translation::v1::StreamingTranslationTaskInfo& taskinfo() const;
  ::sagittarius::translation::v1::StreamingTranslationTaskInfo* release_taskinfo();
  ::sagittarius::translation::v1::StreamingTranslationTaskInfo* mutable_taskinfo();
  void set_allocated_taskinfo(::sagittarius::translation::v1::StreamingTranslationTaskInfo* taskinfo);
  private:
  const ::sagittarius::translation::v1::StreamingTranslationTaskInfo& _internal_taskinfo() const;
  ::sagittarius::translation::v1::StreamingTranslationTaskInfo* _internal_mutable_taskinfo();
  public:
  void unsafe_arena_set_allocated_taskinfo(
      ::sagittarius::translation::v1::StreamingTranslationTaskInfo* taskinfo);
  ::sagittarius::translation::v1::StreamingTranslationTaskInfo* unsafe_arena_release_taskinfo();

  // .sagittarius.translation.v1.TranscriptInfo transcript_result = 4;
  bool has_transcript_result() const;
  private:
  bool _internal_has_transcript_result() const;
  public:
  void clear_transcript_result();
  const ::sagittarius::translation::v1::TranscriptInfo& transcript_result() const;
  ::sagittarius::translation::v1::TranscriptInfo* release_transcript_result();
  ::sagittarius::translation::v1::TranscriptInfo* mutable_transcript_result();
  void set_allocated_transcript_result(::sagittarius::translation::v1::TranscriptInfo* transcript_result);
  private:
  const ::sagittarius::translation::v1::TranscriptInfo& _internal_transcript_result() const;
  ::sagittarius::translation::v1::TranscriptInfo* _internal_mutable_transcript_result();
  public:
  void unsafe_arena_set_allocated_transcript_result(
      ::sagittarius::translation::v1::TranscriptInfo* transcript_result);
  ::sagittarius::translation::v1::TranscriptInfo* unsafe_arena_release_transcript_result();

  void clear_streaming_response();
  StreamingResponseCase streaming_response_case() const;
  // @@protoc_insertion_point(class_scope:sagittarius.translation.v1.StreamingTranslationResponse)
 private:
  class _Internal;
  void set_has_streaming_result();
  void set_has_taskinfo();
  void set_has_transcript_result();

  inline bool has_streaming_response() const;
  inline void clear_has_streaming_response();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::rpc::Status* error_;
  union StreamingResponseUnion {
    StreamingResponseUnion() {}
    ::sagittarius::translation::v1::StreamingTranslationResult* streaming_result_;
    ::sagittarius::translation::v1::StreamingTranslationTaskInfo* taskinfo_;
    ::sagittarius::translation::v1::TranscriptInfo* transcript_result_;
  } streaming_response_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_translation_2fv1_2ftranslation_2eproto;
};
// -------------------------------------------------------------------

class StreamingTranslationTaskRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sagittarius.translation.v1.StreamingTranslationTaskRequest) */ {
 public:
  StreamingTranslationTaskRequest();
  virtual ~StreamingTranslationTaskRequest();

  StreamingTranslationTaskRequest(const StreamingTranslationTaskRequest& from);
  StreamingTranslationTaskRequest(StreamingTranslationTaskRequest&& from) noexcept
    : StreamingTranslationTaskRequest() {
    *this = ::std::move(from);
  }

  inline StreamingTranslationTaskRequest& operator=(const StreamingTranslationTaskRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamingTranslationTaskRequest& operator=(StreamingTranslationTaskRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StreamingTranslationTaskRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamingTranslationTaskRequest* internal_default_instance() {
    return reinterpret_cast<const StreamingTranslationTaskRequest*>(
               &_StreamingTranslationTaskRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(StreamingTranslationTaskRequest& a, StreamingTranslationTaskRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamingTranslationTaskRequest* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamingTranslationTaskRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamingTranslationTaskRequest* New() const final {
    return CreateMaybeMessage<StreamingTranslationTaskRequest>(nullptr);
  }

  StreamingTranslationTaskRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamingTranslationTaskRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamingTranslationTaskRequest& from);
  void MergeFrom(const StreamingTranslationTaskRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamingTranslationTaskRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sagittarius.translation.v1.StreamingTranslationTaskRequest";
  }
  protected:
  explicit StreamingTranslationTaskRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_translation_2fv1_2ftranslation_2eproto);
    return ::descriptor_table_translation_2fv1_2ftranslation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskIdFieldNumber = 1,
  };
  // string task_id = 1;
  void clear_task_id();
  const std::string& task_id() const;
  void set_task_id(const std::string& value);
  void set_task_id(std::string&& value);
  void set_task_id(const char* value);
  void set_task_id(const char* value, size_t size);
  std::string* mutable_task_id();
  std::string* release_task_id();
  void set_allocated_task_id(std::string* task_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_task_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_task_id(
      std::string* task_id);
  private:
  const std::string& _internal_task_id() const;
  void _internal_set_task_id(const std::string& value);
  std::string* _internal_mutable_task_id();
  public:

  // @@protoc_insertion_point(class_scope:sagittarius.translation.v1.StreamingTranslationTaskRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_translation_2fv1_2ftranslation_2eproto;
};
// -------------------------------------------------------------------

class StreamingTranslationTaskResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sagittarius.translation.v1.StreamingTranslationTaskResponse) */ {
 public:
  StreamingTranslationTaskResponse();
  virtual ~StreamingTranslationTaskResponse();

  StreamingTranslationTaskResponse(const StreamingTranslationTaskResponse& from);
  StreamingTranslationTaskResponse(StreamingTranslationTaskResponse&& from) noexcept
    : StreamingTranslationTaskResponse() {
    *this = ::std::move(from);
  }

  inline StreamingTranslationTaskResponse& operator=(const StreamingTranslationTaskResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamingTranslationTaskResponse& operator=(StreamingTranslationTaskResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StreamingTranslationTaskResponse& default_instance();

  enum StreamingRequestCase {
    kTaskinfo = 2,
    kTranscriptinfo = 3,
    STREAMING_REQUEST_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamingTranslationTaskResponse* internal_default_instance() {
    return reinterpret_cast<const StreamingTranslationTaskResponse*>(
               &_StreamingTranslationTaskResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(StreamingTranslationTaskResponse& a, StreamingTranslationTaskResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamingTranslationTaskResponse* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamingTranslationTaskResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamingTranslationTaskResponse* New() const final {
    return CreateMaybeMessage<StreamingTranslationTaskResponse>(nullptr);
  }

  StreamingTranslationTaskResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamingTranslationTaskResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamingTranslationTaskResponse& from);
  void MergeFrom(const StreamingTranslationTaskResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamingTranslationTaskResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sagittarius.translation.v1.StreamingTranslationTaskResponse";
  }
  protected:
  explicit StreamingTranslationTaskResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_translation_2fv1_2ftranslation_2eproto);
    return ::descriptor_table_translation_2fv1_2ftranslation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 1,
    kTaskinfoFieldNumber = 2,
    kTranscriptinfoFieldNumber = 3,
  };
  // .google.rpc.Status error = 1;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::google::rpc::Status& error() const;
  ::google::rpc::Status* release_error();
  ::google::rpc::Status* mutable_error();
  void set_allocated_error(::google::rpc::Status* error);
  private:
  const ::google::rpc::Status& _internal_error() const;
  ::google::rpc::Status* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::google::rpc::Status* error);
  ::google::rpc::Status* unsafe_arena_release_error();

  // .sagittarius.translation.v1.StreamingTranslationTaskInfo taskinfo = 2;
  bool has_taskinfo() const;
  private:
  bool _internal_has_taskinfo() const;
  public:
  void clear_taskinfo();
  const ::sagittarius::translation::v1::StreamingTranslationTaskInfo& taskinfo() const;
  ::sagittarius::translation::v1::StreamingTranslationTaskInfo* release_taskinfo();
  ::sagittarius::translation::v1::StreamingTranslationTaskInfo* mutable_taskinfo();
  void set_allocated_taskinfo(::sagittarius::translation::v1::StreamingTranslationTaskInfo* taskinfo);
  private:
  const ::sagittarius::translation::v1::StreamingTranslationTaskInfo& _internal_taskinfo() const;
  ::sagittarius::translation::v1::StreamingTranslationTaskInfo* _internal_mutable_taskinfo();
  public:
  void unsafe_arena_set_allocated_taskinfo(
      ::sagittarius::translation::v1::StreamingTranslationTaskInfo* taskinfo);
  ::sagittarius::translation::v1::StreamingTranslationTaskInfo* unsafe_arena_release_taskinfo();

  // .sagittarius.translation.v1.TranscriptInfo transcriptinfo = 3;
  bool has_transcriptinfo() const;
  private:
  bool _internal_has_transcriptinfo() const;
  public:
  void clear_transcriptinfo();
  const ::sagittarius::translation::v1::TranscriptInfo& transcriptinfo() const;
  ::sagittarius::translation::v1::TranscriptInfo* release_transcriptinfo();
  ::sagittarius::translation::v1::TranscriptInfo* mutable_transcriptinfo();
  void set_allocated_transcriptinfo(::sagittarius::translation::v1::TranscriptInfo* transcriptinfo);
  private:
  const ::sagittarius::translation::v1::TranscriptInfo& _internal_transcriptinfo() const;
  ::sagittarius::translation::v1::TranscriptInfo* _internal_mutable_transcriptinfo();
  public:
  void unsafe_arena_set_allocated_transcriptinfo(
      ::sagittarius::translation::v1::TranscriptInfo* transcriptinfo);
  ::sagittarius::translation::v1::TranscriptInfo* unsafe_arena_release_transcriptinfo();

  void clear_streaming_request();
  StreamingRequestCase streaming_request_case() const;
  // @@protoc_insertion_point(class_scope:sagittarius.translation.v1.StreamingTranslationTaskResponse)
 private:
  class _Internal;
  void set_has_taskinfo();
  void set_has_transcriptinfo();

  inline bool has_streaming_request() const;
  inline void clear_has_streaming_request();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::rpc::Status* error_;
  union StreamingRequestUnion {
    StreamingRequestUnion() {}
    ::sagittarius::translation::v1::StreamingTranslationTaskInfo* taskinfo_;
    ::sagittarius::translation::v1::TranscriptInfo* transcriptinfo_;
  } streaming_request_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_translation_2fv1_2ftranslation_2eproto;
};
// -------------------------------------------------------------------

class StreamingTranslationTaskInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sagittarius.translation.v1.StreamingTranslationTaskInfo) */ {
 public:
  StreamingTranslationTaskInfo();
  virtual ~StreamingTranslationTaskInfo();

  StreamingTranslationTaskInfo(const StreamingTranslationTaskInfo& from);
  StreamingTranslationTaskInfo(StreamingTranslationTaskInfo&& from) noexcept
    : StreamingTranslationTaskInfo() {
    *this = ::std::move(from);
  }

  inline StreamingTranslationTaskInfo& operator=(const StreamingTranslationTaskInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamingTranslationTaskInfo& operator=(StreamingTranslationTaskInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StreamingTranslationTaskInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamingTranslationTaskInfo* internal_default_instance() {
    return reinterpret_cast<const StreamingTranslationTaskInfo*>(
               &_StreamingTranslationTaskInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(StreamingTranslationTaskInfo& a, StreamingTranslationTaskInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamingTranslationTaskInfo* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamingTranslationTaskInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamingTranslationTaskInfo* New() const final {
    return CreateMaybeMessage<StreamingTranslationTaskInfo>(nullptr);
  }

  StreamingTranslationTaskInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamingTranslationTaskInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamingTranslationTaskInfo& from);
  void MergeFrom(const StreamingTranslationTaskInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamingTranslationTaskInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sagittarius.translation.v1.StreamingTranslationTaskInfo";
  }
  protected:
  explicit StreamingTranslationTaskInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_translation_2fv1_2ftranslation_2eproto);
    return ::descriptor_table_translation_2fv1_2ftranslation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskIdFieldNumber = 1,
    kEstimateTimeFieldNumber = 2,
  };
  // string task_id = 1;
  void clear_task_id();
  const std::string& task_id() const;
  void set_task_id(const std::string& value);
  void set_task_id(std::string&& value);
  void set_task_id(const char* value);
  void set_task_id(const char* value, size_t size);
  std::string* mutable_task_id();
  std::string* release_task_id();
  void set_allocated_task_id(std::string* task_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_task_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_task_id(
      std::string* task_id);
  private:
  const std::string& _internal_task_id() const;
  void _internal_set_task_id(const std::string& value);
  std::string* _internal_mutable_task_id();
  public:

  // double estimate_time = 2;
  void clear_estimate_time();
  double estimate_time() const;
  void set_estimate_time(double value);
  private:
  double _internal_estimate_time() const;
  void _internal_set_estimate_time(double value);
  public:

  // @@protoc_insertion_point(class_scope:sagittarius.translation.v1.StreamingTranslationTaskInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_id_;
  double estimate_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_translation_2fv1_2ftranslation_2eproto;
};
// -------------------------------------------------------------------

class StreamingTranslationResult :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sagittarius.translation.v1.StreamingTranslationResult) */ {
 public:
  StreamingTranslationResult();
  virtual ~StreamingTranslationResult();

  StreamingTranslationResult(const StreamingTranslationResult& from);
  StreamingTranslationResult(StreamingTranslationResult&& from) noexcept
    : StreamingTranslationResult() {
    *this = ::std::move(from);
  }

  inline StreamingTranslationResult& operator=(const StreamingTranslationResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamingTranslationResult& operator=(StreamingTranslationResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StreamingTranslationResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamingTranslationResult* internal_default_instance() {
    return reinterpret_cast<const StreamingTranslationResult*>(
               &_StreamingTranslationResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(StreamingTranslationResult& a, StreamingTranslationResult& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamingTranslationResult* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamingTranslationResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamingTranslationResult* New() const final {
    return CreateMaybeMessage<StreamingTranslationResult>(nullptr);
  }

  StreamingTranslationResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamingTranslationResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamingTranslationResult& from);
  void MergeFrom(const StreamingTranslationResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamingTranslationResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sagittarius.translation.v1.StreamingTranslationResult";
  }
  protected:
  explicit StreamingTranslationResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_translation_2fv1_2ftranslation_2eproto);
    return ::descriptor_table_translation_2fv1_2ftranslation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTranscriptFieldNumber = 1,
    kConfidenceFieldNumber = 2,
    kStabilityFieldNumber = 3,
    kStartTimeFieldNumber = 4,
    kEndTimeFieldNumber = 5,
  };
  // string transcript = 1;
  void clear_transcript();
  const std::string& transcript() const;
  void set_transcript(const std::string& value);
  void set_transcript(std::string&& value);
  void set_transcript(const char* value);
  void set_transcript(const char* value, size_t size);
  std::string* mutable_transcript();
  std::string* release_transcript();
  void set_allocated_transcript(std::string* transcript);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_transcript();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_transcript(
      std::string* transcript);
  private:
  const std::string& _internal_transcript() const;
  void _internal_set_transcript(const std::string& value);
  std::string* _internal_mutable_transcript();
  public:

  // float confidence = 2;
  void clear_confidence();
  float confidence() const;
  void set_confidence(float value);
  private:
  float _internal_confidence() const;
  void _internal_set_confidence(float value);
  public:

  // float stability = 3;
  void clear_stability();
  float stability() const;
  void set_stability(float value);
  private:
  float _internal_stability() const;
  void _internal_set_stability(float value);
  public:

  // double start_time = 4;
  void clear_start_time();
  double start_time() const;
  void set_start_time(double value);
  private:
  double _internal_start_time() const;
  void _internal_set_start_time(double value);
  public:

  // double end_time = 5;
  void clear_end_time();
  double end_time() const;
  void set_end_time(double value);
  private:
  double _internal_end_time() const;
  void _internal_set_end_time(double value);
  public:

  // @@protoc_insertion_point(class_scope:sagittarius.translation.v1.StreamingTranslationResult)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transcript_;
  float confidence_;
  float stability_;
  double start_time_;
  double end_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_translation_2fv1_2ftranslation_2eproto;
};
// -------------------------------------------------------------------

class TextTranslationRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sagittarius.translation.v1.TextTranslationRequest) */ {
 public:
  TextTranslationRequest();
  virtual ~TextTranslationRequest();

  TextTranslationRequest(const TextTranslationRequest& from);
  TextTranslationRequest(TextTranslationRequest&& from) noexcept
    : TextTranslationRequest() {
    *this = ::std::move(from);
  }

  inline TextTranslationRequest& operator=(const TextTranslationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TextTranslationRequest& operator=(TextTranslationRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TextTranslationRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TextTranslationRequest* internal_default_instance() {
    return reinterpret_cast<const TextTranslationRequest*>(
               &_TextTranslationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(TextTranslationRequest& a, TextTranslationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TextTranslationRequest* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TextTranslationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TextTranslationRequest* New() const final {
    return CreateMaybeMessage<TextTranslationRequest>(nullptr);
  }

  TextTranslationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TextTranslationRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TextTranslationRequest& from);
  void MergeFrom(const TextTranslationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TextTranslationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sagittarius.translation.v1.TextTranslationRequest";
  }
  protected:
  explicit TextTranslationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_translation_2fv1_2ftranslation_2eproto);
    return ::descriptor_table_translation_2fv1_2ftranslation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 1,
    kTargetLanguageCodeFieldNumber = 2,
    kSourceLanguageCodeFieldNumber = 3,
  };
  // repeated string text = 1;
  int text_size() const;
  private:
  int _internal_text_size() const;
  public:
  void clear_text();
  const std::string& text(int index) const;
  std::string* mutable_text(int index);
  void set_text(int index, const std::string& value);
  void set_text(int index, std::string&& value);
  void set_text(int index, const char* value);
  void set_text(int index, const char* value, size_t size);
  std::string* add_text();
  void add_text(const std::string& value);
  void add_text(std::string&& value);
  void add_text(const char* value);
  void add_text(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& text() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_text();
  private:
  const std::string& _internal_text(int index) const;
  std::string* _internal_add_text();
  public:

  // string target_language_code = 2;
  void clear_target_language_code();
  const std::string& target_language_code() const;
  void set_target_language_code(const std::string& value);
  void set_target_language_code(std::string&& value);
  void set_target_language_code(const char* value);
  void set_target_language_code(const char* value, size_t size);
  std::string* mutable_target_language_code();
  std::string* release_target_language_code();
  void set_allocated_target_language_code(std::string* target_language_code);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_target_language_code();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_target_language_code(
      std::string* target_language_code);
  private:
  const std::string& _internal_target_language_code() const;
  void _internal_set_target_language_code(const std::string& value);
  std::string* _internal_mutable_target_language_code();
  public:

  // string source_language_code = 3;
  void clear_source_language_code();
  const std::string& source_language_code() const;
  void set_source_language_code(const std::string& value);
  void set_source_language_code(std::string&& value);
  void set_source_language_code(const char* value);
  void set_source_language_code(const char* value, size_t size);
  std::string* mutable_source_language_code();
  std::string* release_source_language_code();
  void set_allocated_source_language_code(std::string* source_language_code);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_source_language_code();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_source_language_code(
      std::string* source_language_code);
  private:
  const std::string& _internal_source_language_code() const;
  void _internal_set_source_language_code(const std::string& value);
  std::string* _internal_mutable_source_language_code();
  public:

  // @@protoc_insertion_point(class_scope:sagittarius.translation.v1.TextTranslationRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> text_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_language_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_language_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_translation_2fv1_2ftranslation_2eproto;
};
// -------------------------------------------------------------------

class TextTranslationResponse_Text :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sagittarius.translation.v1.TextTranslationResponse.Text) */ {
 public:
  TextTranslationResponse_Text();
  virtual ~TextTranslationResponse_Text();

  TextTranslationResponse_Text(const TextTranslationResponse_Text& from);
  TextTranslationResponse_Text(TextTranslationResponse_Text&& from) noexcept
    : TextTranslationResponse_Text() {
    *this = ::std::move(from);
  }

  inline TextTranslationResponse_Text& operator=(const TextTranslationResponse_Text& from) {
    CopyFrom(from);
    return *this;
  }
  inline TextTranslationResponse_Text& operator=(TextTranslationResponse_Text&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TextTranslationResponse_Text& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TextTranslationResponse_Text* internal_default_instance() {
    return reinterpret_cast<const TextTranslationResponse_Text*>(
               &_TextTranslationResponse_Text_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(TextTranslationResponse_Text& a, TextTranslationResponse_Text& b) {
    a.Swap(&b);
  }
  inline void Swap(TextTranslationResponse_Text* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TextTranslationResponse_Text* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TextTranslationResponse_Text* New() const final {
    return CreateMaybeMessage<TextTranslationResponse_Text>(nullptr);
  }

  TextTranslationResponse_Text* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TextTranslationResponse_Text>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TextTranslationResponse_Text& from);
  void MergeFrom(const TextTranslationResponse_Text& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TextTranslationResponse_Text* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sagittarius.translation.v1.TextTranslationResponse.Text";
  }
  protected:
  explicit TextTranslationResponse_Text(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_translation_2fv1_2ftranslation_2eproto);
    return ::descriptor_table_translation_2fv1_2ftranslation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceLanguageFieldNumber = 1,
    kTextFieldNumber = 2,
  };
  // string source_language = 1;
  void clear_source_language();
  const std::string& source_language() const;
  void set_source_language(const std::string& value);
  void set_source_language(std::string&& value);
  void set_source_language(const char* value);
  void set_source_language(const char* value, size_t size);
  std::string* mutable_source_language();
  std::string* release_source_language();
  void set_allocated_source_language(std::string* source_language);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_source_language();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_source_language(
      std::string* source_language);
  private:
  const std::string& _internal_source_language() const;
  void _internal_set_source_language(const std::string& value);
  std::string* _internal_mutable_source_language();
  public:

  // string text = 2;
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_text();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_text(
      std::string* text);
  private:
  const std::string& _internal_text() const;
  void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // @@protoc_insertion_point(class_scope:sagittarius.translation.v1.TextTranslationResponse.Text)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_language_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_translation_2fv1_2ftranslation_2eproto;
};
// -------------------------------------------------------------------

class TextTranslationResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sagittarius.translation.v1.TextTranslationResponse) */ {
 public:
  TextTranslationResponse();
  virtual ~TextTranslationResponse();

  TextTranslationResponse(const TextTranslationResponse& from);
  TextTranslationResponse(TextTranslationResponse&& from) noexcept
    : TextTranslationResponse() {
    *this = ::std::move(from);
  }

  inline TextTranslationResponse& operator=(const TextTranslationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TextTranslationResponse& operator=(TextTranslationResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TextTranslationResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TextTranslationResponse* internal_default_instance() {
    return reinterpret_cast<const TextTranslationResponse*>(
               &_TextTranslationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(TextTranslationResponse& a, TextTranslationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TextTranslationResponse* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TextTranslationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TextTranslationResponse* New() const final {
    return CreateMaybeMessage<TextTranslationResponse>(nullptr);
  }

  TextTranslationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TextTranslationResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TextTranslationResponse& from);
  void MergeFrom(const TextTranslationResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TextTranslationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sagittarius.translation.v1.TextTranslationResponse";
  }
  protected:
  explicit TextTranslationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_translation_2fv1_2ftranslation_2eproto);
    return ::descriptor_table_translation_2fv1_2ftranslation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TextTranslationResponse_Text Text;

  // accessors -------------------------------------------------------

  enum : int {
    kResultsFieldNumber = 2,
    kErrorFieldNumber = 1,
  };
  // repeated .sagittarius.translation.v1.TextTranslationResponse.Text results = 2;
  int results_size() const;
  private:
  int _internal_results_size() const;
  public:
  void clear_results();
  ::sagittarius::translation::v1::TextTranslationResponse_Text* mutable_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sagittarius::translation::v1::TextTranslationResponse_Text >*
      mutable_results();
  private:
  const ::sagittarius::translation::v1::TextTranslationResponse_Text& _internal_results(int index) const;
  ::sagittarius::translation::v1::TextTranslationResponse_Text* _internal_add_results();
  public:
  const ::sagittarius::translation::v1::TextTranslationResponse_Text& results(int index) const;
  ::sagittarius::translation::v1::TextTranslationResponse_Text* add_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sagittarius::translation::v1::TextTranslationResponse_Text >&
      results() const;

  // .google.rpc.Status error = 1;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::google::rpc::Status& error() const;
  ::google::rpc::Status* release_error();
  ::google::rpc::Status* mutable_error();
  void set_allocated_error(::google::rpc::Status* error);
  private:
  const ::google::rpc::Status& _internal_error() const;
  ::google::rpc::Status* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::google::rpc::Status* error);
  ::google::rpc::Status* unsafe_arena_release_error();

  // @@protoc_insertion_point(class_scope:sagittarius.translation.v1.TextTranslationResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sagittarius::translation::v1::TextTranslationResponse_Text > results_;
  ::google::rpc::Status* error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_translation_2fv1_2ftranslation_2eproto;
};
// -------------------------------------------------------------------

class UserQuotaRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sagittarius.translation.v1.UserQuotaRequest) */ {
 public:
  UserQuotaRequest();
  virtual ~UserQuotaRequest();

  UserQuotaRequest(const UserQuotaRequest& from);
  UserQuotaRequest(UserQuotaRequest&& from) noexcept
    : UserQuotaRequest() {
    *this = ::std::move(from);
  }

  inline UserQuotaRequest& operator=(const UserQuotaRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserQuotaRequest& operator=(UserQuotaRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserQuotaRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserQuotaRequest* internal_default_instance() {
    return reinterpret_cast<const UserQuotaRequest*>(
               &_UserQuotaRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(UserQuotaRequest& a, UserQuotaRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UserQuotaRequest* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserQuotaRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserQuotaRequest* New() const final {
    return CreateMaybeMessage<UserQuotaRequest>(nullptr);
  }

  UserQuotaRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserQuotaRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserQuotaRequest& from);
  void MergeFrom(const UserQuotaRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserQuotaRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sagittarius.translation.v1.UserQuotaRequest";
  }
  protected:
  explicit UserQuotaRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_translation_2fv1_2ftranslation_2eproto);
    return ::descriptor_table_translation_2fv1_2ftranslation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:sagittarius.translation.v1.UserQuotaRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_translation_2fv1_2ftranslation_2eproto;
};
// -------------------------------------------------------------------

class UserQuotaResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sagittarius.translation.v1.UserQuotaResponse) */ {
 public:
  UserQuotaResponse();
  virtual ~UserQuotaResponse();

  UserQuotaResponse(const UserQuotaResponse& from);
  UserQuotaResponse(UserQuotaResponse&& from) noexcept
    : UserQuotaResponse() {
    *this = ::std::move(from);
  }

  inline UserQuotaResponse& operator=(const UserQuotaResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserQuotaResponse& operator=(UserQuotaResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserQuotaResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserQuotaResponse* internal_default_instance() {
    return reinterpret_cast<const UserQuotaResponse*>(
               &_UserQuotaResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(UserQuotaResponse& a, UserQuotaResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UserQuotaResponse* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserQuotaResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserQuotaResponse* New() const final {
    return CreateMaybeMessage<UserQuotaResponse>(nullptr);
  }

  UserQuotaResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserQuotaResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserQuotaResponse& from);
  void MergeFrom(const UserQuotaResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserQuotaResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sagittarius.translation.v1.UserQuotaResponse";
  }
  protected:
  explicit UserQuotaResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_translation_2fv1_2ftranslation_2eproto);
    return ::descriptor_table_translation_2fv1_2ftranslation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 3,
    kQuotaFieldNumber = 1,
    kTimeLeftFieldNumber = 2,
  };
  // .google.rpc.Status error = 3;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::google::rpc::Status& error() const;
  ::google::rpc::Status* release_error();
  ::google::rpc::Status* mutable_error();
  void set_allocated_error(::google::rpc::Status* error);
  private:
  const ::google::rpc::Status& _internal_error() const;
  ::google::rpc::Status* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::google::rpc::Status* error);
  ::google::rpc::Status* unsafe_arena_release_error();

  // int64 quota = 1;
  void clear_quota();
  ::PROTOBUF_NAMESPACE_ID::int64 quota() const;
  void set_quota(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_quota() const;
  void _internal_set_quota(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 time_left = 2;
  void clear_time_left();
  ::PROTOBUF_NAMESPACE_ID::int64 time_left() const;
  void set_time_left(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time_left() const;
  void _internal_set_time_left(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:sagittarius.translation.v1.UserQuotaResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::rpc::Status* error_;
  ::PROTOBUF_NAMESPACE_ID::int64 quota_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_left_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_translation_2fv1_2ftranslation_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MediaTranslationRequest

// string media_identity = 1;
inline void MediaTranslationRequest::clear_media_identity() {
  media_identity_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& MediaTranslationRequest::media_identity() const {
  // @@protoc_insertion_point(field_get:sagittarius.translation.v1.MediaTranslationRequest.media_identity)
  return _internal_media_identity();
}
inline void MediaTranslationRequest::set_media_identity(const std::string& value) {
  _internal_set_media_identity(value);
  // @@protoc_insertion_point(field_set:sagittarius.translation.v1.MediaTranslationRequest.media_identity)
}
inline std::string* MediaTranslationRequest::mutable_media_identity() {
  // @@protoc_insertion_point(field_mutable:sagittarius.translation.v1.MediaTranslationRequest.media_identity)
  return _internal_mutable_media_identity();
}
inline const std::string& MediaTranslationRequest::_internal_media_identity() const {
  return media_identity_.Get();
}
inline void MediaTranslationRequest::_internal_set_media_identity(const std::string& value) {
  
  media_identity_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void MediaTranslationRequest::set_media_identity(std::string&& value) {
  
  media_identity_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:sagittarius.translation.v1.MediaTranslationRequest.media_identity)
}
inline void MediaTranslationRequest::set_media_identity(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  media_identity_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:sagittarius.translation.v1.MediaTranslationRequest.media_identity)
}
inline void MediaTranslationRequest::set_media_identity(const char* value,
    size_t size) {
  
  media_identity_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:sagittarius.translation.v1.MediaTranslationRequest.media_identity)
}
inline std::string* MediaTranslationRequest::_internal_mutable_media_identity() {
  
  return media_identity_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* MediaTranslationRequest::release_media_identity() {
  // @@protoc_insertion_point(field_release:sagittarius.translation.v1.MediaTranslationRequest.media_identity)
  
  return media_identity_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void MediaTranslationRequest::set_allocated_media_identity(std::string* media_identity) {
  if (media_identity != nullptr) {
    
  } else {
    
  }
  media_identity_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), media_identity,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:sagittarius.translation.v1.MediaTranslationRequest.media_identity)
}
inline std::string* MediaTranslationRequest::unsafe_arena_release_media_identity() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sagittarius.translation.v1.MediaTranslationRequest.media_identity)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return media_identity_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void MediaTranslationRequest::unsafe_arena_set_allocated_media_identity(
    std::string* media_identity) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (media_identity != nullptr) {
    
  } else {
    
  }
  media_identity_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      media_identity, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sagittarius.translation.v1.MediaTranslationRequest.media_identity)
}

// string language_code = 2;
inline void MediaTranslationRequest::clear_language_code() {
  language_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& MediaTranslationRequest::language_code() const {
  // @@protoc_insertion_point(field_get:sagittarius.translation.v1.MediaTranslationRequest.language_code)
  return _internal_language_code();
}
inline void MediaTranslationRequest::set_language_code(const std::string& value) {
  _internal_set_language_code(value);
  // @@protoc_insertion_point(field_set:sagittarius.translation.v1.MediaTranslationRequest.language_code)
}
inline std::string* MediaTranslationRequest::mutable_language_code() {
  // @@protoc_insertion_point(field_mutable:sagittarius.translation.v1.MediaTranslationRequest.language_code)
  return _internal_mutable_language_code();
}
inline const std::string& MediaTranslationRequest::_internal_language_code() const {
  return language_code_.Get();
}
inline void MediaTranslationRequest::_internal_set_language_code(const std::string& value) {
  
  language_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void MediaTranslationRequest::set_language_code(std::string&& value) {
  
  language_code_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:sagittarius.translation.v1.MediaTranslationRequest.language_code)
}
inline void MediaTranslationRequest::set_language_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  language_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:sagittarius.translation.v1.MediaTranslationRequest.language_code)
}
inline void MediaTranslationRequest::set_language_code(const char* value,
    size_t size) {
  
  language_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:sagittarius.translation.v1.MediaTranslationRequest.language_code)
}
inline std::string* MediaTranslationRequest::_internal_mutable_language_code() {
  
  return language_code_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* MediaTranslationRequest::release_language_code() {
  // @@protoc_insertion_point(field_release:sagittarius.translation.v1.MediaTranslationRequest.language_code)
  
  return language_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void MediaTranslationRequest::set_allocated_language_code(std::string* language_code) {
  if (language_code != nullptr) {
    
  } else {
    
  }
  language_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language_code,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:sagittarius.translation.v1.MediaTranslationRequest.language_code)
}
inline std::string* MediaTranslationRequest::unsafe_arena_release_language_code() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sagittarius.translation.v1.MediaTranslationRequest.language_code)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return language_code_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void MediaTranslationRequest::unsafe_arena_set_allocated_language_code(
    std::string* language_code) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (language_code != nullptr) {
    
  } else {
    
  }
  language_code_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      language_code, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sagittarius.translation.v1.MediaTranslationRequest.language_code)
}

// string format = 3;
inline void MediaTranslationRequest::clear_format() {
  format_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& MediaTranslationRequest::format() const {
  // @@protoc_insertion_point(field_get:sagittarius.translation.v1.MediaTranslationRequest.format)
  return _internal_format();
}
inline void MediaTranslationRequest::set_format(const std::string& value) {
  _internal_set_format(value);
  // @@protoc_insertion_point(field_set:sagittarius.translation.v1.MediaTranslationRequest.format)
}
inline std::string* MediaTranslationRequest::mutable_format() {
  // @@protoc_insertion_point(field_mutable:sagittarius.translation.v1.MediaTranslationRequest.format)
  return _internal_mutable_format();
}
inline const std::string& MediaTranslationRequest::_internal_format() const {
  return format_.Get();
}
inline void MediaTranslationRequest::_internal_set_format(const std::string& value) {
  
  format_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void MediaTranslationRequest::set_format(std::string&& value) {
  
  format_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:sagittarius.translation.v1.MediaTranslationRequest.format)
}
inline void MediaTranslationRequest::set_format(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  format_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:sagittarius.translation.v1.MediaTranslationRequest.format)
}
inline void MediaTranslationRequest::set_format(const char* value,
    size_t size) {
  
  format_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:sagittarius.translation.v1.MediaTranslationRequest.format)
}
inline std::string* MediaTranslationRequest::_internal_mutable_format() {
  
  return format_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* MediaTranslationRequest::release_format() {
  // @@protoc_insertion_point(field_release:sagittarius.translation.v1.MediaTranslationRequest.format)
  
  return format_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void MediaTranslationRequest::set_allocated_format(std::string* format) {
  if (format != nullptr) {
    
  } else {
    
  }
  format_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), format,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:sagittarius.translation.v1.MediaTranslationRequest.format)
}
inline std::string* MediaTranslationRequest::unsafe_arena_release_format() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sagittarius.translation.v1.MediaTranslationRequest.format)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return format_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void MediaTranslationRequest::unsafe_arena_set_allocated_format(
    std::string* format) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (format != nullptr) {
    
  } else {
    
  }
  format_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      format, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sagittarius.translation.v1.MediaTranslationRequest.format)
}

// double start_time = 6;
inline void MediaTranslationRequest::clear_start_time() {
  start_time_ = 0;
}
inline double MediaTranslationRequest::_internal_start_time() const {
  return start_time_;
}
inline double MediaTranslationRequest::start_time() const {
  // @@protoc_insertion_point(field_get:sagittarius.translation.v1.MediaTranslationRequest.start_time)
  return _internal_start_time();
}
inline void MediaTranslationRequest::_internal_set_start_time(double value) {
  
  start_time_ = value;
}
inline void MediaTranslationRequest::set_start_time(double value) {
  _internal_set_start_time(value);
  // @@protoc_insertion_point(field_set:sagittarius.translation.v1.MediaTranslationRequest.start_time)
}

// string hints = 7;
inline void MediaTranslationRequest::clear_hints() {
  hints_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& MediaTranslationRequest::hints() const {
  // @@protoc_insertion_point(field_get:sagittarius.translation.v1.MediaTranslationRequest.hints)
  return _internal_hints();
}
inline void MediaTranslationRequest::set_hints(const std::string& value) {
  _internal_set_hints(value);
  // @@protoc_insertion_point(field_set:sagittarius.translation.v1.MediaTranslationRequest.hints)
}
inline std::string* MediaTranslationRequest::mutable_hints() {
  // @@protoc_insertion_point(field_mutable:sagittarius.translation.v1.MediaTranslationRequest.hints)
  return _internal_mutable_hints();
}
inline const std::string& MediaTranslationRequest::_internal_hints() const {
  return hints_.Get();
}
inline void MediaTranslationRequest::_internal_set_hints(const std::string& value) {
  
  hints_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void MediaTranslationRequest::set_hints(std::string&& value) {
  
  hints_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:sagittarius.translation.v1.MediaTranslationRequest.hints)
}
inline void MediaTranslationRequest::set_hints(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hints_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:sagittarius.translation.v1.MediaTranslationRequest.hints)
}
inline void MediaTranslationRequest::set_hints(const char* value,
    size_t size) {
  
  hints_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:sagittarius.translation.v1.MediaTranslationRequest.hints)
}
inline std::string* MediaTranslationRequest::_internal_mutable_hints() {
  
  return hints_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* MediaTranslationRequest::release_hints() {
  // @@protoc_insertion_point(field_release:sagittarius.translation.v1.MediaTranslationRequest.hints)
  
  return hints_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void MediaTranslationRequest::set_allocated_hints(std::string* hints) {
  if (hints != nullptr) {
    
  } else {
    
  }
  hints_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hints,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:sagittarius.translation.v1.MediaTranslationRequest.hints)
}
inline std::string* MediaTranslationRequest::unsafe_arena_release_hints() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sagittarius.translation.v1.MediaTranslationRequest.hints)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return hints_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void MediaTranslationRequest::unsafe_arena_set_allocated_hints(
    std::string* hints) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (hints != nullptr) {
    
  } else {
    
  }
  hints_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      hints, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sagittarius.translation.v1.MediaTranslationRequest.hints)
}

// -------------------------------------------------------------------

// MediaTranslationResponse

// .google.rpc.Status error = 1;
inline bool MediaTranslationResponse::_internal_has_error() const {
  return this != internal_default_instance() && error_ != nullptr;
}
inline bool MediaTranslationResponse::has_error() const {
  return _internal_has_error();
}
inline const ::google::rpc::Status& MediaTranslationResponse::_internal_error() const {
  const ::google::rpc::Status* p = error_;
  return p != nullptr ? *p : *reinterpret_cast<const ::google::rpc::Status*>(
      &::google::rpc::_Status_default_instance_);
}
inline const ::google::rpc::Status& MediaTranslationResponse::error() const {
  // @@protoc_insertion_point(field_get:sagittarius.translation.v1.MediaTranslationResponse.error)
  return _internal_error();
}
inline ::google::rpc::Status* MediaTranslationResponse::release_error() {
  auto temp = unsafe_arena_release_error();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::rpc::Status* MediaTranslationResponse::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:sagittarius.translation.v1.MediaTranslationResponse.error)
  
  ::google::rpc::Status* temp = error_;
  error_ = nullptr;
  return temp;
}
inline ::google::rpc::Status* MediaTranslationResponse::_internal_mutable_error() {
  
  if (error_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::rpc::Status>(GetArenaNoVirtual());
    error_ = p;
  }
  return error_;
}
inline ::google::rpc::Status* MediaTranslationResponse::mutable_error() {
  // @@protoc_insertion_point(field_mutable:sagittarius.translation.v1.MediaTranslationResponse.error)
  return _internal_mutable_error();
}
inline void MediaTranslationResponse::set_allocated_error(::google::rpc::Status* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_);
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:sagittarius.translation.v1.MediaTranslationResponse.error)
}

// repeated .sagittarius.translation.v1.TranscriptInfo results = 2;
inline int MediaTranslationResponse::_internal_results_size() const {
  return results_.size();
}
inline int MediaTranslationResponse::results_size() const {
  return _internal_results_size();
}
inline void MediaTranslationResponse::clear_results() {
  results_.Clear();
}
inline ::sagittarius::translation::v1::TranscriptInfo* MediaTranslationResponse::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:sagittarius.translation.v1.MediaTranslationResponse.results)
  return results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sagittarius::translation::v1::TranscriptInfo >*
MediaTranslationResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:sagittarius.translation.v1.MediaTranslationResponse.results)
  return &results_;
}
inline const ::sagittarius::translation::v1::TranscriptInfo& MediaTranslationResponse::_internal_results(int index) const {
  return results_.Get(index);
}
inline const ::sagittarius::translation::v1::TranscriptInfo& MediaTranslationResponse::results(int index) const {
  // @@protoc_insertion_point(field_get:sagittarius.translation.v1.MediaTranslationResponse.results)
  return _internal_results(index);
}
inline ::sagittarius::translation::v1::TranscriptInfo* MediaTranslationResponse::_internal_add_results() {
  return results_.Add();
}
inline ::sagittarius::translation::v1::TranscriptInfo* MediaTranslationResponse::add_results() {
  // @@protoc_insertion_point(field_add:sagittarius.translation.v1.MediaTranslationResponse.results)
  return _internal_add_results();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sagittarius::translation::v1::TranscriptInfo >&
MediaTranslationResponse::results() const {
  // @@protoc_insertion_point(field_list:sagittarius.translation.v1.MediaTranslationResponse.results)
  return results_;
}

// string stream_translation_task_id = 3;
inline void MediaTranslationResponse::clear_stream_translation_task_id() {
  stream_translation_task_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& MediaTranslationResponse::stream_translation_task_id() const {
  // @@protoc_insertion_point(field_get:sagittarius.translation.v1.MediaTranslationResponse.stream_translation_task_id)
  return _internal_stream_translation_task_id();
}
inline void MediaTranslationResponse::set_stream_translation_task_id(const std::string& value) {
  _internal_set_stream_translation_task_id(value);
  // @@protoc_insertion_point(field_set:sagittarius.translation.v1.MediaTranslationResponse.stream_translation_task_id)
}
inline std::string* MediaTranslationResponse::mutable_stream_translation_task_id() {
  // @@protoc_insertion_point(field_mutable:sagittarius.translation.v1.MediaTranslationResponse.stream_translation_task_id)
  return _internal_mutable_stream_translation_task_id();
}
inline const std::string& MediaTranslationResponse::_internal_stream_translation_task_id() const {
  return stream_translation_task_id_.Get();
}
inline void MediaTranslationResponse::_internal_set_stream_translation_task_id(const std::string& value) {
  
  stream_translation_task_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void MediaTranslationResponse::set_stream_translation_task_id(std::string&& value) {
  
  stream_translation_task_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:sagittarius.translation.v1.MediaTranslationResponse.stream_translation_task_id)
}
inline void MediaTranslationResponse::set_stream_translation_task_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  stream_translation_task_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:sagittarius.translation.v1.MediaTranslationResponse.stream_translation_task_id)
}
inline void MediaTranslationResponse::set_stream_translation_task_id(const char* value,
    size_t size) {
  
  stream_translation_task_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:sagittarius.translation.v1.MediaTranslationResponse.stream_translation_task_id)
}
inline std::string* MediaTranslationResponse::_internal_mutable_stream_translation_task_id() {
  
  return stream_translation_task_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* MediaTranslationResponse::release_stream_translation_task_id() {
  // @@protoc_insertion_point(field_release:sagittarius.translation.v1.MediaTranslationResponse.stream_translation_task_id)
  
  return stream_translation_task_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void MediaTranslationResponse::set_allocated_stream_translation_task_id(std::string* stream_translation_task_id) {
  if (stream_translation_task_id != nullptr) {
    
  } else {
    
  }
  stream_translation_task_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stream_translation_task_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:sagittarius.translation.v1.MediaTranslationResponse.stream_translation_task_id)
}
inline std::string* MediaTranslationResponse::unsafe_arena_release_stream_translation_task_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sagittarius.translation.v1.MediaTranslationResponse.stream_translation_task_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return stream_translation_task_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void MediaTranslationResponse::unsafe_arena_set_allocated_stream_translation_task_id(
    std::string* stream_translation_task_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (stream_translation_task_id != nullptr) {
    
  } else {
    
  }
  stream_translation_task_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      stream_translation_task_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sagittarius.translation.v1.MediaTranslationResponse.stream_translation_task_id)
}

// -------------------------------------------------------------------

// TranscriptInfo

// string transcript_identity = 1;
inline void TranscriptInfo::clear_transcript_identity() {
  transcript_identity_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& TranscriptInfo::transcript_identity() const {
  // @@protoc_insertion_point(field_get:sagittarius.translation.v1.TranscriptInfo.transcript_identity)
  return _internal_transcript_identity();
}
inline void TranscriptInfo::set_transcript_identity(const std::string& value) {
  _internal_set_transcript_identity(value);
  // @@protoc_insertion_point(field_set:sagittarius.translation.v1.TranscriptInfo.transcript_identity)
}
inline std::string* TranscriptInfo::mutable_transcript_identity() {
  // @@protoc_insertion_point(field_mutable:sagittarius.translation.v1.TranscriptInfo.transcript_identity)
  return _internal_mutable_transcript_identity();
}
inline const std::string& TranscriptInfo::_internal_transcript_identity() const {
  return transcript_identity_.Get();
}
inline void TranscriptInfo::_internal_set_transcript_identity(const std::string& value) {
  
  transcript_identity_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void TranscriptInfo::set_transcript_identity(std::string&& value) {
  
  transcript_identity_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:sagittarius.translation.v1.TranscriptInfo.transcript_identity)
}
inline void TranscriptInfo::set_transcript_identity(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  transcript_identity_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:sagittarius.translation.v1.TranscriptInfo.transcript_identity)
}
inline void TranscriptInfo::set_transcript_identity(const char* value,
    size_t size) {
  
  transcript_identity_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:sagittarius.translation.v1.TranscriptInfo.transcript_identity)
}
inline std::string* TranscriptInfo::_internal_mutable_transcript_identity() {
  
  return transcript_identity_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* TranscriptInfo::release_transcript_identity() {
  // @@protoc_insertion_point(field_release:sagittarius.translation.v1.TranscriptInfo.transcript_identity)
  
  return transcript_identity_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void TranscriptInfo::set_allocated_transcript_identity(std::string* transcript_identity) {
  if (transcript_identity != nullptr) {
    
  } else {
    
  }
  transcript_identity_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transcript_identity,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:sagittarius.translation.v1.TranscriptInfo.transcript_identity)
}
inline std::string* TranscriptInfo::unsafe_arena_release_transcript_identity() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sagittarius.translation.v1.TranscriptInfo.transcript_identity)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return transcript_identity_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void TranscriptInfo::unsafe_arena_set_allocated_transcript_identity(
    std::string* transcript_identity) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (transcript_identity != nullptr) {
    
  } else {
    
  }
  transcript_identity_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      transcript_identity, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sagittarius.translation.v1.TranscriptInfo.transcript_identity)
}

// string language_code = 2;
inline void TranscriptInfo::clear_language_code() {
  language_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& TranscriptInfo::language_code() const {
  // @@protoc_insertion_point(field_get:sagittarius.translation.v1.TranscriptInfo.language_code)
  return _internal_language_code();
}
inline void TranscriptInfo::set_language_code(const std::string& value) {
  _internal_set_language_code(value);
  // @@protoc_insertion_point(field_set:sagittarius.translation.v1.TranscriptInfo.language_code)
}
inline std::string* TranscriptInfo::mutable_language_code() {
  // @@protoc_insertion_point(field_mutable:sagittarius.translation.v1.TranscriptInfo.language_code)
  return _internal_mutable_language_code();
}
inline const std::string& TranscriptInfo::_internal_language_code() const {
  return language_code_.Get();
}
inline void TranscriptInfo::_internal_set_language_code(const std::string& value) {
  
  language_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void TranscriptInfo::set_language_code(std::string&& value) {
  
  language_code_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:sagittarius.translation.v1.TranscriptInfo.language_code)
}
inline void TranscriptInfo::set_language_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  language_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:sagittarius.translation.v1.TranscriptInfo.language_code)
}
inline void TranscriptInfo::set_language_code(const char* value,
    size_t size) {
  
  language_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:sagittarius.translation.v1.TranscriptInfo.language_code)
}
inline std::string* TranscriptInfo::_internal_mutable_language_code() {
  
  return language_code_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* TranscriptInfo::release_language_code() {
  // @@protoc_insertion_point(field_release:sagittarius.translation.v1.TranscriptInfo.language_code)
  
  return language_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void TranscriptInfo::set_allocated_language_code(std::string* language_code) {
  if (language_code != nullptr) {
    
  } else {
    
  }
  language_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language_code,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:sagittarius.translation.v1.TranscriptInfo.language_code)
}
inline std::string* TranscriptInfo::unsafe_arena_release_language_code() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sagittarius.translation.v1.TranscriptInfo.language_code)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return language_code_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void TranscriptInfo::unsafe_arena_set_allocated_language_code(
    std::string* language_code) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (language_code != nullptr) {
    
  } else {
    
  }
  language_code_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      language_code, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sagittarius.translation.v1.TranscriptInfo.language_code)
}

// float ranking = 3;
inline void TranscriptInfo::clear_ranking() {
  ranking_ = 0;
}
inline float TranscriptInfo::_internal_ranking() const {
  return ranking_;
}
inline float TranscriptInfo::ranking() const {
  // @@protoc_insertion_point(field_get:sagittarius.translation.v1.TranscriptInfo.ranking)
  return _internal_ranking();
}
inline void TranscriptInfo::_internal_set_ranking(float value) {
  
  ranking_ = value;
}
inline void TranscriptInfo::set_ranking(float value) {
  _internal_set_ranking(value);
  // @@protoc_insertion_point(field_set:sagittarius.translation.v1.TranscriptInfo.ranking)
}

// repeated string tags = 4;
inline int TranscriptInfo::_internal_tags_size() const {
  return tags_.size();
}
inline int TranscriptInfo::tags_size() const {
  return _internal_tags_size();
}
inline void TranscriptInfo::clear_tags() {
  tags_.Clear();
}
inline std::string* TranscriptInfo::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:sagittarius.translation.v1.TranscriptInfo.tags)
  return _internal_add_tags();
}
inline const std::string& TranscriptInfo::_internal_tags(int index) const {
  return tags_.Get(index);
}
inline const std::string& TranscriptInfo::tags(int index) const {
  // @@protoc_insertion_point(field_get:sagittarius.translation.v1.TranscriptInfo.tags)
  return _internal_tags(index);
}
inline std::string* TranscriptInfo::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:sagittarius.translation.v1.TranscriptInfo.tags)
  return tags_.Mutable(index);
}
inline void TranscriptInfo::set_tags(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:sagittarius.translation.v1.TranscriptInfo.tags)
  tags_.Mutable(index)->assign(value);
}
inline void TranscriptInfo::set_tags(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:sagittarius.translation.v1.TranscriptInfo.tags)
  tags_.Mutable(index)->assign(std::move(value));
}
inline void TranscriptInfo::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sagittarius.translation.v1.TranscriptInfo.tags)
}
inline void TranscriptInfo::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sagittarius.translation.v1.TranscriptInfo.tags)
}
inline std::string* TranscriptInfo::_internal_add_tags() {
  return tags_.Add();
}
inline void TranscriptInfo::add_tags(const std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sagittarius.translation.v1.TranscriptInfo.tags)
}
inline void TranscriptInfo::add_tags(std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sagittarius.translation.v1.TranscriptInfo.tags)
}
inline void TranscriptInfo::add_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sagittarius.translation.v1.TranscriptInfo.tags)
}
inline void TranscriptInfo::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sagittarius.translation.v1.TranscriptInfo.tags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TranscriptInfo::tags() const {
  // @@protoc_insertion_point(field_list:sagittarius.translation.v1.TranscriptInfo.tags)
  return tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TranscriptInfo::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:sagittarius.translation.v1.TranscriptInfo.tags)
  return &tags_;
}

// int64 delay = 5;
inline void TranscriptInfo::clear_delay() {
  delay_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TranscriptInfo::_internal_delay() const {
  return delay_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TranscriptInfo::delay() const {
  // @@protoc_insertion_point(field_get:sagittarius.translation.v1.TranscriptInfo.delay)
  return _internal_delay();
}
inline void TranscriptInfo::_internal_set_delay(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  delay_ = value;
}
inline void TranscriptInfo::set_delay(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_delay(value);
  // @@protoc_insertion_point(field_set:sagittarius.translation.v1.TranscriptInfo.delay)
}

// float confidence = 6;
inline void TranscriptInfo::clear_confidence() {
  confidence_ = 0;
}
inline float TranscriptInfo::_internal_confidence() const {
  return confidence_;
}
inline float TranscriptInfo::confidence() const {
  // @@protoc_insertion_point(field_get:sagittarius.translation.v1.TranscriptInfo.confidence)
  return _internal_confidence();
}
inline void TranscriptInfo::_internal_set_confidence(float value) {
  
  confidence_ = value;
}
inline void TranscriptInfo::set_confidence(float value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:sagittarius.translation.v1.TranscriptInfo.confidence)
}

// -------------------------------------------------------------------

// DetectionRequest

// string text = 1;
inline void DetectionRequest::clear_text() {
  text_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& DetectionRequest::text() const {
  // @@protoc_insertion_point(field_get:sagittarius.translation.v1.DetectionRequest.text)
  return _internal_text();
}
inline void DetectionRequest::set_text(const std::string& value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:sagittarius.translation.v1.DetectionRequest.text)
}
inline std::string* DetectionRequest::mutable_text() {
  // @@protoc_insertion_point(field_mutable:sagittarius.translation.v1.DetectionRequest.text)
  return _internal_mutable_text();
}
inline const std::string& DetectionRequest::_internal_text() const {
  return text_.Get();
}
inline void DetectionRequest::_internal_set_text(const std::string& value) {
  
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void DetectionRequest::set_text(std::string&& value) {
  
  text_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:sagittarius.translation.v1.DetectionRequest.text)
}
inline void DetectionRequest::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:sagittarius.translation.v1.DetectionRequest.text)
}
inline void DetectionRequest::set_text(const char* value,
    size_t size) {
  
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:sagittarius.translation.v1.DetectionRequest.text)
}
inline std::string* DetectionRequest::_internal_mutable_text() {
  
  return text_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* DetectionRequest::release_text() {
  // @@protoc_insertion_point(field_release:sagittarius.translation.v1.DetectionRequest.text)
  
  return text_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void DetectionRequest::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:sagittarius.translation.v1.DetectionRequest.text)
}
inline std::string* DetectionRequest::unsafe_arena_release_text() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sagittarius.translation.v1.DetectionRequest.text)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return text_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void DetectionRequest::unsafe_arena_set_allocated_text(
    std::string* text) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (text != nullptr) {
    
  } else {
    
  }
  text_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      text, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sagittarius.translation.v1.DetectionRequest.text)
}

// -------------------------------------------------------------------

// DetectionResponse

// repeated .sagittarius.translation.v1.DetectionPrediction prediction = 1;
inline int DetectionResponse::_internal_prediction_size() const {
  return prediction_.size();
}
inline int DetectionResponse::prediction_size() const {
  return _internal_prediction_size();
}
inline void DetectionResponse::clear_prediction() {
  prediction_.Clear();
}
inline ::sagittarius::translation::v1::DetectionPrediction* DetectionResponse::mutable_prediction(int index) {
  // @@protoc_insertion_point(field_mutable:sagittarius.translation.v1.DetectionResponse.prediction)
  return prediction_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sagittarius::translation::v1::DetectionPrediction >*
DetectionResponse::mutable_prediction() {
  // @@protoc_insertion_point(field_mutable_list:sagittarius.translation.v1.DetectionResponse.prediction)
  return &prediction_;
}
inline const ::sagittarius::translation::v1::DetectionPrediction& DetectionResponse::_internal_prediction(int index) const {
  return prediction_.Get(index);
}
inline const ::sagittarius::translation::v1::DetectionPrediction& DetectionResponse::prediction(int index) const {
  // @@protoc_insertion_point(field_get:sagittarius.translation.v1.DetectionResponse.prediction)
  return _internal_prediction(index);
}
inline ::sagittarius::translation::v1::DetectionPrediction* DetectionResponse::_internal_add_prediction() {
  return prediction_.Add();
}
inline ::sagittarius::translation::v1::DetectionPrediction* DetectionResponse::add_prediction() {
  // @@protoc_insertion_point(field_add:sagittarius.translation.v1.DetectionResponse.prediction)
  return _internal_add_prediction();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sagittarius::translation::v1::DetectionPrediction >&
DetectionResponse::prediction() const {
  // @@protoc_insertion_point(field_list:sagittarius.translation.v1.DetectionResponse.prediction)
  return prediction_;
}

// -------------------------------------------------------------------

// DetectionPrediction

// string language_code = 1;
inline void DetectionPrediction::clear_language_code() {
  language_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& DetectionPrediction::language_code() const {
  // @@protoc_insertion_point(field_get:sagittarius.translation.v1.DetectionPrediction.language_code)
  return _internal_language_code();
}
inline void DetectionPrediction::set_language_code(const std::string& value) {
  _internal_set_language_code(value);
  // @@protoc_insertion_point(field_set:sagittarius.translation.v1.DetectionPrediction.language_code)
}
inline std::string* DetectionPrediction::mutable_language_code() {
  // @@protoc_insertion_point(field_mutable:sagittarius.translation.v1.DetectionPrediction.language_code)
  return _internal_mutable_language_code();
}
inline const std::string& DetectionPrediction::_internal_language_code() const {
  return language_code_.Get();
}
inline void DetectionPrediction::_internal_set_language_code(const std::string& value) {
  
  language_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void DetectionPrediction::set_language_code(std::string&& value) {
  
  language_code_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:sagittarius.translation.v1.DetectionPrediction.language_code)
}
inline void DetectionPrediction::set_language_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  language_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:sagittarius.translation.v1.DetectionPrediction.language_code)
}
inline void DetectionPrediction::set_language_code(const char* value,
    size_t size) {
  
  language_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:sagittarius.translation.v1.DetectionPrediction.language_code)
}
inline std::string* DetectionPrediction::_internal_mutable_language_code() {
  
  return language_code_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* DetectionPrediction::release_language_code() {
  // @@protoc_insertion_point(field_release:sagittarius.translation.v1.DetectionPrediction.language_code)
  
  return language_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void DetectionPrediction::set_allocated_language_code(std::string* language_code) {
  if (language_code != nullptr) {
    
  } else {
    
  }
  language_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language_code,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:sagittarius.translation.v1.DetectionPrediction.language_code)
}
inline std::string* DetectionPrediction::unsafe_arena_release_language_code() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sagittarius.translation.v1.DetectionPrediction.language_code)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return language_code_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void DetectionPrediction::unsafe_arena_set_allocated_language_code(
    std::string* language_code) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (language_code != nullptr) {
    
  } else {
    
  }
  language_code_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      language_code, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sagittarius.translation.v1.DetectionPrediction.language_code)
}

// float confidence = 2;
inline void DetectionPrediction::clear_confidence() {
  confidence_ = 0;
}
inline float DetectionPrediction::_internal_confidence() const {
  return confidence_;
}
inline float DetectionPrediction::confidence() const {
  // @@protoc_insertion_point(field_get:sagittarius.translation.v1.DetectionPrediction.confidence)
  return _internal_confidence();
}
inline void DetectionPrediction::_internal_set_confidence(float value) {
  
  confidence_ = value;
}
inline void DetectionPrediction::set_confidence(float value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:sagittarius.translation.v1.DetectionPrediction.confidence)
}

// -------------------------------------------------------------------

// TranscriptRequest

// string transcript_identity = 4;
inline void TranscriptRequest::clear_transcript_identity() {
  transcript_identity_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& TranscriptRequest::transcript_identity() const {
  // @@protoc_insertion_point(field_get:sagittarius.translation.v1.TranscriptRequest.transcript_identity)
  return _internal_transcript_identity();
}
inline void TranscriptRequest::set_transcript_identity(const std::string& value) {
  _internal_set_transcript_identity(value);
  // @@protoc_insertion_point(field_set:sagittarius.translation.v1.TranscriptRequest.transcript_identity)
}
inline std::string* TranscriptRequest::mutable_transcript_identity() {
  // @@protoc_insertion_point(field_mutable:sagittarius.translation.v1.TranscriptRequest.transcript_identity)
  return _internal_mutable_transcript_identity();
}
inline const std::string& TranscriptRequest::_internal_transcript_identity() const {
  return transcript_identity_.Get();
}
inline void TranscriptRequest::_internal_set_transcript_identity(const std::string& value) {
  
  transcript_identity_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void TranscriptRequest::set_transcript_identity(std::string&& value) {
  
  transcript_identity_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:sagittarius.translation.v1.TranscriptRequest.transcript_identity)
}
inline void TranscriptRequest::set_transcript_identity(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  transcript_identity_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:sagittarius.translation.v1.TranscriptRequest.transcript_identity)
}
inline void TranscriptRequest::set_transcript_identity(const char* value,
    size_t size) {
  
  transcript_identity_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:sagittarius.translation.v1.TranscriptRequest.transcript_identity)
}
inline std::string* TranscriptRequest::_internal_mutable_transcript_identity() {
  
  return transcript_identity_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* TranscriptRequest::release_transcript_identity() {
  // @@protoc_insertion_point(field_release:sagittarius.translation.v1.TranscriptRequest.transcript_identity)
  
  return transcript_identity_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void TranscriptRequest::set_allocated_transcript_identity(std::string* transcript_identity) {
  if (transcript_identity != nullptr) {
    
  } else {
    
  }
  transcript_identity_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transcript_identity,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:sagittarius.translation.v1.TranscriptRequest.transcript_identity)
}
inline std::string* TranscriptRequest::unsafe_arena_release_transcript_identity() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sagittarius.translation.v1.TranscriptRequest.transcript_identity)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return transcript_identity_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void TranscriptRequest::unsafe_arena_set_allocated_transcript_identity(
    std::string* transcript_identity) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (transcript_identity != nullptr) {
    
  } else {
    
  }
  transcript_identity_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      transcript_identity, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sagittarius.translation.v1.TranscriptRequest.transcript_identity)
}

// double start_time = 6;
inline void TranscriptRequest::clear_start_time() {
  start_time_ = 0;
}
inline double TranscriptRequest::_internal_start_time() const {
  return start_time_;
}
inline double TranscriptRequest::start_time() const {
  // @@protoc_insertion_point(field_get:sagittarius.translation.v1.TranscriptRequest.start_time)
  return _internal_start_time();
}
inline void TranscriptRequest::_internal_set_start_time(double value) {
  
  start_time_ = value;
}
inline void TranscriptRequest::set_start_time(double value) {
  _internal_set_start_time(value);
  // @@protoc_insertion_point(field_set:sagittarius.translation.v1.TranscriptRequest.start_time)
}

// -------------------------------------------------------------------

// TranscriptResponse_Cue

// double start_time = 1;
inline void TranscriptResponse_Cue::clear_start_time() {
  start_time_ = 0;
}
inline double TranscriptResponse_Cue::_internal_start_time() const {
  return start_time_;
}
inline double TranscriptResponse_Cue::start_time() const {
  // @@protoc_insertion_point(field_get:sagittarius.translation.v1.TranscriptResponse.Cue.start_time)
  return _internal_start_time();
}
inline void TranscriptResponse_Cue::_internal_set_start_time(double value) {
  
  start_time_ = value;
}
inline void TranscriptResponse_Cue::set_start_time(double value) {
  _internal_set_start_time(value);
  // @@protoc_insertion_point(field_set:sagittarius.translation.v1.TranscriptResponse.Cue.start_time)
}

// double end_time = 2;
inline void TranscriptResponse_Cue::clear_end_time() {
  end_time_ = 0;
}
inline double TranscriptResponse_Cue::_internal_end_time() const {
  return end_time_;
}
inline double TranscriptResponse_Cue::end_time() const {
  // @@protoc_insertion_point(field_get:sagittarius.translation.v1.TranscriptResponse.Cue.end_time)
  return _internal_end_time();
}
inline void TranscriptResponse_Cue::_internal_set_end_time(double value) {
  
  end_time_ = value;
}
inline void TranscriptResponse_Cue::set_end_time(double value) {
  _internal_set_end_time(value);
  // @@protoc_insertion_point(field_set:sagittarius.translation.v1.TranscriptResponse.Cue.end_time)
}

// string text = 3;
inline void TranscriptResponse_Cue::clear_text() {
  text_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& TranscriptResponse_Cue::text() const {
  // @@protoc_insertion_point(field_get:sagittarius.translation.v1.TranscriptResponse.Cue.text)
  return _internal_text();
}
inline void TranscriptResponse_Cue::set_text(const std::string& value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:sagittarius.translation.v1.TranscriptResponse.Cue.text)
}
inline std::string* TranscriptResponse_Cue::mutable_text() {
  // @@protoc_insertion_point(field_mutable:sagittarius.translation.v1.TranscriptResponse.Cue.text)
  return _internal_mutable_text();
}
inline const std::string& TranscriptResponse_Cue::_internal_text() const {
  return text_.Get();
}
inline void TranscriptResponse_Cue::_internal_set_text(const std::string& value) {
  
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void TranscriptResponse_Cue::set_text(std::string&& value) {
  
  text_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:sagittarius.translation.v1.TranscriptResponse.Cue.text)
}
inline void TranscriptResponse_Cue::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:sagittarius.translation.v1.TranscriptResponse.Cue.text)
}
inline void TranscriptResponse_Cue::set_text(const char* value,
    size_t size) {
  
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:sagittarius.translation.v1.TranscriptResponse.Cue.text)
}
inline std::string* TranscriptResponse_Cue::_internal_mutable_text() {
  
  return text_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* TranscriptResponse_Cue::release_text() {
  // @@protoc_insertion_point(field_release:sagittarius.translation.v1.TranscriptResponse.Cue.text)
  
  return text_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void TranscriptResponse_Cue::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:sagittarius.translation.v1.TranscriptResponse.Cue.text)
}
inline std::string* TranscriptResponse_Cue::unsafe_arena_release_text() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sagittarius.translation.v1.TranscriptResponse.Cue.text)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return text_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void TranscriptResponse_Cue::unsafe_arena_set_allocated_text(
    std::string* text) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (text != nullptr) {
    
  } else {
    
  }
  text_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      text, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sagittarius.translation.v1.TranscriptResponse.Cue.text)
}

// -------------------------------------------------------------------

// TranscriptResponse

// .google.rpc.Status error = 1;
inline bool TranscriptResponse::_internal_has_error() const {
  return this != internal_default_instance() && error_ != nullptr;
}
inline bool TranscriptResponse::has_error() const {
  return _internal_has_error();
}
inline const ::google::rpc::Status& TranscriptResponse::_internal_error() const {
  const ::google::rpc::Status* p = error_;
  return p != nullptr ? *p : *reinterpret_cast<const ::google::rpc::Status*>(
      &::google::rpc::_Status_default_instance_);
}
inline const ::google::rpc::Status& TranscriptResponse::error() const {
  // @@protoc_insertion_point(field_get:sagittarius.translation.v1.TranscriptResponse.error)
  return _internal_error();
}
inline ::google::rpc::Status* TranscriptResponse::release_error() {
  auto temp = unsafe_arena_release_error();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::rpc::Status* TranscriptResponse::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:sagittarius.translation.v1.TranscriptResponse.error)
  
  ::google::rpc::Status* temp = error_;
  error_ = nullptr;
  return temp;
}
inline ::google::rpc::Status* TranscriptResponse::_internal_mutable_error() {
  
  if (error_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::rpc::Status>(GetArenaNoVirtual());
    error_ = p;
  }
  return error_;
}
inline ::google::rpc::Status* TranscriptResponse::mutable_error() {
  // @@protoc_insertion_point(field_mutable:sagittarius.translation.v1.TranscriptResponse.error)
  return _internal_mutable_error();
}
inline void TranscriptResponse::set_allocated_error(::google::rpc::Status* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_);
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:sagittarius.translation.v1.TranscriptResponse.error)
}

// repeated .sagittarius.translation.v1.TranscriptResponse.Cue transcripts = 2;
inline int TranscriptResponse::_internal_transcripts_size() const {
  return transcripts_.size();
}
inline int TranscriptResponse::transcripts_size() const {
  return _internal_transcripts_size();
}
inline void TranscriptResponse::clear_transcripts() {
  transcripts_.Clear();
}
inline ::sagittarius::translation::v1::TranscriptResponse_Cue* TranscriptResponse::mutable_transcripts(int index) {
  // @@protoc_insertion_point(field_mutable:sagittarius.translation.v1.TranscriptResponse.transcripts)
  return transcripts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sagittarius::translation::v1::TranscriptResponse_Cue >*
TranscriptResponse::mutable_transcripts() {
  // @@protoc_insertion_point(field_mutable_list:sagittarius.translation.v1.TranscriptResponse.transcripts)
  return &transcripts_;
}
inline const ::sagittarius::translation::v1::TranscriptResponse_Cue& TranscriptResponse::_internal_transcripts(int index) const {
  return transcripts_.Get(index);
}
inline const ::sagittarius::translation::v1::TranscriptResponse_Cue& TranscriptResponse::transcripts(int index) const {
  // @@protoc_insertion_point(field_get:sagittarius.translation.v1.TranscriptResponse.transcripts)
  return _internal_transcripts(index);
}
inline ::sagittarius::translation::v1::TranscriptResponse_Cue* TranscriptResponse::_internal_add_transcripts() {
  return transcripts_.Add();
}
inline ::sagittarius::translation::v1::TranscriptResponse_Cue* TranscriptResponse::add_transcripts() {
  // @@protoc_insertion_point(field_add:sagittarius.translation.v1.TranscriptResponse.transcripts)
  return _internal_add_transcripts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sagittarius::translation::v1::TranscriptResponse_Cue >&
TranscriptResponse::transcripts() const {
  // @@protoc_insertion_point(field_list:sagittarius.translation.v1.TranscriptResponse.transcripts)
  return transcripts_;
}

// bool is_end_of_transcript = 3;
inline void TranscriptResponse::clear_is_end_of_transcript() {
  is_end_of_transcript_ = false;
}
inline bool TranscriptResponse::_internal_is_end_of_transcript() const {
  return is_end_of_transcript_;
}
inline bool TranscriptResponse::is_end_of_transcript() const {
  // @@protoc_insertion_point(field_get:sagittarius.translation.v1.TranscriptResponse.is_end_of_transcript)
  return _internal_is_end_of_transcript();
}
inline void TranscriptResponse::_internal_set_is_end_of_transcript(bool value) {
  
  is_end_of_transcript_ = value;
}
inline void TranscriptResponse::set_is_end_of_transcript(bool value) {
  _internal_set_is_end_of_transcript(value);
  // @@protoc_insertion_point(field_set:sagittarius.translation.v1.TranscriptResponse.is_end_of_transcript)
}

// -------------------------------------------------------------------

// StreamingTranslationRequest

// .sagittarius.translation.v1.StreamingTranslationRequestConfig streaming_config = 1;
inline bool StreamingTranslationRequest::_internal_has_streaming_config() const {
  return streaming_request_case() == kStreamingConfig;
}
inline bool StreamingTranslationRequest::has_streaming_config() const {
  return _internal_has_streaming_config();
}
inline void StreamingTranslationRequest::set_has_streaming_config() {
  _oneof_case_[0] = kStreamingConfig;
}
inline void StreamingTranslationRequest::clear_streaming_config() {
  if (_internal_has_streaming_config()) {
    if (GetArenaNoVirtual() == nullptr) {
      delete streaming_request_.streaming_config_;
    }
    clear_has_streaming_request();
  }
}
inline ::sagittarius::translation::v1::StreamingTranslationRequestConfig* StreamingTranslationRequest::release_streaming_config() {
  // @@protoc_insertion_point(field_release:sagittarius.translation.v1.StreamingTranslationRequest.streaming_config)
  if (_internal_has_streaming_config()) {
    clear_has_streaming_request();
      ::sagittarius::translation::v1::StreamingTranslationRequestConfig* temp = streaming_request_.streaming_config_;
    if (GetArenaNoVirtual() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    streaming_request_.streaming_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sagittarius::translation::v1::StreamingTranslationRequestConfig& StreamingTranslationRequest::_internal_streaming_config() const {
  return _internal_has_streaming_config()
      ? *streaming_request_.streaming_config_
      : *reinterpret_cast< ::sagittarius::translation::v1::StreamingTranslationRequestConfig*>(&::sagittarius::translation::v1::_StreamingTranslationRequestConfig_default_instance_);
}
inline const ::sagittarius::translation::v1::StreamingTranslationRequestConfig& StreamingTranslationRequest::streaming_config() const {
  // @@protoc_insertion_point(field_get:sagittarius.translation.v1.StreamingTranslationRequest.streaming_config)
  return _internal_streaming_config();
}
inline ::sagittarius::translation::v1::StreamingTranslationRequestConfig* StreamingTranslationRequest::unsafe_arena_release_streaming_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sagittarius.translation.v1.StreamingTranslationRequest.streaming_config)
  if (_internal_has_streaming_config()) {
    clear_has_streaming_request();
    ::sagittarius::translation::v1::StreamingTranslationRequestConfig* temp = streaming_request_.streaming_config_;
    streaming_request_.streaming_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StreamingTranslationRequest::unsafe_arena_set_allocated_streaming_config(::sagittarius::translation::v1::StreamingTranslationRequestConfig* streaming_config) {
  clear_streaming_request();
  if (streaming_config) {
    set_has_streaming_config();
    streaming_request_.streaming_config_ = streaming_config;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sagittarius.translation.v1.StreamingTranslationRequest.streaming_config)
}
inline ::sagittarius::translation::v1::StreamingTranslationRequestConfig* StreamingTranslationRequest::_internal_mutable_streaming_config() {
  if (!_internal_has_streaming_config()) {
    clear_streaming_request();
    set_has_streaming_config();
    streaming_request_.streaming_config_ = CreateMaybeMessage< ::sagittarius::translation::v1::StreamingTranslationRequestConfig >(
        GetArenaNoVirtual());
  }
  return streaming_request_.streaming_config_;
}
inline ::sagittarius::translation::v1::StreamingTranslationRequestConfig* StreamingTranslationRequest::mutable_streaming_config() {
  // @@protoc_insertion_point(field_mutable:sagittarius.translation.v1.StreamingTranslationRequest.streaming_config)
  return _internal_mutable_streaming_config();
}

// bytes audio_content = 2;
inline bool StreamingTranslationRequest::_internal_has_audio_content() const {
  return streaming_request_case() == kAudioContent;
}
inline void StreamingTranslationRequest::set_has_audio_content() {
  _oneof_case_[0] = kAudioContent;
}
inline void StreamingTranslationRequest::clear_audio_content() {
  if (_internal_has_audio_content()) {
    streaming_request_.audio_content_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
    clear_has_streaming_request();
  }
}
inline const std::string& StreamingTranslationRequest::audio_content() const {
  // @@protoc_insertion_point(field_get:sagittarius.translation.v1.StreamingTranslationRequest.audio_content)
  return _internal_audio_content();
}
inline void StreamingTranslationRequest::set_audio_content(const std::string& value) {
  _internal_set_audio_content(value);
  // @@protoc_insertion_point(field_set:sagittarius.translation.v1.StreamingTranslationRequest.audio_content)
}
inline std::string* StreamingTranslationRequest::mutable_audio_content() {
  // @@protoc_insertion_point(field_mutable:sagittarius.translation.v1.StreamingTranslationRequest.audio_content)
  return _internal_mutable_audio_content();
}
inline const std::string& StreamingTranslationRequest::_internal_audio_content() const {
  if (_internal_has_audio_content()) {
    return streaming_request_.audio_content_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void StreamingTranslationRequest::_internal_set_audio_content(const std::string& value) {
  if (!_internal_has_audio_content()) {
    clear_streaming_request();
    set_has_audio_content();
    streaming_request_.audio_content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  streaming_request_.audio_content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaNoVirtual());
}
inline void StreamingTranslationRequest::set_audio_content(std::string&& value) {
  // @@protoc_insertion_point(field_set:sagittarius.translation.v1.StreamingTranslationRequest.audio_content)
  if (!_internal_has_audio_content()) {
    clear_streaming_request();
    set_has_audio_content();
    streaming_request_.audio_content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  streaming_request_.audio_content_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:sagittarius.translation.v1.StreamingTranslationRequest.audio_content)
}
inline void StreamingTranslationRequest::set_audio_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_audio_content()) {
    clear_streaming_request();
    set_has_audio_content();
    streaming_request_.audio_content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  streaming_request_.audio_content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:sagittarius.translation.v1.StreamingTranslationRequest.audio_content)
}
inline void StreamingTranslationRequest::set_audio_content(const void* value,
                             size_t size) {
  if (!_internal_has_audio_content()) {
    clear_streaming_request();
    set_has_audio_content();
    streaming_request_.audio_content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  streaming_request_.audio_content_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:sagittarius.translation.v1.StreamingTranslationRequest.audio_content)
}
inline std::string* StreamingTranslationRequest::_internal_mutable_audio_content() {
  if (!_internal_has_audio_content()) {
    clear_streaming_request();
    set_has_audio_content();
    streaming_request_.audio_content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return streaming_request_.audio_content_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline std::string* StreamingTranslationRequest::release_audio_content() {
  // @@protoc_insertion_point(field_release:sagittarius.translation.v1.StreamingTranslationRequest.audio_content)
  if (_internal_has_audio_content()) {
    clear_has_streaming_request();
    return streaming_request_.audio_content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
  } else {
    return nullptr;
  }
}
inline void StreamingTranslationRequest::set_allocated_audio_content(std::string* audio_content) {
  if (has_streaming_request()) {
    clear_streaming_request();
  }
  if (audio_content != nullptr) {
    set_has_audio_content();
    streaming_request_.audio_content_.UnsafeSetDefault(audio_content);
  }
  // @@protoc_insertion_point(field_set_allocated:sagittarius.translation.v1.StreamingTranslationRequest.audio_content)
}
inline std::string* StreamingTranslationRequest::unsafe_arena_release_audio_content() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sagittarius.translation.v1.StreamingTranslationRequest.audio_content)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (_internal_has_audio_content()) {
    clear_has_streaming_request();
    return streaming_request_.audio_content_.UnsafeArenaRelease(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  } else {
    return nullptr;
  }
}
inline void StreamingTranslationRequest::unsafe_arena_set_allocated_audio_content(std::string* audio_content) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (!_internal_has_audio_content()) {
    streaming_request_.audio_content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  clear_streaming_request();
  if (audio_content) {
    set_has_audio_content();
    streaming_request_.audio_content_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), audio_content, GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sagittarius.translation.v1.StreamingTranslationRequest.audio_content)
}

inline bool StreamingTranslationRequest::has_streaming_request() const {
  return streaming_request_case() != STREAMING_REQUEST_NOT_SET;
}
inline void StreamingTranslationRequest::clear_has_streaming_request() {
  _oneof_case_[0] = STREAMING_REQUEST_NOT_SET;
}
inline StreamingTranslationRequest::StreamingRequestCase StreamingTranslationRequest::streaming_request_case() const {
  return StreamingTranslationRequest::StreamingRequestCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// StreamingTranslationRequestConfig

// .google.cloud.speech.v1.RecognitionConfig streaming_config = 1;
inline bool StreamingTranslationRequestConfig::_internal_has_streaming_config() const {
  return this != internal_default_instance() && streaming_config_ != nullptr;
}
inline bool StreamingTranslationRequestConfig::has_streaming_config() const {
  return _internal_has_streaming_config();
}
inline const ::google::cloud::speech::v1::RecognitionConfig& StreamingTranslationRequestConfig::_internal_streaming_config() const {
  const ::google::cloud::speech::v1::RecognitionConfig* p = streaming_config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::google::cloud::speech::v1::RecognitionConfig*>(
      &::google::cloud::speech::v1::_RecognitionConfig_default_instance_);
}
inline const ::google::cloud::speech::v1::RecognitionConfig& StreamingTranslationRequestConfig::streaming_config() const {
  // @@protoc_insertion_point(field_get:sagittarius.translation.v1.StreamingTranslationRequestConfig.streaming_config)
  return _internal_streaming_config();
}
inline ::google::cloud::speech::v1::RecognitionConfig* StreamingTranslationRequestConfig::release_streaming_config() {
  auto temp = unsafe_arena_release_streaming_config();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::cloud::speech::v1::RecognitionConfig* StreamingTranslationRequestConfig::unsafe_arena_release_streaming_config() {
  // @@protoc_insertion_point(field_release:sagittarius.translation.v1.StreamingTranslationRequestConfig.streaming_config)
  
  ::google::cloud::speech::v1::RecognitionConfig* temp = streaming_config_;
  streaming_config_ = nullptr;
  return temp;
}
inline ::google::cloud::speech::v1::RecognitionConfig* StreamingTranslationRequestConfig::_internal_mutable_streaming_config() {
  
  if (streaming_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::cloud::speech::v1::RecognitionConfig>(GetArenaNoVirtual());
    streaming_config_ = p;
  }
  return streaming_config_;
}
inline ::google::cloud::speech::v1::RecognitionConfig* StreamingTranslationRequestConfig::mutable_streaming_config() {
  // @@protoc_insertion_point(field_mutable:sagittarius.translation.v1.StreamingTranslationRequestConfig.streaming_config)
  return _internal_mutable_streaming_config();
}
inline void StreamingTranslationRequestConfig::set_allocated_streaming_config(::google::cloud::speech::v1::RecognitionConfig* streaming_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(streaming_config_);
  }
  if (streaming_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(streaming_config)->GetArena();
    if (message_arena != submessage_arena) {
      streaming_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, streaming_config, submessage_arena);
    }
    
  } else {
    
  }
  streaming_config_ = streaming_config;
  // @@protoc_insertion_point(field_set_allocated:sagittarius.translation.v1.StreamingTranslationRequestConfig.streaming_config)
}

// string media_identity = 2;
inline void StreamingTranslationRequestConfig::clear_media_identity() {
  media_identity_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& StreamingTranslationRequestConfig::media_identity() const {
  // @@protoc_insertion_point(field_get:sagittarius.translation.v1.StreamingTranslationRequestConfig.media_identity)
  return _internal_media_identity();
}
inline void StreamingTranslationRequestConfig::set_media_identity(const std::string& value) {
  _internal_set_media_identity(value);
  // @@protoc_insertion_point(field_set:sagittarius.translation.v1.StreamingTranslationRequestConfig.media_identity)
}
inline std::string* StreamingTranslationRequestConfig::mutable_media_identity() {
  // @@protoc_insertion_point(field_mutable:sagittarius.translation.v1.StreamingTranslationRequestConfig.media_identity)
  return _internal_mutable_media_identity();
}
inline const std::string& StreamingTranslationRequestConfig::_internal_media_identity() const {
  return media_identity_.Get();
}
inline void StreamingTranslationRequestConfig::_internal_set_media_identity(const std::string& value) {
  
  media_identity_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void StreamingTranslationRequestConfig::set_media_identity(std::string&& value) {
  
  media_identity_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:sagittarius.translation.v1.StreamingTranslationRequestConfig.media_identity)
}
inline void StreamingTranslationRequestConfig::set_media_identity(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  media_identity_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:sagittarius.translation.v1.StreamingTranslationRequestConfig.media_identity)
}
inline void StreamingTranslationRequestConfig::set_media_identity(const char* value,
    size_t size) {
  
  media_identity_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:sagittarius.translation.v1.StreamingTranslationRequestConfig.media_identity)
}
inline std::string* StreamingTranslationRequestConfig::_internal_mutable_media_identity() {
  
  return media_identity_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* StreamingTranslationRequestConfig::release_media_identity() {
  // @@protoc_insertion_point(field_release:sagittarius.translation.v1.StreamingTranslationRequestConfig.media_identity)
  
  return media_identity_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void StreamingTranslationRequestConfig::set_allocated_media_identity(std::string* media_identity) {
  if (media_identity != nullptr) {
    
  } else {
    
  }
  media_identity_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), media_identity,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:sagittarius.translation.v1.StreamingTranslationRequestConfig.media_identity)
}
inline std::string* StreamingTranslationRequestConfig::unsafe_arena_release_media_identity() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sagittarius.translation.v1.StreamingTranslationRequestConfig.media_identity)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return media_identity_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void StreamingTranslationRequestConfig::unsafe_arena_set_allocated_media_identity(
    std::string* media_identity) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (media_identity != nullptr) {
    
  } else {
    
  }
  media_identity_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      media_identity, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sagittarius.translation.v1.StreamingTranslationRequestConfig.media_identity)
}

// string audio_language_code = 3;
inline void StreamingTranslationRequestConfig::clear_audio_language_code() {
  audio_language_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& StreamingTranslationRequestConfig::audio_language_code() const {
  // @@protoc_insertion_point(field_get:sagittarius.translation.v1.StreamingTranslationRequestConfig.audio_language_code)
  return _internal_audio_language_code();
}
inline void StreamingTranslationRequestConfig::set_audio_language_code(const std::string& value) {
  _internal_set_audio_language_code(value);
  // @@protoc_insertion_point(field_set:sagittarius.translation.v1.StreamingTranslationRequestConfig.audio_language_code)
}
inline std::string* StreamingTranslationRequestConfig::mutable_audio_language_code() {
  // @@protoc_insertion_point(field_mutable:sagittarius.translation.v1.StreamingTranslationRequestConfig.audio_language_code)
  return _internal_mutable_audio_language_code();
}
inline const std::string& StreamingTranslationRequestConfig::_internal_audio_language_code() const {
  return audio_language_code_.Get();
}
inline void StreamingTranslationRequestConfig::_internal_set_audio_language_code(const std::string& value) {
  
  audio_language_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void StreamingTranslationRequestConfig::set_audio_language_code(std::string&& value) {
  
  audio_language_code_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:sagittarius.translation.v1.StreamingTranslationRequestConfig.audio_language_code)
}
inline void StreamingTranslationRequestConfig::set_audio_language_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  audio_language_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:sagittarius.translation.v1.StreamingTranslationRequestConfig.audio_language_code)
}
inline void StreamingTranslationRequestConfig::set_audio_language_code(const char* value,
    size_t size) {
  
  audio_language_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:sagittarius.translation.v1.StreamingTranslationRequestConfig.audio_language_code)
}
inline std::string* StreamingTranslationRequestConfig::_internal_mutable_audio_language_code() {
  
  return audio_language_code_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* StreamingTranslationRequestConfig::release_audio_language_code() {
  // @@protoc_insertion_point(field_release:sagittarius.translation.v1.StreamingTranslationRequestConfig.audio_language_code)
  
  return audio_language_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void StreamingTranslationRequestConfig::set_allocated_audio_language_code(std::string* audio_language_code) {
  if (audio_language_code != nullptr) {
    
  } else {
    
  }
  audio_language_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), audio_language_code,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:sagittarius.translation.v1.StreamingTranslationRequestConfig.audio_language_code)
}
inline std::string* StreamingTranslationRequestConfig::unsafe_arena_release_audio_language_code() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sagittarius.translation.v1.StreamingTranslationRequestConfig.audio_language_code)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return audio_language_code_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void StreamingTranslationRequestConfig::unsafe_arena_set_allocated_audio_language_code(
    std::string* audio_language_code) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (audio_language_code != nullptr) {
    
  } else {
    
  }
  audio_language_code_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      audio_language_code, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sagittarius.translation.v1.StreamingTranslationRequestConfig.audio_language_code)
}

// string target_language_code = 4;
inline void StreamingTranslationRequestConfig::clear_target_language_code() {
  target_language_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& StreamingTranslationRequestConfig::target_language_code() const {
  // @@protoc_insertion_point(field_get:sagittarius.translation.v1.StreamingTranslationRequestConfig.target_language_code)
  return _internal_target_language_code();
}
inline void StreamingTranslationRequestConfig::set_target_language_code(const std::string& value) {
  _internal_set_target_language_code(value);
  // @@protoc_insertion_point(field_set:sagittarius.translation.v1.StreamingTranslationRequestConfig.target_language_code)
}
inline std::string* StreamingTranslationRequestConfig::mutable_target_language_code() {
  // @@protoc_insertion_point(field_mutable:sagittarius.translation.v1.StreamingTranslationRequestConfig.target_language_code)
  return _internal_mutable_target_language_code();
}
inline const std::string& StreamingTranslationRequestConfig::_internal_target_language_code() const {
  return target_language_code_.Get();
}
inline void StreamingTranslationRequestConfig::_internal_set_target_language_code(const std::string& value) {
  
  target_language_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void StreamingTranslationRequestConfig::set_target_language_code(std::string&& value) {
  
  target_language_code_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:sagittarius.translation.v1.StreamingTranslationRequestConfig.target_language_code)
}
inline void StreamingTranslationRequestConfig::set_target_language_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  target_language_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:sagittarius.translation.v1.StreamingTranslationRequestConfig.target_language_code)
}
inline void StreamingTranslationRequestConfig::set_target_language_code(const char* value,
    size_t size) {
  
  target_language_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:sagittarius.translation.v1.StreamingTranslationRequestConfig.target_language_code)
}
inline std::string* StreamingTranslationRequestConfig::_internal_mutable_target_language_code() {
  
  return target_language_code_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* StreamingTranslationRequestConfig::release_target_language_code() {
  // @@protoc_insertion_point(field_release:sagittarius.translation.v1.StreamingTranslationRequestConfig.target_language_code)
  
  return target_language_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void StreamingTranslationRequestConfig::set_allocated_target_language_code(std::string* target_language_code) {
  if (target_language_code != nullptr) {
    
  } else {
    
  }
  target_language_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target_language_code,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:sagittarius.translation.v1.StreamingTranslationRequestConfig.target_language_code)
}
inline std::string* StreamingTranslationRequestConfig::unsafe_arena_release_target_language_code() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sagittarius.translation.v1.StreamingTranslationRequestConfig.target_language_code)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return target_language_code_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void StreamingTranslationRequestConfig::unsafe_arena_set_allocated_target_language_code(
    std::string* target_language_code) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (target_language_code != nullptr) {
    
  } else {
    
  }
  target_language_code_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      target_language_code, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sagittarius.translation.v1.StreamingTranslationRequestConfig.target_language_code)
}

// string audio_track = 5;
inline void StreamingTranslationRequestConfig::clear_audio_track() {
  audio_track_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& StreamingTranslationRequestConfig::audio_track() const {
  // @@protoc_insertion_point(field_get:sagittarius.translation.v1.StreamingTranslationRequestConfig.audio_track)
  return _internal_audio_track();
}
inline void StreamingTranslationRequestConfig::set_audio_track(const std::string& value) {
  _internal_set_audio_track(value);
  // @@protoc_insertion_point(field_set:sagittarius.translation.v1.StreamingTranslationRequestConfig.audio_track)
}
inline std::string* StreamingTranslationRequestConfig::mutable_audio_track() {
  // @@protoc_insertion_point(field_mutable:sagittarius.translation.v1.StreamingTranslationRequestConfig.audio_track)
  return _internal_mutable_audio_track();
}
inline const std::string& StreamingTranslationRequestConfig::_internal_audio_track() const {
  return audio_track_.Get();
}
inline void StreamingTranslationRequestConfig::_internal_set_audio_track(const std::string& value) {
  
  audio_track_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void StreamingTranslationRequestConfig::set_audio_track(std::string&& value) {
  
  audio_track_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:sagittarius.translation.v1.StreamingTranslationRequestConfig.audio_track)
}
inline void StreamingTranslationRequestConfig::set_audio_track(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  audio_track_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:sagittarius.translation.v1.StreamingTranslationRequestConfig.audio_track)
}
inline void StreamingTranslationRequestConfig::set_audio_track(const char* value,
    size_t size) {
  
  audio_track_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:sagittarius.translation.v1.StreamingTranslationRequestConfig.audio_track)
}
inline std::string* StreamingTranslationRequestConfig::_internal_mutable_audio_track() {
  
  return audio_track_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* StreamingTranslationRequestConfig::release_audio_track() {
  // @@protoc_insertion_point(field_release:sagittarius.translation.v1.StreamingTranslationRequestConfig.audio_track)
  
  return audio_track_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void StreamingTranslationRequestConfig::set_allocated_audio_track(std::string* audio_track) {
  if (audio_track != nullptr) {
    
  } else {
    
  }
  audio_track_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), audio_track,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:sagittarius.translation.v1.StreamingTranslationRequestConfig.audio_track)
}
inline std::string* StreamingTranslationRequestConfig::unsafe_arena_release_audio_track() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sagittarius.translation.v1.StreamingTranslationRequestConfig.audio_track)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return audio_track_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void StreamingTranslationRequestConfig::unsafe_arena_set_allocated_audio_track(
    std::string* audio_track) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (audio_track != nullptr) {
    
  } else {
    
  }
  audio_track_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      audio_track, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sagittarius.translation.v1.StreamingTranslationRequestConfig.audio_track)
}

// string hints = 6;
inline void StreamingTranslationRequestConfig::clear_hints() {
  hints_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& StreamingTranslationRequestConfig::hints() const {
  // @@protoc_insertion_point(field_get:sagittarius.translation.v1.StreamingTranslationRequestConfig.hints)
  return _internal_hints();
}
inline void StreamingTranslationRequestConfig::set_hints(const std::string& value) {
  _internal_set_hints(value);
  // @@protoc_insertion_point(field_set:sagittarius.translation.v1.StreamingTranslationRequestConfig.hints)
}
inline std::string* StreamingTranslationRequestConfig::mutable_hints() {
  // @@protoc_insertion_point(field_mutable:sagittarius.translation.v1.StreamingTranslationRequestConfig.hints)
  return _internal_mutable_hints();
}
inline const std::string& StreamingTranslationRequestConfig::_internal_hints() const {
  return hints_.Get();
}
inline void StreamingTranslationRequestConfig::_internal_set_hints(const std::string& value) {
  
  hints_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void StreamingTranslationRequestConfig::set_hints(std::string&& value) {
  
  hints_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:sagittarius.translation.v1.StreamingTranslationRequestConfig.hints)
}
inline void StreamingTranslationRequestConfig::set_hints(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hints_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:sagittarius.translation.v1.StreamingTranslationRequestConfig.hints)
}
inline void StreamingTranslationRequestConfig::set_hints(const char* value,
    size_t size) {
  
  hints_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:sagittarius.translation.v1.StreamingTranslationRequestConfig.hints)
}
inline std::string* StreamingTranslationRequestConfig::_internal_mutable_hints() {
  
  return hints_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* StreamingTranslationRequestConfig::release_hints() {
  // @@protoc_insertion_point(field_release:sagittarius.translation.v1.StreamingTranslationRequestConfig.hints)
  
  return hints_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void StreamingTranslationRequestConfig::set_allocated_hints(std::string* hints) {
  if (hints != nullptr) {
    
  } else {
    
  }
  hints_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hints,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:sagittarius.translation.v1.StreamingTranslationRequestConfig.hints)
}
inline std::string* StreamingTranslationRequestConfig::unsafe_arena_release_hints() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sagittarius.translation.v1.StreamingTranslationRequestConfig.hints)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return hints_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void StreamingTranslationRequestConfig::unsafe_arena_set_allocated_hints(
    std::string* hints) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (hints != nullptr) {
    
  } else {
    
  }
  hints_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      hints, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sagittarius.translation.v1.StreamingTranslationRequestConfig.hints)
}

// -------------------------------------------------------------------

// StreamingTranslationResponse

// .google.rpc.Status error = 1;
inline bool StreamingTranslationResponse::_internal_has_error() const {
  return this != internal_default_instance() && error_ != nullptr;
}
inline bool StreamingTranslationResponse::has_error() const {
  return _internal_has_error();
}
inline const ::google::rpc::Status& StreamingTranslationResponse::_internal_error() const {
  const ::google::rpc::Status* p = error_;
  return p != nullptr ? *p : *reinterpret_cast<const ::google::rpc::Status*>(
      &::google::rpc::_Status_default_instance_);
}
inline const ::google::rpc::Status& StreamingTranslationResponse::error() const {
  // @@protoc_insertion_point(field_get:sagittarius.translation.v1.StreamingTranslationResponse.error)
  return _internal_error();
}
inline ::google::rpc::Status* StreamingTranslationResponse::release_error() {
  auto temp = unsafe_arena_release_error();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::rpc::Status* StreamingTranslationResponse::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:sagittarius.translation.v1.StreamingTranslationResponse.error)
  
  ::google::rpc::Status* temp = error_;
  error_ = nullptr;
  return temp;
}
inline ::google::rpc::Status* StreamingTranslationResponse::_internal_mutable_error() {
  
  if (error_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::rpc::Status>(GetArenaNoVirtual());
    error_ = p;
  }
  return error_;
}
inline ::google::rpc::Status* StreamingTranslationResponse::mutable_error() {
  // @@protoc_insertion_point(field_mutable:sagittarius.translation.v1.StreamingTranslationResponse.error)
  return _internal_mutable_error();
}
inline void StreamingTranslationResponse::set_allocated_error(::google::rpc::Status* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_);
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:sagittarius.translation.v1.StreamingTranslationResponse.error)
}

// .sagittarius.translation.v1.StreamingTranslationResult streaming_result = 2;
inline bool StreamingTranslationResponse::_internal_has_streaming_result() const {
  return streaming_response_case() == kStreamingResult;
}
inline bool StreamingTranslationResponse::has_streaming_result() const {
  return _internal_has_streaming_result();
}
inline void StreamingTranslationResponse::set_has_streaming_result() {
  _oneof_case_[0] = kStreamingResult;
}
inline void StreamingTranslationResponse::clear_streaming_result() {
  if (_internal_has_streaming_result()) {
    if (GetArenaNoVirtual() == nullptr) {
      delete streaming_response_.streaming_result_;
    }
    clear_has_streaming_response();
  }
}
inline ::sagittarius::translation::v1::StreamingTranslationResult* StreamingTranslationResponse::release_streaming_result() {
  // @@protoc_insertion_point(field_release:sagittarius.translation.v1.StreamingTranslationResponse.streaming_result)
  if (_internal_has_streaming_result()) {
    clear_has_streaming_response();
      ::sagittarius::translation::v1::StreamingTranslationResult* temp = streaming_response_.streaming_result_;
    if (GetArenaNoVirtual() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    streaming_response_.streaming_result_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sagittarius::translation::v1::StreamingTranslationResult& StreamingTranslationResponse::_internal_streaming_result() const {
  return _internal_has_streaming_result()
      ? *streaming_response_.streaming_result_
      : *reinterpret_cast< ::sagittarius::translation::v1::StreamingTranslationResult*>(&::sagittarius::translation::v1::_StreamingTranslationResult_default_instance_);
}
inline const ::sagittarius::translation::v1::StreamingTranslationResult& StreamingTranslationResponse::streaming_result() const {
  // @@protoc_insertion_point(field_get:sagittarius.translation.v1.StreamingTranslationResponse.streaming_result)
  return _internal_streaming_result();
}
inline ::sagittarius::translation::v1::StreamingTranslationResult* StreamingTranslationResponse::unsafe_arena_release_streaming_result() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sagittarius.translation.v1.StreamingTranslationResponse.streaming_result)
  if (_internal_has_streaming_result()) {
    clear_has_streaming_response();
    ::sagittarius::translation::v1::StreamingTranslationResult* temp = streaming_response_.streaming_result_;
    streaming_response_.streaming_result_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StreamingTranslationResponse::unsafe_arena_set_allocated_streaming_result(::sagittarius::translation::v1::StreamingTranslationResult* streaming_result) {
  clear_streaming_response();
  if (streaming_result) {
    set_has_streaming_result();
    streaming_response_.streaming_result_ = streaming_result;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sagittarius.translation.v1.StreamingTranslationResponse.streaming_result)
}
inline ::sagittarius::translation::v1::StreamingTranslationResult* StreamingTranslationResponse::_internal_mutable_streaming_result() {
  if (!_internal_has_streaming_result()) {
    clear_streaming_response();
    set_has_streaming_result();
    streaming_response_.streaming_result_ = CreateMaybeMessage< ::sagittarius::translation::v1::StreamingTranslationResult >(
        GetArenaNoVirtual());
  }
  return streaming_response_.streaming_result_;
}
inline ::sagittarius::translation::v1::StreamingTranslationResult* StreamingTranslationResponse::mutable_streaming_result() {
  // @@protoc_insertion_point(field_mutable:sagittarius.translation.v1.StreamingTranslationResponse.streaming_result)
  return _internal_mutable_streaming_result();
}

// .sagittarius.translation.v1.StreamingTranslationTaskInfo taskinfo = 3;
inline bool StreamingTranslationResponse::_internal_has_taskinfo() const {
  return streaming_response_case() == kTaskinfo;
}
inline bool StreamingTranslationResponse::has_taskinfo() const {
  return _internal_has_taskinfo();
}
inline void StreamingTranslationResponse::set_has_taskinfo() {
  _oneof_case_[0] = kTaskinfo;
}
inline void StreamingTranslationResponse::clear_taskinfo() {
  if (_internal_has_taskinfo()) {
    if (GetArenaNoVirtual() == nullptr) {
      delete streaming_response_.taskinfo_;
    }
    clear_has_streaming_response();
  }
}
inline ::sagittarius::translation::v1::StreamingTranslationTaskInfo* StreamingTranslationResponse::release_taskinfo() {
  // @@protoc_insertion_point(field_release:sagittarius.translation.v1.StreamingTranslationResponse.taskinfo)
  if (_internal_has_taskinfo()) {
    clear_has_streaming_response();
      ::sagittarius::translation::v1::StreamingTranslationTaskInfo* temp = streaming_response_.taskinfo_;
    if (GetArenaNoVirtual() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    streaming_response_.taskinfo_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sagittarius::translation::v1::StreamingTranslationTaskInfo& StreamingTranslationResponse::_internal_taskinfo() const {
  return _internal_has_taskinfo()
      ? *streaming_response_.taskinfo_
      : *reinterpret_cast< ::sagittarius::translation::v1::StreamingTranslationTaskInfo*>(&::sagittarius::translation::v1::_StreamingTranslationTaskInfo_default_instance_);
}
inline const ::sagittarius::translation::v1::StreamingTranslationTaskInfo& StreamingTranslationResponse::taskinfo() const {
  // @@protoc_insertion_point(field_get:sagittarius.translation.v1.StreamingTranslationResponse.taskinfo)
  return _internal_taskinfo();
}
inline ::sagittarius::translation::v1::StreamingTranslationTaskInfo* StreamingTranslationResponse::unsafe_arena_release_taskinfo() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sagittarius.translation.v1.StreamingTranslationResponse.taskinfo)
  if (_internal_has_taskinfo()) {
    clear_has_streaming_response();
    ::sagittarius::translation::v1::StreamingTranslationTaskInfo* temp = streaming_response_.taskinfo_;
    streaming_response_.taskinfo_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StreamingTranslationResponse::unsafe_arena_set_allocated_taskinfo(::sagittarius::translation::v1::StreamingTranslationTaskInfo* taskinfo) {
  clear_streaming_response();
  if (taskinfo) {
    set_has_taskinfo();
    streaming_response_.taskinfo_ = taskinfo;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sagittarius.translation.v1.StreamingTranslationResponse.taskinfo)
}
inline ::sagittarius::translation::v1::StreamingTranslationTaskInfo* StreamingTranslationResponse::_internal_mutable_taskinfo() {
  if (!_internal_has_taskinfo()) {
    clear_streaming_response();
    set_has_taskinfo();
    streaming_response_.taskinfo_ = CreateMaybeMessage< ::sagittarius::translation::v1::StreamingTranslationTaskInfo >(
        GetArenaNoVirtual());
  }
  return streaming_response_.taskinfo_;
}
inline ::sagittarius::translation::v1::StreamingTranslationTaskInfo* StreamingTranslationResponse::mutable_taskinfo() {
  // @@protoc_insertion_point(field_mutable:sagittarius.translation.v1.StreamingTranslationResponse.taskinfo)
  return _internal_mutable_taskinfo();
}

// .sagittarius.translation.v1.TranscriptInfo transcript_result = 4;
inline bool StreamingTranslationResponse::_internal_has_transcript_result() const {
  return streaming_response_case() == kTranscriptResult;
}
inline bool StreamingTranslationResponse::has_transcript_result() const {
  return _internal_has_transcript_result();
}
inline void StreamingTranslationResponse::set_has_transcript_result() {
  _oneof_case_[0] = kTranscriptResult;
}
inline void StreamingTranslationResponse::clear_transcript_result() {
  if (_internal_has_transcript_result()) {
    if (GetArenaNoVirtual() == nullptr) {
      delete streaming_response_.transcript_result_;
    }
    clear_has_streaming_response();
  }
}
inline ::sagittarius::translation::v1::TranscriptInfo* StreamingTranslationResponse::release_transcript_result() {
  // @@protoc_insertion_point(field_release:sagittarius.translation.v1.StreamingTranslationResponse.transcript_result)
  if (_internal_has_transcript_result()) {
    clear_has_streaming_response();
      ::sagittarius::translation::v1::TranscriptInfo* temp = streaming_response_.transcript_result_;
    if (GetArenaNoVirtual() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    streaming_response_.transcript_result_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sagittarius::translation::v1::TranscriptInfo& StreamingTranslationResponse::_internal_transcript_result() const {
  return _internal_has_transcript_result()
      ? *streaming_response_.transcript_result_
      : *reinterpret_cast< ::sagittarius::translation::v1::TranscriptInfo*>(&::sagittarius::translation::v1::_TranscriptInfo_default_instance_);
}
inline const ::sagittarius::translation::v1::TranscriptInfo& StreamingTranslationResponse::transcript_result() const {
  // @@protoc_insertion_point(field_get:sagittarius.translation.v1.StreamingTranslationResponse.transcript_result)
  return _internal_transcript_result();
}
inline ::sagittarius::translation::v1::TranscriptInfo* StreamingTranslationResponse::unsafe_arena_release_transcript_result() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sagittarius.translation.v1.StreamingTranslationResponse.transcript_result)
  if (_internal_has_transcript_result()) {
    clear_has_streaming_response();
    ::sagittarius::translation::v1::TranscriptInfo* temp = streaming_response_.transcript_result_;
    streaming_response_.transcript_result_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StreamingTranslationResponse::unsafe_arena_set_allocated_transcript_result(::sagittarius::translation::v1::TranscriptInfo* transcript_result) {
  clear_streaming_response();
  if (transcript_result) {
    set_has_transcript_result();
    streaming_response_.transcript_result_ = transcript_result;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sagittarius.translation.v1.StreamingTranslationResponse.transcript_result)
}
inline ::sagittarius::translation::v1::TranscriptInfo* StreamingTranslationResponse::_internal_mutable_transcript_result() {
  if (!_internal_has_transcript_result()) {
    clear_streaming_response();
    set_has_transcript_result();
    streaming_response_.transcript_result_ = CreateMaybeMessage< ::sagittarius::translation::v1::TranscriptInfo >(
        GetArenaNoVirtual());
  }
  return streaming_response_.transcript_result_;
}
inline ::sagittarius::translation::v1::TranscriptInfo* StreamingTranslationResponse::mutable_transcript_result() {
  // @@protoc_insertion_point(field_mutable:sagittarius.translation.v1.StreamingTranslationResponse.transcript_result)
  return _internal_mutable_transcript_result();
}

inline bool StreamingTranslationResponse::has_streaming_response() const {
  return streaming_response_case() != STREAMING_RESPONSE_NOT_SET;
}
inline void StreamingTranslationResponse::clear_has_streaming_response() {
  _oneof_case_[0] = STREAMING_RESPONSE_NOT_SET;
}
inline StreamingTranslationResponse::StreamingResponseCase StreamingTranslationResponse::streaming_response_case() const {
  return StreamingTranslationResponse::StreamingResponseCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// StreamingTranslationTaskRequest

// string task_id = 1;
inline void StreamingTranslationTaskRequest::clear_task_id() {
  task_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& StreamingTranslationTaskRequest::task_id() const {
  // @@protoc_insertion_point(field_get:sagittarius.translation.v1.StreamingTranslationTaskRequest.task_id)
  return _internal_task_id();
}
inline void StreamingTranslationTaskRequest::set_task_id(const std::string& value) {
  _internal_set_task_id(value);
  // @@protoc_insertion_point(field_set:sagittarius.translation.v1.StreamingTranslationTaskRequest.task_id)
}
inline std::string* StreamingTranslationTaskRequest::mutable_task_id() {
  // @@protoc_insertion_point(field_mutable:sagittarius.translation.v1.StreamingTranslationTaskRequest.task_id)
  return _internal_mutable_task_id();
}
inline const std::string& StreamingTranslationTaskRequest::_internal_task_id() const {
  return task_id_.Get();
}
inline void StreamingTranslationTaskRequest::_internal_set_task_id(const std::string& value) {
  
  task_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void StreamingTranslationTaskRequest::set_task_id(std::string&& value) {
  
  task_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:sagittarius.translation.v1.StreamingTranslationTaskRequest.task_id)
}
inline void StreamingTranslationTaskRequest::set_task_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  task_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:sagittarius.translation.v1.StreamingTranslationTaskRequest.task_id)
}
inline void StreamingTranslationTaskRequest::set_task_id(const char* value,
    size_t size) {
  
  task_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:sagittarius.translation.v1.StreamingTranslationTaskRequest.task_id)
}
inline std::string* StreamingTranslationTaskRequest::_internal_mutable_task_id() {
  
  return task_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* StreamingTranslationTaskRequest::release_task_id() {
  // @@protoc_insertion_point(field_release:sagittarius.translation.v1.StreamingTranslationTaskRequest.task_id)
  
  return task_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void StreamingTranslationTaskRequest::set_allocated_task_id(std::string* task_id) {
  if (task_id != nullptr) {
    
  } else {
    
  }
  task_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), task_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:sagittarius.translation.v1.StreamingTranslationTaskRequest.task_id)
}
inline std::string* StreamingTranslationTaskRequest::unsafe_arena_release_task_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sagittarius.translation.v1.StreamingTranslationTaskRequest.task_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return task_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void StreamingTranslationTaskRequest::unsafe_arena_set_allocated_task_id(
    std::string* task_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (task_id != nullptr) {
    
  } else {
    
  }
  task_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      task_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sagittarius.translation.v1.StreamingTranslationTaskRequest.task_id)
}

// -------------------------------------------------------------------

// StreamingTranslationTaskResponse

// .google.rpc.Status error = 1;
inline bool StreamingTranslationTaskResponse::_internal_has_error() const {
  return this != internal_default_instance() && error_ != nullptr;
}
inline bool StreamingTranslationTaskResponse::has_error() const {
  return _internal_has_error();
}
inline const ::google::rpc::Status& StreamingTranslationTaskResponse::_internal_error() const {
  const ::google::rpc::Status* p = error_;
  return p != nullptr ? *p : *reinterpret_cast<const ::google::rpc::Status*>(
      &::google::rpc::_Status_default_instance_);
}
inline const ::google::rpc::Status& StreamingTranslationTaskResponse::error() const {
  // @@protoc_insertion_point(field_get:sagittarius.translation.v1.StreamingTranslationTaskResponse.error)
  return _internal_error();
}
inline ::google::rpc::Status* StreamingTranslationTaskResponse::release_error() {
  auto temp = unsafe_arena_release_error();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::rpc::Status* StreamingTranslationTaskResponse::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:sagittarius.translation.v1.StreamingTranslationTaskResponse.error)
  
  ::google::rpc::Status* temp = error_;
  error_ = nullptr;
  return temp;
}
inline ::google::rpc::Status* StreamingTranslationTaskResponse::_internal_mutable_error() {
  
  if (error_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::rpc::Status>(GetArenaNoVirtual());
    error_ = p;
  }
  return error_;
}
inline ::google::rpc::Status* StreamingTranslationTaskResponse::mutable_error() {
  // @@protoc_insertion_point(field_mutable:sagittarius.translation.v1.StreamingTranslationTaskResponse.error)
  return _internal_mutable_error();
}
inline void StreamingTranslationTaskResponse::set_allocated_error(::google::rpc::Status* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_);
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:sagittarius.translation.v1.StreamingTranslationTaskResponse.error)
}

// .sagittarius.translation.v1.StreamingTranslationTaskInfo taskinfo = 2;
inline bool StreamingTranslationTaskResponse::_internal_has_taskinfo() const {
  return streaming_request_case() == kTaskinfo;
}
inline bool StreamingTranslationTaskResponse::has_taskinfo() const {
  return _internal_has_taskinfo();
}
inline void StreamingTranslationTaskResponse::set_has_taskinfo() {
  _oneof_case_[0] = kTaskinfo;
}
inline void StreamingTranslationTaskResponse::clear_taskinfo() {
  if (_internal_has_taskinfo()) {
    if (GetArenaNoVirtual() == nullptr) {
      delete streaming_request_.taskinfo_;
    }
    clear_has_streaming_request();
  }
}
inline ::sagittarius::translation::v1::StreamingTranslationTaskInfo* StreamingTranslationTaskResponse::release_taskinfo() {
  // @@protoc_insertion_point(field_release:sagittarius.translation.v1.StreamingTranslationTaskResponse.taskinfo)
  if (_internal_has_taskinfo()) {
    clear_has_streaming_request();
      ::sagittarius::translation::v1::StreamingTranslationTaskInfo* temp = streaming_request_.taskinfo_;
    if (GetArenaNoVirtual() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    streaming_request_.taskinfo_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sagittarius::translation::v1::StreamingTranslationTaskInfo& StreamingTranslationTaskResponse::_internal_taskinfo() const {
  return _internal_has_taskinfo()
      ? *streaming_request_.taskinfo_
      : *reinterpret_cast< ::sagittarius::translation::v1::StreamingTranslationTaskInfo*>(&::sagittarius::translation::v1::_StreamingTranslationTaskInfo_default_instance_);
}
inline const ::sagittarius::translation::v1::StreamingTranslationTaskInfo& StreamingTranslationTaskResponse::taskinfo() const {
  // @@protoc_insertion_point(field_get:sagittarius.translation.v1.StreamingTranslationTaskResponse.taskinfo)
  return _internal_taskinfo();
}
inline ::sagittarius::translation::v1::StreamingTranslationTaskInfo* StreamingTranslationTaskResponse::unsafe_arena_release_taskinfo() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sagittarius.translation.v1.StreamingTranslationTaskResponse.taskinfo)
  if (_internal_has_taskinfo()) {
    clear_has_streaming_request();
    ::sagittarius::translation::v1::StreamingTranslationTaskInfo* temp = streaming_request_.taskinfo_;
    streaming_request_.taskinfo_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StreamingTranslationTaskResponse::unsafe_arena_set_allocated_taskinfo(::sagittarius::translation::v1::StreamingTranslationTaskInfo* taskinfo) {
  clear_streaming_request();
  if (taskinfo) {
    set_has_taskinfo();
    streaming_request_.taskinfo_ = taskinfo;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sagittarius.translation.v1.StreamingTranslationTaskResponse.taskinfo)
}
inline ::sagittarius::translation::v1::StreamingTranslationTaskInfo* StreamingTranslationTaskResponse::_internal_mutable_taskinfo() {
  if (!_internal_has_taskinfo()) {
    clear_streaming_request();
    set_has_taskinfo();
    streaming_request_.taskinfo_ = CreateMaybeMessage< ::sagittarius::translation::v1::StreamingTranslationTaskInfo >(
        GetArenaNoVirtual());
  }
  return streaming_request_.taskinfo_;
}
inline ::sagittarius::translation::v1::StreamingTranslationTaskInfo* StreamingTranslationTaskResponse::mutable_taskinfo() {
  // @@protoc_insertion_point(field_mutable:sagittarius.translation.v1.StreamingTranslationTaskResponse.taskinfo)
  return _internal_mutable_taskinfo();
}

// .sagittarius.translation.v1.TranscriptInfo transcriptinfo = 3;
inline bool StreamingTranslationTaskResponse::_internal_has_transcriptinfo() const {
  return streaming_request_case() == kTranscriptinfo;
}
inline bool StreamingTranslationTaskResponse::has_transcriptinfo() const {
  return _internal_has_transcriptinfo();
}
inline void StreamingTranslationTaskResponse::set_has_transcriptinfo() {
  _oneof_case_[0] = kTranscriptinfo;
}
inline void StreamingTranslationTaskResponse::clear_transcriptinfo() {
  if (_internal_has_transcriptinfo()) {
    if (GetArenaNoVirtual() == nullptr) {
      delete streaming_request_.transcriptinfo_;
    }
    clear_has_streaming_request();
  }
}
inline ::sagittarius::translation::v1::TranscriptInfo* StreamingTranslationTaskResponse::release_transcriptinfo() {
  // @@protoc_insertion_point(field_release:sagittarius.translation.v1.StreamingTranslationTaskResponse.transcriptinfo)
  if (_internal_has_transcriptinfo()) {
    clear_has_streaming_request();
      ::sagittarius::translation::v1::TranscriptInfo* temp = streaming_request_.transcriptinfo_;
    if (GetArenaNoVirtual() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    streaming_request_.transcriptinfo_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sagittarius::translation::v1::TranscriptInfo& StreamingTranslationTaskResponse::_internal_transcriptinfo() const {
  return _internal_has_transcriptinfo()
      ? *streaming_request_.transcriptinfo_
      : *reinterpret_cast< ::sagittarius::translation::v1::TranscriptInfo*>(&::sagittarius::translation::v1::_TranscriptInfo_default_instance_);
}
inline const ::sagittarius::translation::v1::TranscriptInfo& StreamingTranslationTaskResponse::transcriptinfo() const {
  // @@protoc_insertion_point(field_get:sagittarius.translation.v1.StreamingTranslationTaskResponse.transcriptinfo)
  return _internal_transcriptinfo();
}
inline ::sagittarius::translation::v1::TranscriptInfo* StreamingTranslationTaskResponse::unsafe_arena_release_transcriptinfo() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sagittarius.translation.v1.StreamingTranslationTaskResponse.transcriptinfo)
  if (_internal_has_transcriptinfo()) {
    clear_has_streaming_request();
    ::sagittarius::translation::v1::TranscriptInfo* temp = streaming_request_.transcriptinfo_;
    streaming_request_.transcriptinfo_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StreamingTranslationTaskResponse::unsafe_arena_set_allocated_transcriptinfo(::sagittarius::translation::v1::TranscriptInfo* transcriptinfo) {
  clear_streaming_request();
  if (transcriptinfo) {
    set_has_transcriptinfo();
    streaming_request_.transcriptinfo_ = transcriptinfo;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sagittarius.translation.v1.StreamingTranslationTaskResponse.transcriptinfo)
}
inline ::sagittarius::translation::v1::TranscriptInfo* StreamingTranslationTaskResponse::_internal_mutable_transcriptinfo() {
  if (!_internal_has_transcriptinfo()) {
    clear_streaming_request();
    set_has_transcriptinfo();
    streaming_request_.transcriptinfo_ = CreateMaybeMessage< ::sagittarius::translation::v1::TranscriptInfo >(
        GetArenaNoVirtual());
  }
  return streaming_request_.transcriptinfo_;
}
inline ::sagittarius::translation::v1::TranscriptInfo* StreamingTranslationTaskResponse::mutable_transcriptinfo() {
  // @@protoc_insertion_point(field_mutable:sagittarius.translation.v1.StreamingTranslationTaskResponse.transcriptinfo)
  return _internal_mutable_transcriptinfo();
}

inline bool StreamingTranslationTaskResponse::has_streaming_request() const {
  return streaming_request_case() != STREAMING_REQUEST_NOT_SET;
}
inline void StreamingTranslationTaskResponse::clear_has_streaming_request() {
  _oneof_case_[0] = STREAMING_REQUEST_NOT_SET;
}
inline StreamingTranslationTaskResponse::StreamingRequestCase StreamingTranslationTaskResponse::streaming_request_case() const {
  return StreamingTranslationTaskResponse::StreamingRequestCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// StreamingTranslationTaskInfo

// string task_id = 1;
inline void StreamingTranslationTaskInfo::clear_task_id() {
  task_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& StreamingTranslationTaskInfo::task_id() const {
  // @@protoc_insertion_point(field_get:sagittarius.translation.v1.StreamingTranslationTaskInfo.task_id)
  return _internal_task_id();
}
inline void StreamingTranslationTaskInfo::set_task_id(const std::string& value) {
  _internal_set_task_id(value);
  // @@protoc_insertion_point(field_set:sagittarius.translation.v1.StreamingTranslationTaskInfo.task_id)
}
inline std::string* StreamingTranslationTaskInfo::mutable_task_id() {
  // @@protoc_insertion_point(field_mutable:sagittarius.translation.v1.StreamingTranslationTaskInfo.task_id)
  return _internal_mutable_task_id();
}
inline const std::string& StreamingTranslationTaskInfo::_internal_task_id() const {
  return task_id_.Get();
}
inline void StreamingTranslationTaskInfo::_internal_set_task_id(const std::string& value) {
  
  task_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void StreamingTranslationTaskInfo::set_task_id(std::string&& value) {
  
  task_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:sagittarius.translation.v1.StreamingTranslationTaskInfo.task_id)
}
inline void StreamingTranslationTaskInfo::set_task_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  task_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:sagittarius.translation.v1.StreamingTranslationTaskInfo.task_id)
}
inline void StreamingTranslationTaskInfo::set_task_id(const char* value,
    size_t size) {
  
  task_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:sagittarius.translation.v1.StreamingTranslationTaskInfo.task_id)
}
inline std::string* StreamingTranslationTaskInfo::_internal_mutable_task_id() {
  
  return task_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* StreamingTranslationTaskInfo::release_task_id() {
  // @@protoc_insertion_point(field_release:sagittarius.translation.v1.StreamingTranslationTaskInfo.task_id)
  
  return task_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void StreamingTranslationTaskInfo::set_allocated_task_id(std::string* task_id) {
  if (task_id != nullptr) {
    
  } else {
    
  }
  task_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), task_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:sagittarius.translation.v1.StreamingTranslationTaskInfo.task_id)
}
inline std::string* StreamingTranslationTaskInfo::unsafe_arena_release_task_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sagittarius.translation.v1.StreamingTranslationTaskInfo.task_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return task_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void StreamingTranslationTaskInfo::unsafe_arena_set_allocated_task_id(
    std::string* task_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (task_id != nullptr) {
    
  } else {
    
  }
  task_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      task_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sagittarius.translation.v1.StreamingTranslationTaskInfo.task_id)
}

// double estimate_time = 2;
inline void StreamingTranslationTaskInfo::clear_estimate_time() {
  estimate_time_ = 0;
}
inline double StreamingTranslationTaskInfo::_internal_estimate_time() const {
  return estimate_time_;
}
inline double StreamingTranslationTaskInfo::estimate_time() const {
  // @@protoc_insertion_point(field_get:sagittarius.translation.v1.StreamingTranslationTaskInfo.estimate_time)
  return _internal_estimate_time();
}
inline void StreamingTranslationTaskInfo::_internal_set_estimate_time(double value) {
  
  estimate_time_ = value;
}
inline void StreamingTranslationTaskInfo::set_estimate_time(double value) {
  _internal_set_estimate_time(value);
  // @@protoc_insertion_point(field_set:sagittarius.translation.v1.StreamingTranslationTaskInfo.estimate_time)
}

// -------------------------------------------------------------------

// StreamingTranslationResult

// string transcript = 1;
inline void StreamingTranslationResult::clear_transcript() {
  transcript_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& StreamingTranslationResult::transcript() const {
  // @@protoc_insertion_point(field_get:sagittarius.translation.v1.StreamingTranslationResult.transcript)
  return _internal_transcript();
}
inline void StreamingTranslationResult::set_transcript(const std::string& value) {
  _internal_set_transcript(value);
  // @@protoc_insertion_point(field_set:sagittarius.translation.v1.StreamingTranslationResult.transcript)
}
inline std::string* StreamingTranslationResult::mutable_transcript() {
  // @@protoc_insertion_point(field_mutable:sagittarius.translation.v1.StreamingTranslationResult.transcript)
  return _internal_mutable_transcript();
}
inline const std::string& StreamingTranslationResult::_internal_transcript() const {
  return transcript_.Get();
}
inline void StreamingTranslationResult::_internal_set_transcript(const std::string& value) {
  
  transcript_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void StreamingTranslationResult::set_transcript(std::string&& value) {
  
  transcript_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:sagittarius.translation.v1.StreamingTranslationResult.transcript)
}
inline void StreamingTranslationResult::set_transcript(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  transcript_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:sagittarius.translation.v1.StreamingTranslationResult.transcript)
}
inline void StreamingTranslationResult::set_transcript(const char* value,
    size_t size) {
  
  transcript_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:sagittarius.translation.v1.StreamingTranslationResult.transcript)
}
inline std::string* StreamingTranslationResult::_internal_mutable_transcript() {
  
  return transcript_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* StreamingTranslationResult::release_transcript() {
  // @@protoc_insertion_point(field_release:sagittarius.translation.v1.StreamingTranslationResult.transcript)
  
  return transcript_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void StreamingTranslationResult::set_allocated_transcript(std::string* transcript) {
  if (transcript != nullptr) {
    
  } else {
    
  }
  transcript_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transcript,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:sagittarius.translation.v1.StreamingTranslationResult.transcript)
}
inline std::string* StreamingTranslationResult::unsafe_arena_release_transcript() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sagittarius.translation.v1.StreamingTranslationResult.transcript)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return transcript_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void StreamingTranslationResult::unsafe_arena_set_allocated_transcript(
    std::string* transcript) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (transcript != nullptr) {
    
  } else {
    
  }
  transcript_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      transcript, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sagittarius.translation.v1.StreamingTranslationResult.transcript)
}

// float confidence = 2;
inline void StreamingTranslationResult::clear_confidence() {
  confidence_ = 0;
}
inline float StreamingTranslationResult::_internal_confidence() const {
  return confidence_;
}
inline float StreamingTranslationResult::confidence() const {
  // @@protoc_insertion_point(field_get:sagittarius.translation.v1.StreamingTranslationResult.confidence)
  return _internal_confidence();
}
inline void StreamingTranslationResult::_internal_set_confidence(float value) {
  
  confidence_ = value;
}
inline void StreamingTranslationResult::set_confidence(float value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:sagittarius.translation.v1.StreamingTranslationResult.confidence)
}

// float stability = 3;
inline void StreamingTranslationResult::clear_stability() {
  stability_ = 0;
}
inline float StreamingTranslationResult::_internal_stability() const {
  return stability_;
}
inline float StreamingTranslationResult::stability() const {
  // @@protoc_insertion_point(field_get:sagittarius.translation.v1.StreamingTranslationResult.stability)
  return _internal_stability();
}
inline void StreamingTranslationResult::_internal_set_stability(float value) {
  
  stability_ = value;
}
inline void StreamingTranslationResult::set_stability(float value) {
  _internal_set_stability(value);
  // @@protoc_insertion_point(field_set:sagittarius.translation.v1.StreamingTranslationResult.stability)
}

// double start_time = 4;
inline void StreamingTranslationResult::clear_start_time() {
  start_time_ = 0;
}
inline double StreamingTranslationResult::_internal_start_time() const {
  return start_time_;
}
inline double StreamingTranslationResult::start_time() const {
  // @@protoc_insertion_point(field_get:sagittarius.translation.v1.StreamingTranslationResult.start_time)
  return _internal_start_time();
}
inline void StreamingTranslationResult::_internal_set_start_time(double value) {
  
  start_time_ = value;
}
inline void StreamingTranslationResult::set_start_time(double value) {
  _internal_set_start_time(value);
  // @@protoc_insertion_point(field_set:sagittarius.translation.v1.StreamingTranslationResult.start_time)
}

// double end_time = 5;
inline void StreamingTranslationResult::clear_end_time() {
  end_time_ = 0;
}
inline double StreamingTranslationResult::_internal_end_time() const {
  return end_time_;
}
inline double StreamingTranslationResult::end_time() const {
  // @@protoc_insertion_point(field_get:sagittarius.translation.v1.StreamingTranslationResult.end_time)
  return _internal_end_time();
}
inline void StreamingTranslationResult::_internal_set_end_time(double value) {
  
  end_time_ = value;
}
inline void StreamingTranslationResult::set_end_time(double value) {
  _internal_set_end_time(value);
  // @@protoc_insertion_point(field_set:sagittarius.translation.v1.StreamingTranslationResult.end_time)
}

// -------------------------------------------------------------------

// TextTranslationRequest

// repeated string text = 1;
inline int TextTranslationRequest::_internal_text_size() const {
  return text_.size();
}
inline int TextTranslationRequest::text_size() const {
  return _internal_text_size();
}
inline void TextTranslationRequest::clear_text() {
  text_.Clear();
}
inline std::string* TextTranslationRequest::add_text() {
  // @@protoc_insertion_point(field_add_mutable:sagittarius.translation.v1.TextTranslationRequest.text)
  return _internal_add_text();
}
inline const std::string& TextTranslationRequest::_internal_text(int index) const {
  return text_.Get(index);
}
inline const std::string& TextTranslationRequest::text(int index) const {
  // @@protoc_insertion_point(field_get:sagittarius.translation.v1.TextTranslationRequest.text)
  return _internal_text(index);
}
inline std::string* TextTranslationRequest::mutable_text(int index) {
  // @@protoc_insertion_point(field_mutable:sagittarius.translation.v1.TextTranslationRequest.text)
  return text_.Mutable(index);
}
inline void TextTranslationRequest::set_text(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:sagittarius.translation.v1.TextTranslationRequest.text)
  text_.Mutable(index)->assign(value);
}
inline void TextTranslationRequest::set_text(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:sagittarius.translation.v1.TextTranslationRequest.text)
  text_.Mutable(index)->assign(std::move(value));
}
inline void TextTranslationRequest::set_text(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  text_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sagittarius.translation.v1.TextTranslationRequest.text)
}
inline void TextTranslationRequest::set_text(int index, const char* value, size_t size) {
  text_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sagittarius.translation.v1.TextTranslationRequest.text)
}
inline std::string* TextTranslationRequest::_internal_add_text() {
  return text_.Add();
}
inline void TextTranslationRequest::add_text(const std::string& value) {
  text_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sagittarius.translation.v1.TextTranslationRequest.text)
}
inline void TextTranslationRequest::add_text(std::string&& value) {
  text_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sagittarius.translation.v1.TextTranslationRequest.text)
}
inline void TextTranslationRequest::add_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  text_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sagittarius.translation.v1.TextTranslationRequest.text)
}
inline void TextTranslationRequest::add_text(const char* value, size_t size) {
  text_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sagittarius.translation.v1.TextTranslationRequest.text)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TextTranslationRequest::text() const {
  // @@protoc_insertion_point(field_list:sagittarius.translation.v1.TextTranslationRequest.text)
  return text_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TextTranslationRequest::mutable_text() {
  // @@protoc_insertion_point(field_mutable_list:sagittarius.translation.v1.TextTranslationRequest.text)
  return &text_;
}

// string target_language_code = 2;
inline void TextTranslationRequest::clear_target_language_code() {
  target_language_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& TextTranslationRequest::target_language_code() const {
  // @@protoc_insertion_point(field_get:sagittarius.translation.v1.TextTranslationRequest.target_language_code)
  return _internal_target_language_code();
}
inline void TextTranslationRequest::set_target_language_code(const std::string& value) {
  _internal_set_target_language_code(value);
  // @@protoc_insertion_point(field_set:sagittarius.translation.v1.TextTranslationRequest.target_language_code)
}
inline std::string* TextTranslationRequest::mutable_target_language_code() {
  // @@protoc_insertion_point(field_mutable:sagittarius.translation.v1.TextTranslationRequest.target_language_code)
  return _internal_mutable_target_language_code();
}
inline const std::string& TextTranslationRequest::_internal_target_language_code() const {
  return target_language_code_.Get();
}
inline void TextTranslationRequest::_internal_set_target_language_code(const std::string& value) {
  
  target_language_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void TextTranslationRequest::set_target_language_code(std::string&& value) {
  
  target_language_code_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:sagittarius.translation.v1.TextTranslationRequest.target_language_code)
}
inline void TextTranslationRequest::set_target_language_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  target_language_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:sagittarius.translation.v1.TextTranslationRequest.target_language_code)
}
inline void TextTranslationRequest::set_target_language_code(const char* value,
    size_t size) {
  
  target_language_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:sagittarius.translation.v1.TextTranslationRequest.target_language_code)
}
inline std::string* TextTranslationRequest::_internal_mutable_target_language_code() {
  
  return target_language_code_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* TextTranslationRequest::release_target_language_code() {
  // @@protoc_insertion_point(field_release:sagittarius.translation.v1.TextTranslationRequest.target_language_code)
  
  return target_language_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void TextTranslationRequest::set_allocated_target_language_code(std::string* target_language_code) {
  if (target_language_code != nullptr) {
    
  } else {
    
  }
  target_language_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target_language_code,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:sagittarius.translation.v1.TextTranslationRequest.target_language_code)
}
inline std::string* TextTranslationRequest::unsafe_arena_release_target_language_code() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sagittarius.translation.v1.TextTranslationRequest.target_language_code)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return target_language_code_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void TextTranslationRequest::unsafe_arena_set_allocated_target_language_code(
    std::string* target_language_code) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (target_language_code != nullptr) {
    
  } else {
    
  }
  target_language_code_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      target_language_code, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sagittarius.translation.v1.TextTranslationRequest.target_language_code)
}

// string source_language_code = 3;
inline void TextTranslationRequest::clear_source_language_code() {
  source_language_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& TextTranslationRequest::source_language_code() const {
  // @@protoc_insertion_point(field_get:sagittarius.translation.v1.TextTranslationRequest.source_language_code)
  return _internal_source_language_code();
}
inline void TextTranslationRequest::set_source_language_code(const std::string& value) {
  _internal_set_source_language_code(value);
  // @@protoc_insertion_point(field_set:sagittarius.translation.v1.TextTranslationRequest.source_language_code)
}
inline std::string* TextTranslationRequest::mutable_source_language_code() {
  // @@protoc_insertion_point(field_mutable:sagittarius.translation.v1.TextTranslationRequest.source_language_code)
  return _internal_mutable_source_language_code();
}
inline const std::string& TextTranslationRequest::_internal_source_language_code() const {
  return source_language_code_.Get();
}
inline void TextTranslationRequest::_internal_set_source_language_code(const std::string& value) {
  
  source_language_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void TextTranslationRequest::set_source_language_code(std::string&& value) {
  
  source_language_code_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:sagittarius.translation.v1.TextTranslationRequest.source_language_code)
}
inline void TextTranslationRequest::set_source_language_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  source_language_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:sagittarius.translation.v1.TextTranslationRequest.source_language_code)
}
inline void TextTranslationRequest::set_source_language_code(const char* value,
    size_t size) {
  
  source_language_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:sagittarius.translation.v1.TextTranslationRequest.source_language_code)
}
inline std::string* TextTranslationRequest::_internal_mutable_source_language_code() {
  
  return source_language_code_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* TextTranslationRequest::release_source_language_code() {
  // @@protoc_insertion_point(field_release:sagittarius.translation.v1.TextTranslationRequest.source_language_code)
  
  return source_language_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void TextTranslationRequest::set_allocated_source_language_code(std::string* source_language_code) {
  if (source_language_code != nullptr) {
    
  } else {
    
  }
  source_language_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source_language_code,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:sagittarius.translation.v1.TextTranslationRequest.source_language_code)
}
inline std::string* TextTranslationRequest::unsafe_arena_release_source_language_code() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sagittarius.translation.v1.TextTranslationRequest.source_language_code)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return source_language_code_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void TextTranslationRequest::unsafe_arena_set_allocated_source_language_code(
    std::string* source_language_code) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (source_language_code != nullptr) {
    
  } else {
    
  }
  source_language_code_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      source_language_code, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sagittarius.translation.v1.TextTranslationRequest.source_language_code)
}

// -------------------------------------------------------------------

// TextTranslationResponse_Text

// string source_language = 1;
inline void TextTranslationResponse_Text::clear_source_language() {
  source_language_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& TextTranslationResponse_Text::source_language() const {
  // @@protoc_insertion_point(field_get:sagittarius.translation.v1.TextTranslationResponse.Text.source_language)
  return _internal_source_language();
}
inline void TextTranslationResponse_Text::set_source_language(const std::string& value) {
  _internal_set_source_language(value);
  // @@protoc_insertion_point(field_set:sagittarius.translation.v1.TextTranslationResponse.Text.source_language)
}
inline std::string* TextTranslationResponse_Text::mutable_source_language() {
  // @@protoc_insertion_point(field_mutable:sagittarius.translation.v1.TextTranslationResponse.Text.source_language)
  return _internal_mutable_source_language();
}
inline const std::string& TextTranslationResponse_Text::_internal_source_language() const {
  return source_language_.Get();
}
inline void TextTranslationResponse_Text::_internal_set_source_language(const std::string& value) {
  
  source_language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void TextTranslationResponse_Text::set_source_language(std::string&& value) {
  
  source_language_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:sagittarius.translation.v1.TextTranslationResponse.Text.source_language)
}
inline void TextTranslationResponse_Text::set_source_language(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  source_language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:sagittarius.translation.v1.TextTranslationResponse.Text.source_language)
}
inline void TextTranslationResponse_Text::set_source_language(const char* value,
    size_t size) {
  
  source_language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:sagittarius.translation.v1.TextTranslationResponse.Text.source_language)
}
inline std::string* TextTranslationResponse_Text::_internal_mutable_source_language() {
  
  return source_language_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* TextTranslationResponse_Text::release_source_language() {
  // @@protoc_insertion_point(field_release:sagittarius.translation.v1.TextTranslationResponse.Text.source_language)
  
  return source_language_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void TextTranslationResponse_Text::set_allocated_source_language(std::string* source_language) {
  if (source_language != nullptr) {
    
  } else {
    
  }
  source_language_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source_language,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:sagittarius.translation.v1.TextTranslationResponse.Text.source_language)
}
inline std::string* TextTranslationResponse_Text::unsafe_arena_release_source_language() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sagittarius.translation.v1.TextTranslationResponse.Text.source_language)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return source_language_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void TextTranslationResponse_Text::unsafe_arena_set_allocated_source_language(
    std::string* source_language) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (source_language != nullptr) {
    
  } else {
    
  }
  source_language_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      source_language, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sagittarius.translation.v1.TextTranslationResponse.Text.source_language)
}

// string text = 2;
inline void TextTranslationResponse_Text::clear_text() {
  text_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& TextTranslationResponse_Text::text() const {
  // @@protoc_insertion_point(field_get:sagittarius.translation.v1.TextTranslationResponse.Text.text)
  return _internal_text();
}
inline void TextTranslationResponse_Text::set_text(const std::string& value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:sagittarius.translation.v1.TextTranslationResponse.Text.text)
}
inline std::string* TextTranslationResponse_Text::mutable_text() {
  // @@protoc_insertion_point(field_mutable:sagittarius.translation.v1.TextTranslationResponse.Text.text)
  return _internal_mutable_text();
}
inline const std::string& TextTranslationResponse_Text::_internal_text() const {
  return text_.Get();
}
inline void TextTranslationResponse_Text::_internal_set_text(const std::string& value) {
  
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void TextTranslationResponse_Text::set_text(std::string&& value) {
  
  text_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:sagittarius.translation.v1.TextTranslationResponse.Text.text)
}
inline void TextTranslationResponse_Text::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:sagittarius.translation.v1.TextTranslationResponse.Text.text)
}
inline void TextTranslationResponse_Text::set_text(const char* value,
    size_t size) {
  
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:sagittarius.translation.v1.TextTranslationResponse.Text.text)
}
inline std::string* TextTranslationResponse_Text::_internal_mutable_text() {
  
  return text_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* TextTranslationResponse_Text::release_text() {
  // @@protoc_insertion_point(field_release:sagittarius.translation.v1.TextTranslationResponse.Text.text)
  
  return text_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void TextTranslationResponse_Text::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:sagittarius.translation.v1.TextTranslationResponse.Text.text)
}
inline std::string* TextTranslationResponse_Text::unsafe_arena_release_text() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sagittarius.translation.v1.TextTranslationResponse.Text.text)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return text_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void TextTranslationResponse_Text::unsafe_arena_set_allocated_text(
    std::string* text) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (text != nullptr) {
    
  } else {
    
  }
  text_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      text, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sagittarius.translation.v1.TextTranslationResponse.Text.text)
}

// -------------------------------------------------------------------

// TextTranslationResponse

// .google.rpc.Status error = 1;
inline bool TextTranslationResponse::_internal_has_error() const {
  return this != internal_default_instance() && error_ != nullptr;
}
inline bool TextTranslationResponse::has_error() const {
  return _internal_has_error();
}
inline const ::google::rpc::Status& TextTranslationResponse::_internal_error() const {
  const ::google::rpc::Status* p = error_;
  return p != nullptr ? *p : *reinterpret_cast<const ::google::rpc::Status*>(
      &::google::rpc::_Status_default_instance_);
}
inline const ::google::rpc::Status& TextTranslationResponse::error() const {
  // @@protoc_insertion_point(field_get:sagittarius.translation.v1.TextTranslationResponse.error)
  return _internal_error();
}
inline ::google::rpc::Status* TextTranslationResponse::release_error() {
  auto temp = unsafe_arena_release_error();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::rpc::Status* TextTranslationResponse::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:sagittarius.translation.v1.TextTranslationResponse.error)
  
  ::google::rpc::Status* temp = error_;
  error_ = nullptr;
  return temp;
}
inline ::google::rpc::Status* TextTranslationResponse::_internal_mutable_error() {
  
  if (error_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::rpc::Status>(GetArenaNoVirtual());
    error_ = p;
  }
  return error_;
}
inline ::google::rpc::Status* TextTranslationResponse::mutable_error() {
  // @@protoc_insertion_point(field_mutable:sagittarius.translation.v1.TextTranslationResponse.error)
  return _internal_mutable_error();
}
inline void TextTranslationResponse::set_allocated_error(::google::rpc::Status* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_);
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:sagittarius.translation.v1.TextTranslationResponse.error)
}

// repeated .sagittarius.translation.v1.TextTranslationResponse.Text results = 2;
inline int TextTranslationResponse::_internal_results_size() const {
  return results_.size();
}
inline int TextTranslationResponse::results_size() const {
  return _internal_results_size();
}
inline void TextTranslationResponse::clear_results() {
  results_.Clear();
}
inline ::sagittarius::translation::v1::TextTranslationResponse_Text* TextTranslationResponse::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:sagittarius.translation.v1.TextTranslationResponse.results)
  return results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sagittarius::translation::v1::TextTranslationResponse_Text >*
TextTranslationResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:sagittarius.translation.v1.TextTranslationResponse.results)
  return &results_;
}
inline const ::sagittarius::translation::v1::TextTranslationResponse_Text& TextTranslationResponse::_internal_results(int index) const {
  return results_.Get(index);
}
inline const ::sagittarius::translation::v1::TextTranslationResponse_Text& TextTranslationResponse::results(int index) const {
  // @@protoc_insertion_point(field_get:sagittarius.translation.v1.TextTranslationResponse.results)
  return _internal_results(index);
}
inline ::sagittarius::translation::v1::TextTranslationResponse_Text* TextTranslationResponse::_internal_add_results() {
  return results_.Add();
}
inline ::sagittarius::translation::v1::TextTranslationResponse_Text* TextTranslationResponse::add_results() {
  // @@protoc_insertion_point(field_add:sagittarius.translation.v1.TextTranslationResponse.results)
  return _internal_add_results();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sagittarius::translation::v1::TextTranslationResponse_Text >&
TextTranslationResponse::results() const {
  // @@protoc_insertion_point(field_list:sagittarius.translation.v1.TextTranslationResponse.results)
  return results_;
}

// -------------------------------------------------------------------

// UserQuotaRequest

// -------------------------------------------------------------------

// UserQuotaResponse

// int64 quota = 1;
inline void UserQuotaResponse::clear_quota() {
  quota_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UserQuotaResponse::_internal_quota() const {
  return quota_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UserQuotaResponse::quota() const {
  // @@protoc_insertion_point(field_get:sagittarius.translation.v1.UserQuotaResponse.quota)
  return _internal_quota();
}
inline void UserQuotaResponse::_internal_set_quota(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  quota_ = value;
}
inline void UserQuotaResponse::set_quota(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_quota(value);
  // @@protoc_insertion_point(field_set:sagittarius.translation.v1.UserQuotaResponse.quota)
}

// int64 time_left = 2;
inline void UserQuotaResponse::clear_time_left() {
  time_left_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UserQuotaResponse::_internal_time_left() const {
  return time_left_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UserQuotaResponse::time_left() const {
  // @@protoc_insertion_point(field_get:sagittarius.translation.v1.UserQuotaResponse.time_left)
  return _internal_time_left();
}
inline void UserQuotaResponse::_internal_set_time_left(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  time_left_ = value;
}
inline void UserQuotaResponse::set_time_left(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time_left(value);
  // @@protoc_insertion_point(field_set:sagittarius.translation.v1.UserQuotaResponse.time_left)
}

// .google.rpc.Status error = 3;
inline bool UserQuotaResponse::_internal_has_error() const {
  return this != internal_default_instance() && error_ != nullptr;
}
inline bool UserQuotaResponse::has_error() const {
  return _internal_has_error();
}
inline const ::google::rpc::Status& UserQuotaResponse::_internal_error() const {
  const ::google::rpc::Status* p = error_;
  return p != nullptr ? *p : *reinterpret_cast<const ::google::rpc::Status*>(
      &::google::rpc::_Status_default_instance_);
}
inline const ::google::rpc::Status& UserQuotaResponse::error() const {
  // @@protoc_insertion_point(field_get:sagittarius.translation.v1.UserQuotaResponse.error)
  return _internal_error();
}
inline ::google::rpc::Status* UserQuotaResponse::release_error() {
  auto temp = unsafe_arena_release_error();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::rpc::Status* UserQuotaResponse::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:sagittarius.translation.v1.UserQuotaResponse.error)
  
  ::google::rpc::Status* temp = error_;
  error_ = nullptr;
  return temp;
}
inline ::google::rpc::Status* UserQuotaResponse::_internal_mutable_error() {
  
  if (error_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::rpc::Status>(GetArenaNoVirtual());
    error_ = p;
  }
  return error_;
}
inline ::google::rpc::Status* UserQuotaResponse::mutable_error() {
  // @@protoc_insertion_point(field_mutable:sagittarius.translation.v1.UserQuotaResponse.error)
  return _internal_mutable_error();
}
inline void UserQuotaResponse::set_allocated_error(::google::rpc::Status* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_);
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:sagittarius.translation.v1.UserQuotaResponse.error)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace translation
}  // namespace sagittarius

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::sagittarius::translation::v1::StreamingTranslationTaskCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sagittarius::translation::v1::StreamingTranslationTaskCode>() {
  return ::sagittarius::translation::v1::StreamingTranslationTaskCode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_translation_2fv1_2ftranslation_2eproto
