// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: training/v1/training.proto

#include "training/v1/training.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RecognitionConfig_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto;
namespace sagittarius {
namespace training {
namespace v1 {
class TrainingDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrainingData> _instance;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transcript_identity_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
} _TrainingData_default_instance_;
class StreamingTrainingRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StreamingTrainingRequest> _instance;
  const ::google::cloud::speech::v1::RecognitionConfig* streaming_config_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr audio_content_;
} _StreamingTrainingRequest_default_instance_;
}  // namespace v1
}  // namespace training
}  // namespace sagittarius
static void InitDefaultsscc_info_StreamingTrainingRequest_training_2fv1_2ftraining_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sagittarius::training::v1::_StreamingTrainingRequest_default_instance_;
    new (ptr) ::sagittarius::training::v1::StreamingTrainingRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sagittarius::training::v1::StreamingTrainingRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StreamingTrainingRequest_training_2fv1_2ftraining_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_StreamingTrainingRequest_training_2fv1_2ftraining_2eproto}, {
      &scc_info_RecognitionConfig_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto.base,}};

static void InitDefaultsscc_info_TrainingData_training_2fv1_2ftraining_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sagittarius::training::v1::_TrainingData_default_instance_;
    new (ptr) ::sagittarius::training::v1::TrainingData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sagittarius::training::v1::TrainingData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrainingData_training_2fv1_2ftraining_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TrainingData_training_2fv1_2ftraining_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_training_2fv1_2ftraining_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_training_2fv1_2ftraining_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_training_2fv1_2ftraining_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_training_2fv1_2ftraining_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sagittarius::training::v1::TrainingData, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::sagittarius::training::v1::TrainingData, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sagittarius::training::v1::TrainingData, media_identity_),
  PROTOBUF_FIELD_OFFSET(::sagittarius::training::v1::TrainingData, language_code_),
  PROTOBUF_FIELD_OFFSET(::sagittarius::training::v1::TrainingData, format_),
  PROTOBUF_FIELD_OFFSET(::sagittarius::training::v1::TrainingData, played_time_),
  PROTOBUF_FIELD_OFFSET(::sagittarius::training::v1::TrainingData, total_time_),
  PROTOBUF_FIELD_OFFSET(::sagittarius::training::v1::TrainingData, delay_),
  PROTOBUF_FIELD_OFFSET(::sagittarius::training::v1::TrainingData, hints_),
  offsetof(::sagittarius::training::v1::TrainingDataDefaultTypeInternal, transcript_identity_),
  offsetof(::sagittarius::training::v1::TrainingDataDefaultTypeInternal, payload_),
  PROTOBUF_FIELD_OFFSET(::sagittarius::training::v1::TrainingData, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sagittarius::training::v1::StreamingTrainingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::sagittarius::training::v1::StreamingTrainingRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::sagittarius::training::v1::StreamingTrainingRequestDefaultTypeInternal, streaming_config_),
  offsetof(::sagittarius::training::v1::StreamingTrainingRequestDefaultTypeInternal, audio_content_),
  PROTOBUF_FIELD_OFFSET(::sagittarius::training::v1::StreamingTrainingRequest, transcript_),
  PROTOBUF_FIELD_OFFSET(::sagittarius::training::v1::StreamingTrainingRequest, media_identity_),
  PROTOBUF_FIELD_OFFSET(::sagittarius::training::v1::StreamingTrainingRequest, streaming_request_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::sagittarius::training::v1::TrainingData)},
  { 15, -1, sizeof(::sagittarius::training::v1::StreamingTrainingRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sagittarius::training::v1::_TrainingData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sagittarius::training::v1::_StreamingTrainingRequest_default_instance_),
};

const char descriptor_table_protodef_training_2fv1_2ftraining_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\032training/v1/training.proto\022\027sagittariu"
  "s.training.v1\032\034google/api/annotations.pr"
  "oto\032\027google/rpc/status.proto\032)google/clo"
  "ud/speech/v1/cloud_speech.proto\"\316\001\n\014Trai"
  "ningData\022\026\n\016media_identity\030\001 \001(\t\022\025\n\rlang"
  "uage_code\030\002 \001(\t\022\016\n\006format\030\004 \001(\t\022\023\n\013playe"
  "d_time\030\005 \001(\001\022\022\n\ntotal_time\030\006 \001(\001\022\r\n\005dela"
  "y\030\010 \001(\003\022\r\n\005hints\030\t \001(\t\022\035\n\023transcript_ide"
  "ntity\030\003 \001(\tH\000\022\021\n\007payload\030\007 \001(\014H\000B\006\n\004data"
  "\"\273\001\n\030StreamingTrainingRequest\022E\n\020streami"
  "ng_config\030\001 \001(\0132).google.cloud.speech.v1"
  ".RecognitionConfigH\000\022\027\n\raudio_content\030\002 "
  "\001(\014H\000\022\022\n\ntranscript\030\003 \001(\t\022\026\n\016media_ident"
  "ity\030\004 \001(\tB\023\n\021streaming_request2\375\001\n\007Train"
  "ng\022\223\001\n\010PushData\022%.sagittarius.training.v"
  "1.TrainingData\032\022.google.rpc.Status\"L\202\323\344\223"
  "\002F\"A/v1/media/{media_identity}/language/"
  "{language_code}/training:data:\001*\022\\\n\021Stre"
  "amingTraining\0221.sagittarius.training.v1."
  "StreamingTrainingRequest\032\022.google.rpc.St"
  "atus(\001B:\n\032ai.sagittarius.training.v1B\rTr"
  "ainingProtoP\001Z\010training\370\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_training_2fv1_2ftraining_2eproto_deps[3] = {
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
  &::descriptor_table_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto,
  &::descriptor_table_google_2frpc_2fstatus_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_training_2fv1_2ftraining_2eproto_sccs[2] = {
  &scc_info_StreamingTrainingRequest_training_2fv1_2ftraining_2eproto.base,
  &scc_info_TrainingData_training_2fv1_2ftraining_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_training_2fv1_2ftraining_2eproto_once;
static bool descriptor_table_training_2fv1_2ftraining_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_training_2fv1_2ftraining_2eproto = {
  &descriptor_table_training_2fv1_2ftraining_2eproto_initialized, descriptor_table_protodef_training_2fv1_2ftraining_2eproto, "training/v1/training.proto", 874,
  &descriptor_table_training_2fv1_2ftraining_2eproto_once, descriptor_table_training_2fv1_2ftraining_2eproto_sccs, descriptor_table_training_2fv1_2ftraining_2eproto_deps, 2, 3,
  schemas, file_default_instances, TableStruct_training_2fv1_2ftraining_2eproto::offsets,
  file_level_metadata_training_2fv1_2ftraining_2eproto, 2, file_level_enum_descriptors_training_2fv1_2ftraining_2eproto, file_level_service_descriptors_training_2fv1_2ftraining_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_training_2fv1_2ftraining_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_training_2fv1_2ftraining_2eproto), true);
namespace sagittarius {
namespace training {
namespace v1 {

// ===================================================================

void TrainingData::InitAsDefaultInstance() {
  ::sagittarius::training::v1::_TrainingData_default_instance_.transcript_identity_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::sagittarius::training::v1::_TrainingData_default_instance_.payload_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
class TrainingData::_Internal {
 public:
};

TrainingData::TrainingData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sagittarius.training.v1.TrainingData)
}
TrainingData::TrainingData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sagittarius.training.v1.TrainingData)
}
TrainingData::TrainingData(const TrainingData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  media_identity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_media_identity().empty()) {
    media_identity_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_media_identity(),
      GetArenaNoVirtual());
  }
  language_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_language_code().empty()) {
    language_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_language_code(),
      GetArenaNoVirtual());
  }
  format_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_format().empty()) {
    format_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_format(),
      GetArenaNoVirtual());
  }
  hints_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hints().empty()) {
    hints_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_hints(),
      GetArenaNoVirtual());
  }
  ::memcpy(&played_time_, &from.played_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&delay_) -
    reinterpret_cast<char*>(&played_time_)) + sizeof(delay_));
  clear_has_data();
  switch (from.data_case()) {
    case kTranscriptIdentity: {
      _internal_set_transcript_identity(from._internal_transcript_identity());
      break;
    }
    case kPayload: {
      _internal_set_payload(from._internal_payload());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:sagittarius.training.v1.TrainingData)
}

void TrainingData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrainingData_training_2fv1_2ftraining_2eproto.base);
  media_identity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  format_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hints_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&played_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&delay_) -
      reinterpret_cast<char*>(&played_time_)) + sizeof(delay_));
  clear_has_data();
}

TrainingData::~TrainingData() {
  // @@protoc_insertion_point(destructor:sagittarius.training.v1.TrainingData)
  SharedDtor();
}

void TrainingData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  media_identity_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  format_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hints_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_data()) {
    clear_data();
  }
}

void TrainingData::ArenaDtor(void* object) {
  TrainingData* _this = reinterpret_cast< TrainingData* >(object);
  (void)_this;
}
void TrainingData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrainingData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrainingData& TrainingData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrainingData_training_2fv1_2ftraining_2eproto.base);
  return *internal_default_instance();
}


void TrainingData::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:sagittarius.training.v1.TrainingData)
  switch (data_case()) {
    case kTranscriptIdentity: {
      data_.transcript_identity_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          GetArenaNoVirtual());
      break;
    }
    case kPayload: {
      data_.payload_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          GetArenaNoVirtual());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_NOT_SET;
}


void TrainingData::Clear() {
// @@protoc_insertion_point(message_clear_start:sagittarius.training.v1.TrainingData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  media_identity_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  language_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  format_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  hints_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ::memset(&played_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&delay_) -
      reinterpret_cast<char*>(&played_time_)) + sizeof(delay_));
  clear_data();
  _internal_metadata_.Clear();
}

const char* TrainingData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string media_identity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_media_identity();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sagittarius.training.v1.TrainingData.media_identity"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string language_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_language_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sagittarius.training.v1.TrainingData.language_code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string transcript_identity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_transcript_identity();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sagittarius.training.v1.TrainingData.transcript_identity"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string format = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_format();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sagittarius.training.v1.TrainingData.format"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double played_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          played_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double total_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          total_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bytes payload = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_payload();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 delay = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          delay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string hints = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_hints();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sagittarius.training.v1.TrainingData.hints"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrainingData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sagittarius.training.v1.TrainingData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string media_identity = 1;
  if (this->media_identity().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_media_identity().data(), static_cast<int>(this->_internal_media_identity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sagittarius.training.v1.TrainingData.media_identity");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_media_identity(), target);
  }

  // string language_code = 2;
  if (this->language_code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_language_code().data(), static_cast<int>(this->_internal_language_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sagittarius.training.v1.TrainingData.language_code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_language_code(), target);
  }

  // string transcript_identity = 3;
  if (_internal_has_transcript_identity()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_transcript_identity().data(), static_cast<int>(this->_internal_transcript_identity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sagittarius.training.v1.TrainingData.transcript_identity");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_transcript_identity(), target);
  }

  // string format = 4;
  if (this->format().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_format().data(), static_cast<int>(this->_internal_format().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sagittarius.training.v1.TrainingData.format");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_format(), target);
  }

  // double played_time = 5;
  if (!(this->played_time() <= 0 && this->played_time() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_played_time(), target);
  }

  // double total_time = 6;
  if (!(this->total_time() <= 0 && this->total_time() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_total_time(), target);
  }

  // bytes payload = 7;
  if (_internal_has_payload()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_payload(), target);
  }

  // int64 delay = 8;
  if (this->delay() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_delay(), target);
  }

  // string hints = 9;
  if (this->hints().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hints().data(), static_cast<int>(this->_internal_hints().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sagittarius.training.v1.TrainingData.hints");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_hints(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sagittarius.training.v1.TrainingData)
  return target;
}

size_t TrainingData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sagittarius.training.v1.TrainingData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string media_identity = 1;
  if (this->media_identity().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_media_identity());
  }

  // string language_code = 2;
  if (this->language_code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_language_code());
  }

  // string format = 4;
  if (this->format().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_format());
  }

  // string hints = 9;
  if (this->hints().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hints());
  }

  // double played_time = 5;
  if (!(this->played_time() <= 0 && this->played_time() >= 0)) {
    total_size += 1 + 8;
  }

  // double total_time = 6;
  if (!(this->total_time() <= 0 && this->total_time() >= 0)) {
    total_size += 1 + 8;
  }

  // int64 delay = 8;
  if (this->delay() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_delay());
  }

  switch (data_case()) {
    // string transcript_identity = 3;
    case kTranscriptIdentity: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_transcript_identity());
      break;
    }
    // bytes payload = 7;
    case kPayload: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_payload());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrainingData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sagittarius.training.v1.TrainingData)
  GOOGLE_DCHECK_NE(&from, this);
  const TrainingData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrainingData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sagittarius.training.v1.TrainingData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sagittarius.training.v1.TrainingData)
    MergeFrom(*source);
  }
}

void TrainingData::MergeFrom(const TrainingData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sagittarius.training.v1.TrainingData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.media_identity().size() > 0) {
    _internal_set_media_identity(from._internal_media_identity());
  }
  if (from.language_code().size() > 0) {
    _internal_set_language_code(from._internal_language_code());
  }
  if (from.format().size() > 0) {
    _internal_set_format(from._internal_format());
  }
  if (from.hints().size() > 0) {
    _internal_set_hints(from._internal_hints());
  }
  if (!(from.played_time() <= 0 && from.played_time() >= 0)) {
    _internal_set_played_time(from._internal_played_time());
  }
  if (!(from.total_time() <= 0 && from.total_time() >= 0)) {
    _internal_set_total_time(from._internal_total_time());
  }
  if (from.delay() != 0) {
    _internal_set_delay(from._internal_delay());
  }
  switch (from.data_case()) {
    case kTranscriptIdentity: {
      _internal_set_transcript_identity(from._internal_transcript_identity());
      break;
    }
    case kPayload: {
      _internal_set_payload(from._internal_payload());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
}

void TrainingData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sagittarius.training.v1.TrainingData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrainingData::CopyFrom(const TrainingData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sagittarius.training.v1.TrainingData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrainingData::IsInitialized() const {
  return true;
}

void TrainingData::InternalSwap(TrainingData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  media_identity_.Swap(&other->media_identity_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  language_code_.Swap(&other->language_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  format_.Swap(&other->format_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hints_.Swap(&other->hints_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(played_time_, other->played_time_);
  swap(total_time_, other->total_time_);
  swap(delay_, other->delay_);
  swap(data_, other->data_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrainingData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StreamingTrainingRequest::InitAsDefaultInstance() {
  ::sagittarius::training::v1::_StreamingTrainingRequest_default_instance_.streaming_config_ = const_cast< ::google::cloud::speech::v1::RecognitionConfig*>(
      ::google::cloud::speech::v1::RecognitionConfig::internal_default_instance());
  ::sagittarius::training::v1::_StreamingTrainingRequest_default_instance_.audio_content_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
class StreamingTrainingRequest::_Internal {
 public:
  static const ::google::cloud::speech::v1::RecognitionConfig& streaming_config(const StreamingTrainingRequest* msg);
};

const ::google::cloud::speech::v1::RecognitionConfig&
StreamingTrainingRequest::_Internal::streaming_config(const StreamingTrainingRequest* msg) {
  return *msg->streaming_request_.streaming_config_;
}
void StreamingTrainingRequest::set_allocated_streaming_config(::google::cloud::speech::v1::RecognitionConfig* streaming_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_streaming_request();
  if (streaming_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(streaming_config)->GetArena();
    if (message_arena != submessage_arena) {
      streaming_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, streaming_config, submessage_arena);
    }
    set_has_streaming_config();
    streaming_request_.streaming_config_ = streaming_config;
  }
  // @@protoc_insertion_point(field_set_allocated:sagittarius.training.v1.StreamingTrainingRequest.streaming_config)
}
void StreamingTrainingRequest::clear_streaming_config() {
  if (_internal_has_streaming_config()) {
    if (GetArenaNoVirtual() == nullptr) {
      delete streaming_request_.streaming_config_;
    }
    clear_has_streaming_request();
  }
}
StreamingTrainingRequest::StreamingTrainingRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sagittarius.training.v1.StreamingTrainingRequest)
}
StreamingTrainingRequest::StreamingTrainingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sagittarius.training.v1.StreamingTrainingRequest)
}
StreamingTrainingRequest::StreamingTrainingRequest(const StreamingTrainingRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  transcript_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_transcript().empty()) {
    transcript_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_transcript(),
      GetArenaNoVirtual());
  }
  media_identity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_media_identity().empty()) {
    media_identity_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_media_identity(),
      GetArenaNoVirtual());
  }
  clear_has_streaming_request();
  switch (from.streaming_request_case()) {
    case kStreamingConfig: {
      _internal_mutable_streaming_config()->::google::cloud::speech::v1::RecognitionConfig::MergeFrom(from._internal_streaming_config());
      break;
    }
    case kAudioContent: {
      _internal_set_audio_content(from._internal_audio_content());
      break;
    }
    case STREAMING_REQUEST_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:sagittarius.training.v1.StreamingTrainingRequest)
}

void StreamingTrainingRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StreamingTrainingRequest_training_2fv1_2ftraining_2eproto.base);
  transcript_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  media_identity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_has_streaming_request();
}

StreamingTrainingRequest::~StreamingTrainingRequest() {
  // @@protoc_insertion_point(destructor:sagittarius.training.v1.StreamingTrainingRequest)
  SharedDtor();
}

void StreamingTrainingRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  transcript_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  media_identity_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_streaming_request()) {
    clear_streaming_request();
  }
}

void StreamingTrainingRequest::ArenaDtor(void* object) {
  StreamingTrainingRequest* _this = reinterpret_cast< StreamingTrainingRequest* >(object);
  (void)_this;
}
void StreamingTrainingRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamingTrainingRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StreamingTrainingRequest& StreamingTrainingRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StreamingTrainingRequest_training_2fv1_2ftraining_2eproto.base);
  return *internal_default_instance();
}


void StreamingTrainingRequest::clear_streaming_request() {
// @@protoc_insertion_point(one_of_clear_start:sagittarius.training.v1.StreamingTrainingRequest)
  switch (streaming_request_case()) {
    case kStreamingConfig: {
      if (GetArenaNoVirtual() == nullptr) {
        delete streaming_request_.streaming_config_;
      }
      break;
    }
    case kAudioContent: {
      streaming_request_.audio_content_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          GetArenaNoVirtual());
      break;
    }
    case STREAMING_REQUEST_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = STREAMING_REQUEST_NOT_SET;
}


void StreamingTrainingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sagittarius.training.v1.StreamingTrainingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transcript_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  media_identity_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_streaming_request();
  _internal_metadata_.Clear();
}

const char* StreamingTrainingRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.cloud.speech.v1.RecognitionConfig streaming_config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_streaming_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes audio_content = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_audio_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string transcript = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_transcript();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sagittarius.training.v1.StreamingTrainingRequest.transcript"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string media_identity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_media_identity();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sagittarius.training.v1.StreamingTrainingRequest.media_identity"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamingTrainingRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sagittarius.training.v1.StreamingTrainingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.speech.v1.RecognitionConfig streaming_config = 1;
  if (_internal_has_streaming_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::streaming_config(this), target, stream);
  }

  // bytes audio_content = 2;
  if (_internal_has_audio_content()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_audio_content(), target);
  }

  // string transcript = 3;
  if (this->transcript().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_transcript().data(), static_cast<int>(this->_internal_transcript().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sagittarius.training.v1.StreamingTrainingRequest.transcript");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_transcript(), target);
  }

  // string media_identity = 4;
  if (this->media_identity().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_media_identity().data(), static_cast<int>(this->_internal_media_identity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sagittarius.training.v1.StreamingTrainingRequest.media_identity");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_media_identity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sagittarius.training.v1.StreamingTrainingRequest)
  return target;
}

size_t StreamingTrainingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sagittarius.training.v1.StreamingTrainingRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string transcript = 3;
  if (this->transcript().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_transcript());
  }

  // string media_identity = 4;
  if (this->media_identity().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_media_identity());
  }

  switch (streaming_request_case()) {
    // .google.cloud.speech.v1.RecognitionConfig streaming_config = 1;
    case kStreamingConfig: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *streaming_request_.streaming_config_);
      break;
    }
    // bytes audio_content = 2;
    case kAudioContent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_audio_content());
      break;
    }
    case STREAMING_REQUEST_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamingTrainingRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sagittarius.training.v1.StreamingTrainingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamingTrainingRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StreamingTrainingRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sagittarius.training.v1.StreamingTrainingRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sagittarius.training.v1.StreamingTrainingRequest)
    MergeFrom(*source);
  }
}

void StreamingTrainingRequest::MergeFrom(const StreamingTrainingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sagittarius.training.v1.StreamingTrainingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.transcript().size() > 0) {
    _internal_set_transcript(from._internal_transcript());
  }
  if (from.media_identity().size() > 0) {
    _internal_set_media_identity(from._internal_media_identity());
  }
  switch (from.streaming_request_case()) {
    case kStreamingConfig: {
      _internal_mutable_streaming_config()->::google::cloud::speech::v1::RecognitionConfig::MergeFrom(from._internal_streaming_config());
      break;
    }
    case kAudioContent: {
      _internal_set_audio_content(from._internal_audio_content());
      break;
    }
    case STREAMING_REQUEST_NOT_SET: {
      break;
    }
  }
}

void StreamingTrainingRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sagittarius.training.v1.StreamingTrainingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamingTrainingRequest::CopyFrom(const StreamingTrainingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sagittarius.training.v1.StreamingTrainingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamingTrainingRequest::IsInitialized() const {
  return true;
}

void StreamingTrainingRequest::InternalSwap(StreamingTrainingRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  transcript_.Swap(&other->transcript_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  media_identity_.Swap(&other->media_identity_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(streaming_request_, other->streaming_request_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamingTrainingRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace training
}  // namespace sagittarius
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sagittarius::training::v1::TrainingData* Arena::CreateMaybeMessage< ::sagittarius::training::v1::TrainingData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sagittarius::training::v1::TrainingData >(arena);
}
template<> PROTOBUF_NOINLINE ::sagittarius::training::v1::StreamingTrainingRequest* Arena::CreateMaybeMessage< ::sagittarius::training::v1::StreamingTrainingRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sagittarius::training::v1::StreamingTrainingRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
