// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: training/v1/training.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_training_2fv1_2ftraining_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_training_2fv1_2ftraining_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/rpc/status.pb.h"
#include "google/cloud/speech/v1/cloud_speech.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_training_2fv1_2ftraining_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_training_2fv1_2ftraining_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_training_2fv1_2ftraining_2eproto;
namespace sagittarius {
namespace training {
namespace v1 {
class StreamingTrainingRequest;
class StreamingTrainingRequestDefaultTypeInternal;
extern StreamingTrainingRequestDefaultTypeInternal _StreamingTrainingRequest_default_instance_;
class TrainingData;
class TrainingDataDefaultTypeInternal;
extern TrainingDataDefaultTypeInternal _TrainingData_default_instance_;
}  // namespace v1
}  // namespace training
}  // namespace sagittarius
PROTOBUF_NAMESPACE_OPEN
template<> ::sagittarius::training::v1::StreamingTrainingRequest* Arena::CreateMaybeMessage<::sagittarius::training::v1::StreamingTrainingRequest>(Arena*);
template<> ::sagittarius::training::v1::TrainingData* Arena::CreateMaybeMessage<::sagittarius::training::v1::TrainingData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sagittarius {
namespace training {
namespace v1 {

// ===================================================================

class TrainingData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sagittarius.training.v1.TrainingData) */ {
 public:
  TrainingData();
  virtual ~TrainingData();

  TrainingData(const TrainingData& from);
  TrainingData(TrainingData&& from) noexcept
    : TrainingData() {
    *this = ::std::move(from);
  }

  inline TrainingData& operator=(const TrainingData& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrainingData& operator=(TrainingData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrainingData& default_instance();

  enum DataCase {
    kTranscriptIdentity = 3,
    kPayload = 7,
    DATA_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrainingData* internal_default_instance() {
    return reinterpret_cast<const TrainingData*>(
               &_TrainingData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TrainingData& a, TrainingData& b) {
    a.Swap(&b);
  }
  inline void Swap(TrainingData* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrainingData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrainingData* New() const final {
    return CreateMaybeMessage<TrainingData>(nullptr);
  }

  TrainingData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrainingData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrainingData& from);
  void MergeFrom(const TrainingData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrainingData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sagittarius.training.v1.TrainingData";
  }
  protected:
  explicit TrainingData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_training_2fv1_2ftraining_2eproto);
    return ::descriptor_table_training_2fv1_2ftraining_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMediaIdentityFieldNumber = 1,
    kLanguageCodeFieldNumber = 2,
    kFormatFieldNumber = 4,
    kHintsFieldNumber = 9,
    kPlayedTimeFieldNumber = 5,
    kTotalTimeFieldNumber = 6,
    kDelayFieldNumber = 8,
    kTranscriptIdentityFieldNumber = 3,
    kPayloadFieldNumber = 7,
  };
  // string media_identity = 1;
  void clear_media_identity();
  const std::string& media_identity() const;
  void set_media_identity(const std::string& value);
  void set_media_identity(std::string&& value);
  void set_media_identity(const char* value);
  void set_media_identity(const char* value, size_t size);
  std::string* mutable_media_identity();
  std::string* release_media_identity();
  void set_allocated_media_identity(std::string* media_identity);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_media_identity();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_media_identity(
      std::string* media_identity);
  private:
  const std::string& _internal_media_identity() const;
  void _internal_set_media_identity(const std::string& value);
  std::string* _internal_mutable_media_identity();
  public:

  // string language_code = 2;
  void clear_language_code();
  const std::string& language_code() const;
  void set_language_code(const std::string& value);
  void set_language_code(std::string&& value);
  void set_language_code(const char* value);
  void set_language_code(const char* value, size_t size);
  std::string* mutable_language_code();
  std::string* release_language_code();
  void set_allocated_language_code(std::string* language_code);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_language_code();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_language_code(
      std::string* language_code);
  private:
  const std::string& _internal_language_code() const;
  void _internal_set_language_code(const std::string& value);
  std::string* _internal_mutable_language_code();
  public:

  // string format = 4;
  void clear_format();
  const std::string& format() const;
  void set_format(const std::string& value);
  void set_format(std::string&& value);
  void set_format(const char* value);
  void set_format(const char* value, size_t size);
  std::string* mutable_format();
  std::string* release_format();
  void set_allocated_format(std::string* format);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_format();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_format(
      std::string* format);
  private:
  const std::string& _internal_format() const;
  void _internal_set_format(const std::string& value);
  std::string* _internal_mutable_format();
  public:

  // string hints = 9;
  void clear_hints();
  const std::string& hints() const;
  void set_hints(const std::string& value);
  void set_hints(std::string&& value);
  void set_hints(const char* value);
  void set_hints(const char* value, size_t size);
  std::string* mutable_hints();
  std::string* release_hints();
  void set_allocated_hints(std::string* hints);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_hints();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_hints(
      std::string* hints);
  private:
  const std::string& _internal_hints() const;
  void _internal_set_hints(const std::string& value);
  std::string* _internal_mutable_hints();
  public:

  // double played_time = 5;
  void clear_played_time();
  double played_time() const;
  void set_played_time(double value);
  private:
  double _internal_played_time() const;
  void _internal_set_played_time(double value);
  public:

  // double total_time = 6;
  void clear_total_time();
  double total_time() const;
  void set_total_time(double value);
  private:
  double _internal_total_time() const;
  void _internal_set_total_time(double value);
  public:

  // int64 delay = 8;
  void clear_delay();
  ::PROTOBUF_NAMESPACE_ID::int64 delay() const;
  void set_delay(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_delay() const;
  void _internal_set_delay(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // string transcript_identity = 3;
  private:
  bool _internal_has_transcript_identity() const;
  public:
  void clear_transcript_identity();
  const std::string& transcript_identity() const;
  void set_transcript_identity(const std::string& value);
  void set_transcript_identity(std::string&& value);
  void set_transcript_identity(const char* value);
  void set_transcript_identity(const char* value, size_t size);
  std::string* mutable_transcript_identity();
  std::string* release_transcript_identity();
  void set_allocated_transcript_identity(std::string* transcript_identity);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_transcript_identity();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_transcript_identity(
      std::string* transcript_identity);
  private:
  const std::string& _internal_transcript_identity() const;
  void _internal_set_transcript_identity(const std::string& value);
  std::string* _internal_mutable_transcript_identity();
  public:

  // bytes payload = 7;
  private:
  bool _internal_has_payload() const;
  public:
  void clear_payload();
  const std::string& payload() const;
  void set_payload(const std::string& value);
  void set_payload(std::string&& value);
  void set_payload(const char* value);
  void set_payload(const void* value, size_t size);
  std::string* mutable_payload();
  std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_payload();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_payload(
      std::string* payload);
  private:
  const std::string& _internal_payload() const;
  void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:sagittarius.training.v1.TrainingData)
 private:
  class _Internal;
  void set_has_transcript_identity();
  void set_has_payload();

  inline bool has_data() const;
  inline void clear_has_data();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr media_identity_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr format_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hints_;
  double played_time_;
  double total_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 delay_;
  union DataUnion {
    DataUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transcript_identity_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  } data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_training_2fv1_2ftraining_2eproto;
};
// -------------------------------------------------------------------

class StreamingTrainingRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sagittarius.training.v1.StreamingTrainingRequest) */ {
 public:
  StreamingTrainingRequest();
  virtual ~StreamingTrainingRequest();

  StreamingTrainingRequest(const StreamingTrainingRequest& from);
  StreamingTrainingRequest(StreamingTrainingRequest&& from) noexcept
    : StreamingTrainingRequest() {
    *this = ::std::move(from);
  }

  inline StreamingTrainingRequest& operator=(const StreamingTrainingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamingTrainingRequest& operator=(StreamingTrainingRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StreamingTrainingRequest& default_instance();

  enum StreamingRequestCase {
    kStreamingConfig = 1,
    kAudioContent = 2,
    STREAMING_REQUEST_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamingTrainingRequest* internal_default_instance() {
    return reinterpret_cast<const StreamingTrainingRequest*>(
               &_StreamingTrainingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StreamingTrainingRequest& a, StreamingTrainingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamingTrainingRequest* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamingTrainingRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamingTrainingRequest* New() const final {
    return CreateMaybeMessage<StreamingTrainingRequest>(nullptr);
  }

  StreamingTrainingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamingTrainingRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamingTrainingRequest& from);
  void MergeFrom(const StreamingTrainingRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamingTrainingRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sagittarius.training.v1.StreamingTrainingRequest";
  }
  protected:
  explicit StreamingTrainingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_training_2fv1_2ftraining_2eproto);
    return ::descriptor_table_training_2fv1_2ftraining_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTranscriptFieldNumber = 3,
    kMediaIdentityFieldNumber = 4,
    kStreamingConfigFieldNumber = 1,
    kAudioContentFieldNumber = 2,
  };
  // string transcript = 3;
  void clear_transcript();
  const std::string& transcript() const;
  void set_transcript(const std::string& value);
  void set_transcript(std::string&& value);
  void set_transcript(const char* value);
  void set_transcript(const char* value, size_t size);
  std::string* mutable_transcript();
  std::string* release_transcript();
  void set_allocated_transcript(std::string* transcript);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_transcript();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_transcript(
      std::string* transcript);
  private:
  const std::string& _internal_transcript() const;
  void _internal_set_transcript(const std::string& value);
  std::string* _internal_mutable_transcript();
  public:

  // string media_identity = 4;
  void clear_media_identity();
  const std::string& media_identity() const;
  void set_media_identity(const std::string& value);
  void set_media_identity(std::string&& value);
  void set_media_identity(const char* value);
  void set_media_identity(const char* value, size_t size);
  std::string* mutable_media_identity();
  std::string* release_media_identity();
  void set_allocated_media_identity(std::string* media_identity);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_media_identity();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_media_identity(
      std::string* media_identity);
  private:
  const std::string& _internal_media_identity() const;
  void _internal_set_media_identity(const std::string& value);
  std::string* _internal_mutable_media_identity();
  public:

  // .google.cloud.speech.v1.RecognitionConfig streaming_config = 1;
  bool has_streaming_config() const;
  private:
  bool _internal_has_streaming_config() const;
  public:
  void clear_streaming_config();
  const ::google::cloud::speech::v1::RecognitionConfig& streaming_config() const;
  ::google::cloud::speech::v1::RecognitionConfig* release_streaming_config();
  ::google::cloud::speech::v1::RecognitionConfig* mutable_streaming_config();
  void set_allocated_streaming_config(::google::cloud::speech::v1::RecognitionConfig* streaming_config);
  private:
  const ::google::cloud::speech::v1::RecognitionConfig& _internal_streaming_config() const;
  ::google::cloud::speech::v1::RecognitionConfig* _internal_mutable_streaming_config();
  public:
  void unsafe_arena_set_allocated_streaming_config(
      ::google::cloud::speech::v1::RecognitionConfig* streaming_config);
  ::google::cloud::speech::v1::RecognitionConfig* unsafe_arena_release_streaming_config();

  // bytes audio_content = 2;
  private:
  bool _internal_has_audio_content() const;
  public:
  void clear_audio_content();
  const std::string& audio_content() const;
  void set_audio_content(const std::string& value);
  void set_audio_content(std::string&& value);
  void set_audio_content(const char* value);
  void set_audio_content(const void* value, size_t size);
  std::string* mutable_audio_content();
  std::string* release_audio_content();
  void set_allocated_audio_content(std::string* audio_content);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_audio_content();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_audio_content(
      std::string* audio_content);
  private:
  const std::string& _internal_audio_content() const;
  void _internal_set_audio_content(const std::string& value);
  std::string* _internal_mutable_audio_content();
  public:

  void clear_streaming_request();
  StreamingRequestCase streaming_request_case() const;
  // @@protoc_insertion_point(class_scope:sagittarius.training.v1.StreamingTrainingRequest)
 private:
  class _Internal;
  void set_has_streaming_config();
  void set_has_audio_content();

  inline bool has_streaming_request() const;
  inline void clear_has_streaming_request();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transcript_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr media_identity_;
  union StreamingRequestUnion {
    StreamingRequestUnion() {}
    ::google::cloud::speech::v1::RecognitionConfig* streaming_config_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr audio_content_;
  } streaming_request_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_training_2fv1_2ftraining_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TrainingData

// string media_identity = 1;
inline void TrainingData::clear_media_identity() {
  media_identity_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& TrainingData::media_identity() const {
  // @@protoc_insertion_point(field_get:sagittarius.training.v1.TrainingData.media_identity)
  return _internal_media_identity();
}
inline void TrainingData::set_media_identity(const std::string& value) {
  _internal_set_media_identity(value);
  // @@protoc_insertion_point(field_set:sagittarius.training.v1.TrainingData.media_identity)
}
inline std::string* TrainingData::mutable_media_identity() {
  // @@protoc_insertion_point(field_mutable:sagittarius.training.v1.TrainingData.media_identity)
  return _internal_mutable_media_identity();
}
inline const std::string& TrainingData::_internal_media_identity() const {
  return media_identity_.Get();
}
inline void TrainingData::_internal_set_media_identity(const std::string& value) {
  
  media_identity_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void TrainingData::set_media_identity(std::string&& value) {
  
  media_identity_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:sagittarius.training.v1.TrainingData.media_identity)
}
inline void TrainingData::set_media_identity(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  media_identity_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:sagittarius.training.v1.TrainingData.media_identity)
}
inline void TrainingData::set_media_identity(const char* value,
    size_t size) {
  
  media_identity_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:sagittarius.training.v1.TrainingData.media_identity)
}
inline std::string* TrainingData::_internal_mutable_media_identity() {
  
  return media_identity_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* TrainingData::release_media_identity() {
  // @@protoc_insertion_point(field_release:sagittarius.training.v1.TrainingData.media_identity)
  
  return media_identity_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void TrainingData::set_allocated_media_identity(std::string* media_identity) {
  if (media_identity != nullptr) {
    
  } else {
    
  }
  media_identity_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), media_identity,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:sagittarius.training.v1.TrainingData.media_identity)
}
inline std::string* TrainingData::unsafe_arena_release_media_identity() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sagittarius.training.v1.TrainingData.media_identity)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return media_identity_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void TrainingData::unsafe_arena_set_allocated_media_identity(
    std::string* media_identity) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (media_identity != nullptr) {
    
  } else {
    
  }
  media_identity_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      media_identity, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sagittarius.training.v1.TrainingData.media_identity)
}

// string language_code = 2;
inline void TrainingData::clear_language_code() {
  language_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& TrainingData::language_code() const {
  // @@protoc_insertion_point(field_get:sagittarius.training.v1.TrainingData.language_code)
  return _internal_language_code();
}
inline void TrainingData::set_language_code(const std::string& value) {
  _internal_set_language_code(value);
  // @@protoc_insertion_point(field_set:sagittarius.training.v1.TrainingData.language_code)
}
inline std::string* TrainingData::mutable_language_code() {
  // @@protoc_insertion_point(field_mutable:sagittarius.training.v1.TrainingData.language_code)
  return _internal_mutable_language_code();
}
inline const std::string& TrainingData::_internal_language_code() const {
  return language_code_.Get();
}
inline void TrainingData::_internal_set_language_code(const std::string& value) {
  
  language_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void TrainingData::set_language_code(std::string&& value) {
  
  language_code_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:sagittarius.training.v1.TrainingData.language_code)
}
inline void TrainingData::set_language_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  language_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:sagittarius.training.v1.TrainingData.language_code)
}
inline void TrainingData::set_language_code(const char* value,
    size_t size) {
  
  language_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:sagittarius.training.v1.TrainingData.language_code)
}
inline std::string* TrainingData::_internal_mutable_language_code() {
  
  return language_code_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* TrainingData::release_language_code() {
  // @@protoc_insertion_point(field_release:sagittarius.training.v1.TrainingData.language_code)
  
  return language_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void TrainingData::set_allocated_language_code(std::string* language_code) {
  if (language_code != nullptr) {
    
  } else {
    
  }
  language_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language_code,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:sagittarius.training.v1.TrainingData.language_code)
}
inline std::string* TrainingData::unsafe_arena_release_language_code() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sagittarius.training.v1.TrainingData.language_code)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return language_code_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void TrainingData::unsafe_arena_set_allocated_language_code(
    std::string* language_code) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (language_code != nullptr) {
    
  } else {
    
  }
  language_code_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      language_code, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sagittarius.training.v1.TrainingData.language_code)
}

// string format = 4;
inline void TrainingData::clear_format() {
  format_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& TrainingData::format() const {
  // @@protoc_insertion_point(field_get:sagittarius.training.v1.TrainingData.format)
  return _internal_format();
}
inline void TrainingData::set_format(const std::string& value) {
  _internal_set_format(value);
  // @@protoc_insertion_point(field_set:sagittarius.training.v1.TrainingData.format)
}
inline std::string* TrainingData::mutable_format() {
  // @@protoc_insertion_point(field_mutable:sagittarius.training.v1.TrainingData.format)
  return _internal_mutable_format();
}
inline const std::string& TrainingData::_internal_format() const {
  return format_.Get();
}
inline void TrainingData::_internal_set_format(const std::string& value) {
  
  format_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void TrainingData::set_format(std::string&& value) {
  
  format_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:sagittarius.training.v1.TrainingData.format)
}
inline void TrainingData::set_format(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  format_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:sagittarius.training.v1.TrainingData.format)
}
inline void TrainingData::set_format(const char* value,
    size_t size) {
  
  format_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:sagittarius.training.v1.TrainingData.format)
}
inline std::string* TrainingData::_internal_mutable_format() {
  
  return format_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* TrainingData::release_format() {
  // @@protoc_insertion_point(field_release:sagittarius.training.v1.TrainingData.format)
  
  return format_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void TrainingData::set_allocated_format(std::string* format) {
  if (format != nullptr) {
    
  } else {
    
  }
  format_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), format,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:sagittarius.training.v1.TrainingData.format)
}
inline std::string* TrainingData::unsafe_arena_release_format() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sagittarius.training.v1.TrainingData.format)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return format_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void TrainingData::unsafe_arena_set_allocated_format(
    std::string* format) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (format != nullptr) {
    
  } else {
    
  }
  format_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      format, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sagittarius.training.v1.TrainingData.format)
}

// double played_time = 5;
inline void TrainingData::clear_played_time() {
  played_time_ = 0;
}
inline double TrainingData::_internal_played_time() const {
  return played_time_;
}
inline double TrainingData::played_time() const {
  // @@protoc_insertion_point(field_get:sagittarius.training.v1.TrainingData.played_time)
  return _internal_played_time();
}
inline void TrainingData::_internal_set_played_time(double value) {
  
  played_time_ = value;
}
inline void TrainingData::set_played_time(double value) {
  _internal_set_played_time(value);
  // @@protoc_insertion_point(field_set:sagittarius.training.v1.TrainingData.played_time)
}

// double total_time = 6;
inline void TrainingData::clear_total_time() {
  total_time_ = 0;
}
inline double TrainingData::_internal_total_time() const {
  return total_time_;
}
inline double TrainingData::total_time() const {
  // @@protoc_insertion_point(field_get:sagittarius.training.v1.TrainingData.total_time)
  return _internal_total_time();
}
inline void TrainingData::_internal_set_total_time(double value) {
  
  total_time_ = value;
}
inline void TrainingData::set_total_time(double value) {
  _internal_set_total_time(value);
  // @@protoc_insertion_point(field_set:sagittarius.training.v1.TrainingData.total_time)
}

// int64 delay = 8;
inline void TrainingData::clear_delay() {
  delay_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TrainingData::_internal_delay() const {
  return delay_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TrainingData::delay() const {
  // @@protoc_insertion_point(field_get:sagittarius.training.v1.TrainingData.delay)
  return _internal_delay();
}
inline void TrainingData::_internal_set_delay(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  delay_ = value;
}
inline void TrainingData::set_delay(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_delay(value);
  // @@protoc_insertion_point(field_set:sagittarius.training.v1.TrainingData.delay)
}

// string hints = 9;
inline void TrainingData::clear_hints() {
  hints_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& TrainingData::hints() const {
  // @@protoc_insertion_point(field_get:sagittarius.training.v1.TrainingData.hints)
  return _internal_hints();
}
inline void TrainingData::set_hints(const std::string& value) {
  _internal_set_hints(value);
  // @@protoc_insertion_point(field_set:sagittarius.training.v1.TrainingData.hints)
}
inline std::string* TrainingData::mutable_hints() {
  // @@protoc_insertion_point(field_mutable:sagittarius.training.v1.TrainingData.hints)
  return _internal_mutable_hints();
}
inline const std::string& TrainingData::_internal_hints() const {
  return hints_.Get();
}
inline void TrainingData::_internal_set_hints(const std::string& value) {
  
  hints_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void TrainingData::set_hints(std::string&& value) {
  
  hints_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:sagittarius.training.v1.TrainingData.hints)
}
inline void TrainingData::set_hints(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hints_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:sagittarius.training.v1.TrainingData.hints)
}
inline void TrainingData::set_hints(const char* value,
    size_t size) {
  
  hints_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:sagittarius.training.v1.TrainingData.hints)
}
inline std::string* TrainingData::_internal_mutable_hints() {
  
  return hints_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* TrainingData::release_hints() {
  // @@protoc_insertion_point(field_release:sagittarius.training.v1.TrainingData.hints)
  
  return hints_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void TrainingData::set_allocated_hints(std::string* hints) {
  if (hints != nullptr) {
    
  } else {
    
  }
  hints_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hints,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:sagittarius.training.v1.TrainingData.hints)
}
inline std::string* TrainingData::unsafe_arena_release_hints() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sagittarius.training.v1.TrainingData.hints)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return hints_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void TrainingData::unsafe_arena_set_allocated_hints(
    std::string* hints) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (hints != nullptr) {
    
  } else {
    
  }
  hints_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      hints, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sagittarius.training.v1.TrainingData.hints)
}

// string transcript_identity = 3;
inline bool TrainingData::_internal_has_transcript_identity() const {
  return data_case() == kTranscriptIdentity;
}
inline void TrainingData::set_has_transcript_identity() {
  _oneof_case_[0] = kTranscriptIdentity;
}
inline void TrainingData::clear_transcript_identity() {
  if (_internal_has_transcript_identity()) {
    data_.transcript_identity_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
    clear_has_data();
  }
}
inline const std::string& TrainingData::transcript_identity() const {
  // @@protoc_insertion_point(field_get:sagittarius.training.v1.TrainingData.transcript_identity)
  return _internal_transcript_identity();
}
inline void TrainingData::set_transcript_identity(const std::string& value) {
  _internal_set_transcript_identity(value);
  // @@protoc_insertion_point(field_set:sagittarius.training.v1.TrainingData.transcript_identity)
}
inline std::string* TrainingData::mutable_transcript_identity() {
  // @@protoc_insertion_point(field_mutable:sagittarius.training.v1.TrainingData.transcript_identity)
  return _internal_mutable_transcript_identity();
}
inline const std::string& TrainingData::_internal_transcript_identity() const {
  if (_internal_has_transcript_identity()) {
    return data_.transcript_identity_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TrainingData::_internal_set_transcript_identity(const std::string& value) {
  if (!_internal_has_transcript_identity()) {
    clear_data();
    set_has_transcript_identity();
    data_.transcript_identity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.transcript_identity_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaNoVirtual());
}
inline void TrainingData::set_transcript_identity(std::string&& value) {
  // @@protoc_insertion_point(field_set:sagittarius.training.v1.TrainingData.transcript_identity)
  if (!_internal_has_transcript_identity()) {
    clear_data();
    set_has_transcript_identity();
    data_.transcript_identity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.transcript_identity_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:sagittarius.training.v1.TrainingData.transcript_identity)
}
inline void TrainingData::set_transcript_identity(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_transcript_identity()) {
    clear_data();
    set_has_transcript_identity();
    data_.transcript_identity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.transcript_identity_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:sagittarius.training.v1.TrainingData.transcript_identity)
}
inline void TrainingData::set_transcript_identity(const char* value,
                             size_t size) {
  if (!_internal_has_transcript_identity()) {
    clear_data();
    set_has_transcript_identity();
    data_.transcript_identity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.transcript_identity_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:sagittarius.training.v1.TrainingData.transcript_identity)
}
inline std::string* TrainingData::_internal_mutable_transcript_identity() {
  if (!_internal_has_transcript_identity()) {
    clear_data();
    set_has_transcript_identity();
    data_.transcript_identity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return data_.transcript_identity_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline std::string* TrainingData::release_transcript_identity() {
  // @@protoc_insertion_point(field_release:sagittarius.training.v1.TrainingData.transcript_identity)
  if (_internal_has_transcript_identity()) {
    clear_has_data();
    return data_.transcript_identity_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
  } else {
    return nullptr;
  }
}
inline void TrainingData::set_allocated_transcript_identity(std::string* transcript_identity) {
  if (has_data()) {
    clear_data();
  }
  if (transcript_identity != nullptr) {
    set_has_transcript_identity();
    data_.transcript_identity_.UnsafeSetDefault(transcript_identity);
  }
  // @@protoc_insertion_point(field_set_allocated:sagittarius.training.v1.TrainingData.transcript_identity)
}
inline std::string* TrainingData::unsafe_arena_release_transcript_identity() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sagittarius.training.v1.TrainingData.transcript_identity)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (_internal_has_transcript_identity()) {
    clear_has_data();
    return data_.transcript_identity_.UnsafeArenaRelease(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  } else {
    return nullptr;
  }
}
inline void TrainingData::unsafe_arena_set_allocated_transcript_identity(std::string* transcript_identity) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (!_internal_has_transcript_identity()) {
    data_.transcript_identity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  clear_data();
  if (transcript_identity) {
    set_has_transcript_identity();
    data_.transcript_identity_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transcript_identity, GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sagittarius.training.v1.TrainingData.transcript_identity)
}

// bytes payload = 7;
inline bool TrainingData::_internal_has_payload() const {
  return data_case() == kPayload;
}
inline void TrainingData::set_has_payload() {
  _oneof_case_[0] = kPayload;
}
inline void TrainingData::clear_payload() {
  if (_internal_has_payload()) {
    data_.payload_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
    clear_has_data();
  }
}
inline const std::string& TrainingData::payload() const {
  // @@protoc_insertion_point(field_get:sagittarius.training.v1.TrainingData.payload)
  return _internal_payload();
}
inline void TrainingData::set_payload(const std::string& value) {
  _internal_set_payload(value);
  // @@protoc_insertion_point(field_set:sagittarius.training.v1.TrainingData.payload)
}
inline std::string* TrainingData::mutable_payload() {
  // @@protoc_insertion_point(field_mutable:sagittarius.training.v1.TrainingData.payload)
  return _internal_mutable_payload();
}
inline const std::string& TrainingData::_internal_payload() const {
  if (_internal_has_payload()) {
    return data_.payload_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TrainingData::_internal_set_payload(const std::string& value) {
  if (!_internal_has_payload()) {
    clear_data();
    set_has_payload();
    data_.payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaNoVirtual());
}
inline void TrainingData::set_payload(std::string&& value) {
  // @@protoc_insertion_point(field_set:sagittarius.training.v1.TrainingData.payload)
  if (!_internal_has_payload()) {
    clear_data();
    set_has_payload();
    data_.payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.payload_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:sagittarius.training.v1.TrainingData.payload)
}
inline void TrainingData::set_payload(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_payload()) {
    clear_data();
    set_has_payload();
    data_.payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:sagittarius.training.v1.TrainingData.payload)
}
inline void TrainingData::set_payload(const void* value,
                             size_t size) {
  if (!_internal_has_payload()) {
    clear_data();
    set_has_payload();
    data_.payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.payload_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:sagittarius.training.v1.TrainingData.payload)
}
inline std::string* TrainingData::_internal_mutable_payload() {
  if (!_internal_has_payload()) {
    clear_data();
    set_has_payload();
    data_.payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return data_.payload_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline std::string* TrainingData::release_payload() {
  // @@protoc_insertion_point(field_release:sagittarius.training.v1.TrainingData.payload)
  if (_internal_has_payload()) {
    clear_has_data();
    return data_.payload_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
  } else {
    return nullptr;
  }
}
inline void TrainingData::set_allocated_payload(std::string* payload) {
  if (has_data()) {
    clear_data();
  }
  if (payload != nullptr) {
    set_has_payload();
    data_.payload_.UnsafeSetDefault(payload);
  }
  // @@protoc_insertion_point(field_set_allocated:sagittarius.training.v1.TrainingData.payload)
}
inline std::string* TrainingData::unsafe_arena_release_payload() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sagittarius.training.v1.TrainingData.payload)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (_internal_has_payload()) {
    clear_has_data();
    return data_.payload_.UnsafeArenaRelease(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  } else {
    return nullptr;
  }
}
inline void TrainingData::unsafe_arena_set_allocated_payload(std::string* payload) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (!_internal_has_payload()) {
    data_.payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  clear_data();
  if (payload) {
    set_has_payload();
    data_.payload_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload, GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sagittarius.training.v1.TrainingData.payload)
}

inline bool TrainingData::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void TrainingData::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline TrainingData::DataCase TrainingData::data_case() const {
  return TrainingData::DataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// StreamingTrainingRequest

// .google.cloud.speech.v1.RecognitionConfig streaming_config = 1;
inline bool StreamingTrainingRequest::_internal_has_streaming_config() const {
  return streaming_request_case() == kStreamingConfig;
}
inline bool StreamingTrainingRequest::has_streaming_config() const {
  return _internal_has_streaming_config();
}
inline void StreamingTrainingRequest::set_has_streaming_config() {
  _oneof_case_[0] = kStreamingConfig;
}
inline ::google::cloud::speech::v1::RecognitionConfig* StreamingTrainingRequest::release_streaming_config() {
  // @@protoc_insertion_point(field_release:sagittarius.training.v1.StreamingTrainingRequest.streaming_config)
  if (_internal_has_streaming_config()) {
    clear_has_streaming_request();
      ::google::cloud::speech::v1::RecognitionConfig* temp = streaming_request_.streaming_config_;
    if (GetArenaNoVirtual() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    streaming_request_.streaming_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::cloud::speech::v1::RecognitionConfig& StreamingTrainingRequest::_internal_streaming_config() const {
  return _internal_has_streaming_config()
      ? *streaming_request_.streaming_config_
      : *reinterpret_cast< ::google::cloud::speech::v1::RecognitionConfig*>(&::google::cloud::speech::v1::_RecognitionConfig_default_instance_);
}
inline const ::google::cloud::speech::v1::RecognitionConfig& StreamingTrainingRequest::streaming_config() const {
  // @@protoc_insertion_point(field_get:sagittarius.training.v1.StreamingTrainingRequest.streaming_config)
  return _internal_streaming_config();
}
inline ::google::cloud::speech::v1::RecognitionConfig* StreamingTrainingRequest::unsafe_arena_release_streaming_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sagittarius.training.v1.StreamingTrainingRequest.streaming_config)
  if (_internal_has_streaming_config()) {
    clear_has_streaming_request();
    ::google::cloud::speech::v1::RecognitionConfig* temp = streaming_request_.streaming_config_;
    streaming_request_.streaming_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StreamingTrainingRequest::unsafe_arena_set_allocated_streaming_config(::google::cloud::speech::v1::RecognitionConfig* streaming_config) {
  clear_streaming_request();
  if (streaming_config) {
    set_has_streaming_config();
    streaming_request_.streaming_config_ = streaming_config;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sagittarius.training.v1.StreamingTrainingRequest.streaming_config)
}
inline ::google::cloud::speech::v1::RecognitionConfig* StreamingTrainingRequest::_internal_mutable_streaming_config() {
  if (!_internal_has_streaming_config()) {
    clear_streaming_request();
    set_has_streaming_config();
    streaming_request_.streaming_config_ = CreateMaybeMessage< ::google::cloud::speech::v1::RecognitionConfig >(
        GetArenaNoVirtual());
  }
  return streaming_request_.streaming_config_;
}
inline ::google::cloud::speech::v1::RecognitionConfig* StreamingTrainingRequest::mutable_streaming_config() {
  // @@protoc_insertion_point(field_mutable:sagittarius.training.v1.StreamingTrainingRequest.streaming_config)
  return _internal_mutable_streaming_config();
}

// bytes audio_content = 2;
inline bool StreamingTrainingRequest::_internal_has_audio_content() const {
  return streaming_request_case() == kAudioContent;
}
inline void StreamingTrainingRequest::set_has_audio_content() {
  _oneof_case_[0] = kAudioContent;
}
inline void StreamingTrainingRequest::clear_audio_content() {
  if (_internal_has_audio_content()) {
    streaming_request_.audio_content_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
    clear_has_streaming_request();
  }
}
inline const std::string& StreamingTrainingRequest::audio_content() const {
  // @@protoc_insertion_point(field_get:sagittarius.training.v1.StreamingTrainingRequest.audio_content)
  return _internal_audio_content();
}
inline void StreamingTrainingRequest::set_audio_content(const std::string& value) {
  _internal_set_audio_content(value);
  // @@protoc_insertion_point(field_set:sagittarius.training.v1.StreamingTrainingRequest.audio_content)
}
inline std::string* StreamingTrainingRequest::mutable_audio_content() {
  // @@protoc_insertion_point(field_mutable:sagittarius.training.v1.StreamingTrainingRequest.audio_content)
  return _internal_mutable_audio_content();
}
inline const std::string& StreamingTrainingRequest::_internal_audio_content() const {
  if (_internal_has_audio_content()) {
    return streaming_request_.audio_content_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void StreamingTrainingRequest::_internal_set_audio_content(const std::string& value) {
  if (!_internal_has_audio_content()) {
    clear_streaming_request();
    set_has_audio_content();
    streaming_request_.audio_content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  streaming_request_.audio_content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaNoVirtual());
}
inline void StreamingTrainingRequest::set_audio_content(std::string&& value) {
  // @@protoc_insertion_point(field_set:sagittarius.training.v1.StreamingTrainingRequest.audio_content)
  if (!_internal_has_audio_content()) {
    clear_streaming_request();
    set_has_audio_content();
    streaming_request_.audio_content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  streaming_request_.audio_content_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:sagittarius.training.v1.StreamingTrainingRequest.audio_content)
}
inline void StreamingTrainingRequest::set_audio_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_audio_content()) {
    clear_streaming_request();
    set_has_audio_content();
    streaming_request_.audio_content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  streaming_request_.audio_content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:sagittarius.training.v1.StreamingTrainingRequest.audio_content)
}
inline void StreamingTrainingRequest::set_audio_content(const void* value,
                             size_t size) {
  if (!_internal_has_audio_content()) {
    clear_streaming_request();
    set_has_audio_content();
    streaming_request_.audio_content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  streaming_request_.audio_content_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:sagittarius.training.v1.StreamingTrainingRequest.audio_content)
}
inline std::string* StreamingTrainingRequest::_internal_mutable_audio_content() {
  if (!_internal_has_audio_content()) {
    clear_streaming_request();
    set_has_audio_content();
    streaming_request_.audio_content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return streaming_request_.audio_content_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline std::string* StreamingTrainingRequest::release_audio_content() {
  // @@protoc_insertion_point(field_release:sagittarius.training.v1.StreamingTrainingRequest.audio_content)
  if (_internal_has_audio_content()) {
    clear_has_streaming_request();
    return streaming_request_.audio_content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
  } else {
    return nullptr;
  }
}
inline void StreamingTrainingRequest::set_allocated_audio_content(std::string* audio_content) {
  if (has_streaming_request()) {
    clear_streaming_request();
  }
  if (audio_content != nullptr) {
    set_has_audio_content();
    streaming_request_.audio_content_.UnsafeSetDefault(audio_content);
  }
  // @@protoc_insertion_point(field_set_allocated:sagittarius.training.v1.StreamingTrainingRequest.audio_content)
}
inline std::string* StreamingTrainingRequest::unsafe_arena_release_audio_content() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sagittarius.training.v1.StreamingTrainingRequest.audio_content)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (_internal_has_audio_content()) {
    clear_has_streaming_request();
    return streaming_request_.audio_content_.UnsafeArenaRelease(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  } else {
    return nullptr;
  }
}
inline void StreamingTrainingRequest::unsafe_arena_set_allocated_audio_content(std::string* audio_content) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (!_internal_has_audio_content()) {
    streaming_request_.audio_content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  clear_streaming_request();
  if (audio_content) {
    set_has_audio_content();
    streaming_request_.audio_content_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), audio_content, GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sagittarius.training.v1.StreamingTrainingRequest.audio_content)
}

// string transcript = 3;
inline void StreamingTrainingRequest::clear_transcript() {
  transcript_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& StreamingTrainingRequest::transcript() const {
  // @@protoc_insertion_point(field_get:sagittarius.training.v1.StreamingTrainingRequest.transcript)
  return _internal_transcript();
}
inline void StreamingTrainingRequest::set_transcript(const std::string& value) {
  _internal_set_transcript(value);
  // @@protoc_insertion_point(field_set:sagittarius.training.v1.StreamingTrainingRequest.transcript)
}
inline std::string* StreamingTrainingRequest::mutable_transcript() {
  // @@protoc_insertion_point(field_mutable:sagittarius.training.v1.StreamingTrainingRequest.transcript)
  return _internal_mutable_transcript();
}
inline const std::string& StreamingTrainingRequest::_internal_transcript() const {
  return transcript_.Get();
}
inline void StreamingTrainingRequest::_internal_set_transcript(const std::string& value) {
  
  transcript_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void StreamingTrainingRequest::set_transcript(std::string&& value) {
  
  transcript_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:sagittarius.training.v1.StreamingTrainingRequest.transcript)
}
inline void StreamingTrainingRequest::set_transcript(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  transcript_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:sagittarius.training.v1.StreamingTrainingRequest.transcript)
}
inline void StreamingTrainingRequest::set_transcript(const char* value,
    size_t size) {
  
  transcript_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:sagittarius.training.v1.StreamingTrainingRequest.transcript)
}
inline std::string* StreamingTrainingRequest::_internal_mutable_transcript() {
  
  return transcript_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* StreamingTrainingRequest::release_transcript() {
  // @@protoc_insertion_point(field_release:sagittarius.training.v1.StreamingTrainingRequest.transcript)
  
  return transcript_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void StreamingTrainingRequest::set_allocated_transcript(std::string* transcript) {
  if (transcript != nullptr) {
    
  } else {
    
  }
  transcript_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transcript,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:sagittarius.training.v1.StreamingTrainingRequest.transcript)
}
inline std::string* StreamingTrainingRequest::unsafe_arena_release_transcript() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sagittarius.training.v1.StreamingTrainingRequest.transcript)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return transcript_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void StreamingTrainingRequest::unsafe_arena_set_allocated_transcript(
    std::string* transcript) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (transcript != nullptr) {
    
  } else {
    
  }
  transcript_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      transcript, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sagittarius.training.v1.StreamingTrainingRequest.transcript)
}

// string media_identity = 4;
inline void StreamingTrainingRequest::clear_media_identity() {
  media_identity_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& StreamingTrainingRequest::media_identity() const {
  // @@protoc_insertion_point(field_get:sagittarius.training.v1.StreamingTrainingRequest.media_identity)
  return _internal_media_identity();
}
inline void StreamingTrainingRequest::set_media_identity(const std::string& value) {
  _internal_set_media_identity(value);
  // @@protoc_insertion_point(field_set:sagittarius.training.v1.StreamingTrainingRequest.media_identity)
}
inline std::string* StreamingTrainingRequest::mutable_media_identity() {
  // @@protoc_insertion_point(field_mutable:sagittarius.training.v1.StreamingTrainingRequest.media_identity)
  return _internal_mutable_media_identity();
}
inline const std::string& StreamingTrainingRequest::_internal_media_identity() const {
  return media_identity_.Get();
}
inline void StreamingTrainingRequest::_internal_set_media_identity(const std::string& value) {
  
  media_identity_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void StreamingTrainingRequest::set_media_identity(std::string&& value) {
  
  media_identity_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:sagittarius.training.v1.StreamingTrainingRequest.media_identity)
}
inline void StreamingTrainingRequest::set_media_identity(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  media_identity_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:sagittarius.training.v1.StreamingTrainingRequest.media_identity)
}
inline void StreamingTrainingRequest::set_media_identity(const char* value,
    size_t size) {
  
  media_identity_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:sagittarius.training.v1.StreamingTrainingRequest.media_identity)
}
inline std::string* StreamingTrainingRequest::_internal_mutable_media_identity() {
  
  return media_identity_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* StreamingTrainingRequest::release_media_identity() {
  // @@protoc_insertion_point(field_release:sagittarius.training.v1.StreamingTrainingRequest.media_identity)
  
  return media_identity_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void StreamingTrainingRequest::set_allocated_media_identity(std::string* media_identity) {
  if (media_identity != nullptr) {
    
  } else {
    
  }
  media_identity_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), media_identity,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:sagittarius.training.v1.StreamingTrainingRequest.media_identity)
}
inline std::string* StreamingTrainingRequest::unsafe_arena_release_media_identity() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sagittarius.training.v1.StreamingTrainingRequest.media_identity)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return media_identity_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void StreamingTrainingRequest::unsafe_arena_set_allocated_media_identity(
    std::string* media_identity) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (media_identity != nullptr) {
    
  } else {
    
  }
  media_identity_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      media_identity, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sagittarius.training.v1.StreamingTrainingRequest.media_identity)
}

inline bool StreamingTrainingRequest::has_streaming_request() const {
  return streaming_request_case() != STREAMING_REQUEST_NOT_SET;
}
inline void StreamingTrainingRequest::clear_has_streaming_request() {
  _oneof_case_[0] = STREAMING_REQUEST_NOT_SET;
}
inline StreamingTrainingRequest::StreamingRequestCase StreamingTrainingRequest::streaming_request_case() const {
  return StreamingTrainingRequest::StreamingRequestCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace training
}  // namespace sagittarius

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_training_2fv1_2ftraining_2eproto
