// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: training/v1/training.proto

#include "training/v1/training.pb.h"
#include "training/v1/training.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace sagittarius {
namespace training {
namespace v1 {

static const char* Trainng_method_names[] = {
  "/sagittarius.training.v1.Trainng/PushData",
  "/sagittarius.training.v1.Trainng/StreamingTraining",
};

std::unique_ptr< Trainng::Stub> Trainng::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Trainng::Stub> stub(new Trainng::Stub(channel));
  return stub;
}

Trainng::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_PushData_(Trainng_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StreamingTraining_(Trainng_method_names[1], ::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  {}

::grpc::Status Trainng::Stub::PushData(::grpc::ClientContext* context, const ::sagittarius::training::v1::TrainingData& request, ::google::rpc::Status* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PushData_, context, request, response);
}

void Trainng::Stub::experimental_async::PushData(::grpc::ClientContext* context, const ::sagittarius::training::v1::TrainingData* request, ::google::rpc::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PushData_, context, request, response, std::move(f));
}

void Trainng::Stub::experimental_async::PushData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::rpc::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PushData_, context, request, response, std::move(f));
}

void Trainng::Stub::experimental_async::PushData(::grpc::ClientContext* context, const ::sagittarius::training::v1::TrainingData* request, ::google::rpc::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PushData_, context, request, response, reactor);
}

void Trainng::Stub::experimental_async::PushData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::rpc::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PushData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::rpc::Status>* Trainng::Stub::AsyncPushDataRaw(::grpc::ClientContext* context, const ::sagittarius::training::v1::TrainingData& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::rpc::Status>::Create(channel_.get(), cq, rpcmethod_PushData_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::rpc::Status>* Trainng::Stub::PrepareAsyncPushDataRaw(::grpc::ClientContext* context, const ::sagittarius::training::v1::TrainingData& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::rpc::Status>::Create(channel_.get(), cq, rpcmethod_PushData_, context, request, false);
}

::grpc::ClientWriter< ::sagittarius::training::v1::StreamingTrainingRequest>* Trainng::Stub::StreamingTrainingRaw(::grpc::ClientContext* context, ::google::rpc::Status* response) {
  return ::grpc_impl::internal::ClientWriterFactory< ::sagittarius::training::v1::StreamingTrainingRequest>::Create(channel_.get(), rpcmethod_StreamingTraining_, context, response);
}

void Trainng::Stub::experimental_async::StreamingTraining(::grpc::ClientContext* context, ::google::rpc::Status* response, ::grpc::experimental::ClientWriteReactor< ::sagittarius::training::v1::StreamingTrainingRequest>* reactor) {
  ::grpc_impl::internal::ClientCallbackWriterFactory< ::sagittarius::training::v1::StreamingTrainingRequest>::Create(stub_->channel_.get(), stub_->rpcmethod_StreamingTraining_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::sagittarius::training::v1::StreamingTrainingRequest>* Trainng::Stub::AsyncStreamingTrainingRaw(::grpc::ClientContext* context, ::google::rpc::Status* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncWriterFactory< ::sagittarius::training::v1::StreamingTrainingRequest>::Create(channel_.get(), cq, rpcmethod_StreamingTraining_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::sagittarius::training::v1::StreamingTrainingRequest>* Trainng::Stub::PrepareAsyncStreamingTrainingRaw(::grpc::ClientContext* context, ::google::rpc::Status* response, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncWriterFactory< ::sagittarius::training::v1::StreamingTrainingRequest>::Create(channel_.get(), cq, rpcmethod_StreamingTraining_, context, response, false, nullptr);
}

Trainng::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Trainng_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Trainng::Service, ::sagittarius::training::v1::TrainingData, ::google::rpc::Status>(
          std::mem_fn(&Trainng::Service::PushData), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Trainng_method_names[1],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< Trainng::Service, ::sagittarius::training::v1::StreamingTrainingRequest, ::google::rpc::Status>(
          std::mem_fn(&Trainng::Service::StreamingTraining), this)));
}

Trainng::Service::~Service() {
}

::grpc::Status Trainng::Service::PushData(::grpc::ServerContext* context, const ::sagittarius::training::v1::TrainingData* request, ::google::rpc::Status* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Trainng::Service::StreamingTraining(::grpc::ServerContext* context, ::grpc::ServerReader< ::sagittarius::training::v1::StreamingTrainingRequest>* reader, ::google::rpc::Status* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace sagittarius
}  // namespace training
}  // namespace v1

