// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: translation/v1/translation.proto

#include "translation/v1/translation.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RecognitionConfig_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2frpc_2fstatus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Status_google_2frpc_2fstatus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_translation_2fv1_2ftranslation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DetectionPrediction_translation_2fv1_2ftranslation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_translation_2fv1_2ftranslation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StreamingTranslationRequestConfig_translation_2fv1_2ftranslation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_translation_2fv1_2ftranslation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StreamingTranslationResult_translation_2fv1_2ftranslation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_translation_2fv1_2ftranslation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StreamingTranslationTaskInfo_translation_2fv1_2ftranslation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_translation_2fv1_2ftranslation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TextTranslationResponse_Text_translation_2fv1_2ftranslation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_translation_2fv1_2ftranslation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TranscriptInfo_translation_2fv1_2ftranslation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_translation_2fv1_2ftranslation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TranscriptResponse_Cue_translation_2fv1_2ftranslation_2eproto;
namespace sagittarius {
namespace translation {
namespace v1 {
class MediaTranslationRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MediaTranslationRequest> _instance;
} _MediaTranslationRequest_default_instance_;
class MediaTranslationResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MediaTranslationResponse> _instance;
} _MediaTranslationResponse_default_instance_;
class TranscriptInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TranscriptInfo> _instance;
} _TranscriptInfo_default_instance_;
class DetectionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DetectionRequest> _instance;
} _DetectionRequest_default_instance_;
class DetectionResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DetectionResponse> _instance;
} _DetectionResponse_default_instance_;
class DetectionPredictionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DetectionPrediction> _instance;
} _DetectionPrediction_default_instance_;
class TranscriptRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TranscriptRequest> _instance;
} _TranscriptRequest_default_instance_;
class TranscriptResponse_CueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TranscriptResponse_Cue> _instance;
} _TranscriptResponse_Cue_default_instance_;
class TranscriptResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TranscriptResponse> _instance;
} _TranscriptResponse_default_instance_;
class StreamingTranslationRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StreamingTranslationRequest> _instance;
  const ::sagittarius::translation::v1::StreamingTranslationRequestConfig* streaming_config_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr audio_content_;
} _StreamingTranslationRequest_default_instance_;
class StreamingTranslationRequestConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StreamingTranslationRequestConfig> _instance;
} _StreamingTranslationRequestConfig_default_instance_;
class StreamingTranslationResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StreamingTranslationResponse> _instance;
  const ::sagittarius::translation::v1::StreamingTranslationResult* streaming_result_;
  const ::sagittarius::translation::v1::StreamingTranslationTaskInfo* taskinfo_;
  const ::sagittarius::translation::v1::TranscriptInfo* transcript_result_;
} _StreamingTranslationResponse_default_instance_;
class StreamingTranslationTaskRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StreamingTranslationTaskRequest> _instance;
} _StreamingTranslationTaskRequest_default_instance_;
class StreamingTranslationTaskResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StreamingTranslationTaskResponse> _instance;
  const ::sagittarius::translation::v1::StreamingTranslationTaskInfo* taskinfo_;
  const ::sagittarius::translation::v1::TranscriptInfo* transcriptinfo_;
} _StreamingTranslationTaskResponse_default_instance_;
class StreamingTranslationTaskInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StreamingTranslationTaskInfo> _instance;
} _StreamingTranslationTaskInfo_default_instance_;
class StreamingTranslationResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StreamingTranslationResult> _instance;
} _StreamingTranslationResult_default_instance_;
class TextTranslationRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TextTranslationRequest> _instance;
} _TextTranslationRequest_default_instance_;
class TextTranslationResponse_TextDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TextTranslationResponse_Text> _instance;
} _TextTranslationResponse_Text_default_instance_;
class TextTranslationResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TextTranslationResponse> _instance;
} _TextTranslationResponse_default_instance_;
class UserQuotaRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserQuotaRequest> _instance;
} _UserQuotaRequest_default_instance_;
class UserQuotaResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserQuotaResponse> _instance;
} _UserQuotaResponse_default_instance_;
}  // namespace v1
}  // namespace translation
}  // namespace sagittarius
static void InitDefaultsscc_info_DetectionPrediction_translation_2fv1_2ftranslation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sagittarius::translation::v1::_DetectionPrediction_default_instance_;
    new (ptr) ::sagittarius::translation::v1::DetectionPrediction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sagittarius::translation::v1::DetectionPrediction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DetectionPrediction_translation_2fv1_2ftranslation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DetectionPrediction_translation_2fv1_2ftranslation_2eproto}, {}};

static void InitDefaultsscc_info_DetectionRequest_translation_2fv1_2ftranslation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sagittarius::translation::v1::_DetectionRequest_default_instance_;
    new (ptr) ::sagittarius::translation::v1::DetectionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sagittarius::translation::v1::DetectionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DetectionRequest_translation_2fv1_2ftranslation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DetectionRequest_translation_2fv1_2ftranslation_2eproto}, {}};

static void InitDefaultsscc_info_DetectionResponse_translation_2fv1_2ftranslation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sagittarius::translation::v1::_DetectionResponse_default_instance_;
    new (ptr) ::sagittarius::translation::v1::DetectionResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sagittarius::translation::v1::DetectionResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DetectionResponse_translation_2fv1_2ftranslation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_DetectionResponse_translation_2fv1_2ftranslation_2eproto}, {
      &scc_info_DetectionPrediction_translation_2fv1_2ftranslation_2eproto.base,}};

static void InitDefaultsscc_info_MediaTranslationRequest_translation_2fv1_2ftranslation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sagittarius::translation::v1::_MediaTranslationRequest_default_instance_;
    new (ptr) ::sagittarius::translation::v1::MediaTranslationRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sagittarius::translation::v1::MediaTranslationRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MediaTranslationRequest_translation_2fv1_2ftranslation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MediaTranslationRequest_translation_2fv1_2ftranslation_2eproto}, {}};

static void InitDefaultsscc_info_MediaTranslationResponse_translation_2fv1_2ftranslation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sagittarius::translation::v1::_MediaTranslationResponse_default_instance_;
    new (ptr) ::sagittarius::translation::v1::MediaTranslationResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sagittarius::translation::v1::MediaTranslationResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MediaTranslationResponse_translation_2fv1_2ftranslation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_MediaTranslationResponse_translation_2fv1_2ftranslation_2eproto}, {
      &scc_info_Status_google_2frpc_2fstatus_2eproto.base,
      &scc_info_TranscriptInfo_translation_2fv1_2ftranslation_2eproto.base,}};

static void InitDefaultsscc_info_StreamingTranslationRequest_translation_2fv1_2ftranslation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sagittarius::translation::v1::_StreamingTranslationRequest_default_instance_;
    new (ptr) ::sagittarius::translation::v1::StreamingTranslationRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sagittarius::translation::v1::StreamingTranslationRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StreamingTranslationRequest_translation_2fv1_2ftranslation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_StreamingTranslationRequest_translation_2fv1_2ftranslation_2eproto}, {
      &scc_info_StreamingTranslationRequestConfig_translation_2fv1_2ftranslation_2eproto.base,}};

static void InitDefaultsscc_info_StreamingTranslationRequestConfig_translation_2fv1_2ftranslation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sagittarius::translation::v1::_StreamingTranslationRequestConfig_default_instance_;
    new (ptr) ::sagittarius::translation::v1::StreamingTranslationRequestConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sagittarius::translation::v1::StreamingTranslationRequestConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StreamingTranslationRequestConfig_translation_2fv1_2ftranslation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_StreamingTranslationRequestConfig_translation_2fv1_2ftranslation_2eproto}, {
      &scc_info_RecognitionConfig_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto.base,}};

static void InitDefaultsscc_info_StreamingTranslationResponse_translation_2fv1_2ftranslation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sagittarius::translation::v1::_StreamingTranslationResponse_default_instance_;
    new (ptr) ::sagittarius::translation::v1::StreamingTranslationResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sagittarius::translation::v1::StreamingTranslationResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_StreamingTranslationResponse_translation_2fv1_2ftranslation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_StreamingTranslationResponse_translation_2fv1_2ftranslation_2eproto}, {
      &scc_info_Status_google_2frpc_2fstatus_2eproto.base,
      &scc_info_StreamingTranslationResult_translation_2fv1_2ftranslation_2eproto.base,
      &scc_info_StreamingTranslationTaskInfo_translation_2fv1_2ftranslation_2eproto.base,
      &scc_info_TranscriptInfo_translation_2fv1_2ftranslation_2eproto.base,}};

static void InitDefaultsscc_info_StreamingTranslationResult_translation_2fv1_2ftranslation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sagittarius::translation::v1::_StreamingTranslationResult_default_instance_;
    new (ptr) ::sagittarius::translation::v1::StreamingTranslationResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sagittarius::translation::v1::StreamingTranslationResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StreamingTranslationResult_translation_2fv1_2ftranslation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_StreamingTranslationResult_translation_2fv1_2ftranslation_2eproto}, {}};

static void InitDefaultsscc_info_StreamingTranslationTaskInfo_translation_2fv1_2ftranslation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sagittarius::translation::v1::_StreamingTranslationTaskInfo_default_instance_;
    new (ptr) ::sagittarius::translation::v1::StreamingTranslationTaskInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sagittarius::translation::v1::StreamingTranslationTaskInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StreamingTranslationTaskInfo_translation_2fv1_2ftranslation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_StreamingTranslationTaskInfo_translation_2fv1_2ftranslation_2eproto}, {}};

static void InitDefaultsscc_info_StreamingTranslationTaskRequest_translation_2fv1_2ftranslation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sagittarius::translation::v1::_StreamingTranslationTaskRequest_default_instance_;
    new (ptr) ::sagittarius::translation::v1::StreamingTranslationTaskRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sagittarius::translation::v1::StreamingTranslationTaskRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StreamingTranslationTaskRequest_translation_2fv1_2ftranslation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_StreamingTranslationTaskRequest_translation_2fv1_2ftranslation_2eproto}, {}};

static void InitDefaultsscc_info_StreamingTranslationTaskResponse_translation_2fv1_2ftranslation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sagittarius::translation::v1::_StreamingTranslationTaskResponse_default_instance_;
    new (ptr) ::sagittarius::translation::v1::StreamingTranslationTaskResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sagittarius::translation::v1::StreamingTranslationTaskResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_StreamingTranslationTaskResponse_translation_2fv1_2ftranslation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_StreamingTranslationTaskResponse_translation_2fv1_2ftranslation_2eproto}, {
      &scc_info_Status_google_2frpc_2fstatus_2eproto.base,
      &scc_info_StreamingTranslationTaskInfo_translation_2fv1_2ftranslation_2eproto.base,
      &scc_info_TranscriptInfo_translation_2fv1_2ftranslation_2eproto.base,}};

static void InitDefaultsscc_info_TextTranslationRequest_translation_2fv1_2ftranslation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sagittarius::translation::v1::_TextTranslationRequest_default_instance_;
    new (ptr) ::sagittarius::translation::v1::TextTranslationRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sagittarius::translation::v1::TextTranslationRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TextTranslationRequest_translation_2fv1_2ftranslation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TextTranslationRequest_translation_2fv1_2ftranslation_2eproto}, {}};

static void InitDefaultsscc_info_TextTranslationResponse_translation_2fv1_2ftranslation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sagittarius::translation::v1::_TextTranslationResponse_default_instance_;
    new (ptr) ::sagittarius::translation::v1::TextTranslationResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sagittarius::translation::v1::TextTranslationResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TextTranslationResponse_translation_2fv1_2ftranslation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_TextTranslationResponse_translation_2fv1_2ftranslation_2eproto}, {
      &scc_info_Status_google_2frpc_2fstatus_2eproto.base,
      &scc_info_TextTranslationResponse_Text_translation_2fv1_2ftranslation_2eproto.base,}};

static void InitDefaultsscc_info_TextTranslationResponse_Text_translation_2fv1_2ftranslation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sagittarius::translation::v1::_TextTranslationResponse_Text_default_instance_;
    new (ptr) ::sagittarius::translation::v1::TextTranslationResponse_Text();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sagittarius::translation::v1::TextTranslationResponse_Text::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TextTranslationResponse_Text_translation_2fv1_2ftranslation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TextTranslationResponse_Text_translation_2fv1_2ftranslation_2eproto}, {}};

static void InitDefaultsscc_info_TranscriptInfo_translation_2fv1_2ftranslation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sagittarius::translation::v1::_TranscriptInfo_default_instance_;
    new (ptr) ::sagittarius::translation::v1::TranscriptInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sagittarius::translation::v1::TranscriptInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TranscriptInfo_translation_2fv1_2ftranslation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TranscriptInfo_translation_2fv1_2ftranslation_2eproto}, {}};

static void InitDefaultsscc_info_TranscriptRequest_translation_2fv1_2ftranslation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sagittarius::translation::v1::_TranscriptRequest_default_instance_;
    new (ptr) ::sagittarius::translation::v1::TranscriptRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sagittarius::translation::v1::TranscriptRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TranscriptRequest_translation_2fv1_2ftranslation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TranscriptRequest_translation_2fv1_2ftranslation_2eproto}, {}};

static void InitDefaultsscc_info_TranscriptResponse_translation_2fv1_2ftranslation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sagittarius::translation::v1::_TranscriptResponse_default_instance_;
    new (ptr) ::sagittarius::translation::v1::TranscriptResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sagittarius::translation::v1::TranscriptResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TranscriptResponse_translation_2fv1_2ftranslation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_TranscriptResponse_translation_2fv1_2ftranslation_2eproto}, {
      &scc_info_Status_google_2frpc_2fstatus_2eproto.base,
      &scc_info_TranscriptResponse_Cue_translation_2fv1_2ftranslation_2eproto.base,}};

static void InitDefaultsscc_info_TranscriptResponse_Cue_translation_2fv1_2ftranslation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sagittarius::translation::v1::_TranscriptResponse_Cue_default_instance_;
    new (ptr) ::sagittarius::translation::v1::TranscriptResponse_Cue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sagittarius::translation::v1::TranscriptResponse_Cue::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TranscriptResponse_Cue_translation_2fv1_2ftranslation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TranscriptResponse_Cue_translation_2fv1_2ftranslation_2eproto}, {}};

static void InitDefaultsscc_info_UserQuotaRequest_translation_2fv1_2ftranslation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sagittarius::translation::v1::_UserQuotaRequest_default_instance_;
    new (ptr) ::sagittarius::translation::v1::UserQuotaRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sagittarius::translation::v1::UserQuotaRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserQuotaRequest_translation_2fv1_2ftranslation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_UserQuotaRequest_translation_2fv1_2ftranslation_2eproto}, {}};

static void InitDefaultsscc_info_UserQuotaResponse_translation_2fv1_2ftranslation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sagittarius::translation::v1::_UserQuotaResponse_default_instance_;
    new (ptr) ::sagittarius::translation::v1::UserQuotaResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sagittarius::translation::v1::UserQuotaResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UserQuotaResponse_translation_2fv1_2ftranslation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_UserQuotaResponse_translation_2fv1_2ftranslation_2eproto}, {
      &scc_info_Status_google_2frpc_2fstatus_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_translation_2fv1_2ftranslation_2eproto[21];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_translation_2fv1_2ftranslation_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_translation_2fv1_2ftranslation_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_translation_2fv1_2ftranslation_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sagittarius::translation::v1::MediaTranslationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sagittarius::translation::v1::MediaTranslationRequest, media_identity_),
  PROTOBUF_FIELD_OFFSET(::sagittarius::translation::v1::MediaTranslationRequest, language_code_),
  PROTOBUF_FIELD_OFFSET(::sagittarius::translation::v1::MediaTranslationRequest, format_),
  PROTOBUF_FIELD_OFFSET(::sagittarius::translation::v1::MediaTranslationRequest, start_time_),
  PROTOBUF_FIELD_OFFSET(::sagittarius::translation::v1::MediaTranslationRequest, hints_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sagittarius::translation::v1::MediaTranslationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sagittarius::translation::v1::MediaTranslationResponse, error_),
  PROTOBUF_FIELD_OFFSET(::sagittarius::translation::v1::MediaTranslationResponse, results_),
  PROTOBUF_FIELD_OFFSET(::sagittarius::translation::v1::MediaTranslationResponse, stream_translation_task_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sagittarius::translation::v1::TranscriptInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sagittarius::translation::v1::TranscriptInfo, transcript_identity_),
  PROTOBUF_FIELD_OFFSET(::sagittarius::translation::v1::TranscriptInfo, language_code_),
  PROTOBUF_FIELD_OFFSET(::sagittarius::translation::v1::TranscriptInfo, ranking_),
  PROTOBUF_FIELD_OFFSET(::sagittarius::translation::v1::TranscriptInfo, tags_),
  PROTOBUF_FIELD_OFFSET(::sagittarius::translation::v1::TranscriptInfo, delay_),
  PROTOBUF_FIELD_OFFSET(::sagittarius::translation::v1::TranscriptInfo, confidence_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sagittarius::translation::v1::DetectionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sagittarius::translation::v1::DetectionRequest, text_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sagittarius::translation::v1::DetectionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sagittarius::translation::v1::DetectionResponse, prediction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sagittarius::translation::v1::DetectionPrediction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sagittarius::translation::v1::DetectionPrediction, language_code_),
  PROTOBUF_FIELD_OFFSET(::sagittarius::translation::v1::DetectionPrediction, confidence_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sagittarius::translation::v1::TranscriptRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sagittarius::translation::v1::TranscriptRequest, transcript_identity_),
  PROTOBUF_FIELD_OFFSET(::sagittarius::translation::v1::TranscriptRequest, start_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sagittarius::translation::v1::TranscriptResponse_Cue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sagittarius::translation::v1::TranscriptResponse_Cue, start_time_),
  PROTOBUF_FIELD_OFFSET(::sagittarius::translation::v1::TranscriptResponse_Cue, end_time_),
  PROTOBUF_FIELD_OFFSET(::sagittarius::translation::v1::TranscriptResponse_Cue, text_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sagittarius::translation::v1::TranscriptResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sagittarius::translation::v1::TranscriptResponse, error_),
  PROTOBUF_FIELD_OFFSET(::sagittarius::translation::v1::TranscriptResponse, transcripts_),
  PROTOBUF_FIELD_OFFSET(::sagittarius::translation::v1::TranscriptResponse, is_end_of_transcript_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sagittarius::translation::v1::StreamingTranslationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::sagittarius::translation::v1::StreamingTranslationRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::sagittarius::translation::v1::StreamingTranslationRequestDefaultTypeInternal, streaming_config_),
  offsetof(::sagittarius::translation::v1::StreamingTranslationRequestDefaultTypeInternal, audio_content_),
  PROTOBUF_FIELD_OFFSET(::sagittarius::translation::v1::StreamingTranslationRequest, streaming_request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sagittarius::translation::v1::StreamingTranslationRequestConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sagittarius::translation::v1::StreamingTranslationRequestConfig, streaming_config_),
  PROTOBUF_FIELD_OFFSET(::sagittarius::translation::v1::StreamingTranslationRequestConfig, media_identity_),
  PROTOBUF_FIELD_OFFSET(::sagittarius::translation::v1::StreamingTranslationRequestConfig, audio_language_code_),
  PROTOBUF_FIELD_OFFSET(::sagittarius::translation::v1::StreamingTranslationRequestConfig, target_language_code_),
  PROTOBUF_FIELD_OFFSET(::sagittarius::translation::v1::StreamingTranslationRequestConfig, audio_track_),
  PROTOBUF_FIELD_OFFSET(::sagittarius::translation::v1::StreamingTranslationRequestConfig, hints_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sagittarius::translation::v1::StreamingTranslationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::sagittarius::translation::v1::StreamingTranslationResponse, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sagittarius::translation::v1::StreamingTranslationResponse, error_),
  offsetof(::sagittarius::translation::v1::StreamingTranslationResponseDefaultTypeInternal, streaming_result_),
  offsetof(::sagittarius::translation::v1::StreamingTranslationResponseDefaultTypeInternal, taskinfo_),
  offsetof(::sagittarius::translation::v1::StreamingTranslationResponseDefaultTypeInternal, transcript_result_),
  PROTOBUF_FIELD_OFFSET(::sagittarius::translation::v1::StreamingTranslationResponse, streaming_response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sagittarius::translation::v1::StreamingTranslationTaskRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sagittarius::translation::v1::StreamingTranslationTaskRequest, task_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sagittarius::translation::v1::StreamingTranslationTaskResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::sagittarius::translation::v1::StreamingTranslationTaskResponse, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sagittarius::translation::v1::StreamingTranslationTaskResponse, error_),
  offsetof(::sagittarius::translation::v1::StreamingTranslationTaskResponseDefaultTypeInternal, taskinfo_),
  offsetof(::sagittarius::translation::v1::StreamingTranslationTaskResponseDefaultTypeInternal, transcriptinfo_),
  PROTOBUF_FIELD_OFFSET(::sagittarius::translation::v1::StreamingTranslationTaskResponse, streaming_request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sagittarius::translation::v1::StreamingTranslationTaskInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sagittarius::translation::v1::StreamingTranslationTaskInfo, task_id_),
  PROTOBUF_FIELD_OFFSET(::sagittarius::translation::v1::StreamingTranslationTaskInfo, estimate_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sagittarius::translation::v1::StreamingTranslationResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sagittarius::translation::v1::StreamingTranslationResult, transcript_),
  PROTOBUF_FIELD_OFFSET(::sagittarius::translation::v1::StreamingTranslationResult, confidence_),
  PROTOBUF_FIELD_OFFSET(::sagittarius::translation::v1::StreamingTranslationResult, stability_),
  PROTOBUF_FIELD_OFFSET(::sagittarius::translation::v1::StreamingTranslationResult, start_time_),
  PROTOBUF_FIELD_OFFSET(::sagittarius::translation::v1::StreamingTranslationResult, end_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sagittarius::translation::v1::TextTranslationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sagittarius::translation::v1::TextTranslationRequest, text_),
  PROTOBUF_FIELD_OFFSET(::sagittarius::translation::v1::TextTranslationRequest, target_language_code_),
  PROTOBUF_FIELD_OFFSET(::sagittarius::translation::v1::TextTranslationRequest, source_language_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sagittarius::translation::v1::TextTranslationResponse_Text, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sagittarius::translation::v1::TextTranslationResponse_Text, source_language_),
  PROTOBUF_FIELD_OFFSET(::sagittarius::translation::v1::TextTranslationResponse_Text, text_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sagittarius::translation::v1::TextTranslationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sagittarius::translation::v1::TextTranslationResponse, error_),
  PROTOBUF_FIELD_OFFSET(::sagittarius::translation::v1::TextTranslationResponse, results_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sagittarius::translation::v1::UserQuotaRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sagittarius::translation::v1::UserQuotaResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sagittarius::translation::v1::UserQuotaResponse, quota_),
  PROTOBUF_FIELD_OFFSET(::sagittarius::translation::v1::UserQuotaResponse, time_left_),
  PROTOBUF_FIELD_OFFSET(::sagittarius::translation::v1::UserQuotaResponse, error_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::sagittarius::translation::v1::MediaTranslationRequest)},
  { 10, -1, sizeof(::sagittarius::translation::v1::MediaTranslationResponse)},
  { 18, -1, sizeof(::sagittarius::translation::v1::TranscriptInfo)},
  { 29, -1, sizeof(::sagittarius::translation::v1::DetectionRequest)},
  { 35, -1, sizeof(::sagittarius::translation::v1::DetectionResponse)},
  { 41, -1, sizeof(::sagittarius::translation::v1::DetectionPrediction)},
  { 48, -1, sizeof(::sagittarius::translation::v1::TranscriptRequest)},
  { 55, -1, sizeof(::sagittarius::translation::v1::TranscriptResponse_Cue)},
  { 63, -1, sizeof(::sagittarius::translation::v1::TranscriptResponse)},
  { 71, -1, sizeof(::sagittarius::translation::v1::StreamingTranslationRequest)},
  { 79, -1, sizeof(::sagittarius::translation::v1::StreamingTranslationRequestConfig)},
  { 90, -1, sizeof(::sagittarius::translation::v1::StreamingTranslationResponse)},
  { 100, -1, sizeof(::sagittarius::translation::v1::StreamingTranslationTaskRequest)},
  { 106, -1, sizeof(::sagittarius::translation::v1::StreamingTranslationTaskResponse)},
  { 115, -1, sizeof(::sagittarius::translation::v1::StreamingTranslationTaskInfo)},
  { 122, -1, sizeof(::sagittarius::translation::v1::StreamingTranslationResult)},
  { 132, -1, sizeof(::sagittarius::translation::v1::TextTranslationRequest)},
  { 140, -1, sizeof(::sagittarius::translation::v1::TextTranslationResponse_Text)},
  { 147, -1, sizeof(::sagittarius::translation::v1::TextTranslationResponse)},
  { 154, -1, sizeof(::sagittarius::translation::v1::UserQuotaRequest)},
  { 159, -1, sizeof(::sagittarius::translation::v1::UserQuotaResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sagittarius::translation::v1::_MediaTranslationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sagittarius::translation::v1::_MediaTranslationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sagittarius::translation::v1::_TranscriptInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sagittarius::translation::v1::_DetectionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sagittarius::translation::v1::_DetectionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sagittarius::translation::v1::_DetectionPrediction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sagittarius::translation::v1::_TranscriptRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sagittarius::translation::v1::_TranscriptResponse_Cue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sagittarius::translation::v1::_TranscriptResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sagittarius::translation::v1::_StreamingTranslationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sagittarius::translation::v1::_StreamingTranslationRequestConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sagittarius::translation::v1::_StreamingTranslationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sagittarius::translation::v1::_StreamingTranslationTaskRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sagittarius::translation::v1::_StreamingTranslationTaskResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sagittarius::translation::v1::_StreamingTranslationTaskInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sagittarius::translation::v1::_StreamingTranslationResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sagittarius::translation::v1::_TextTranslationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sagittarius::translation::v1::_TextTranslationResponse_Text_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sagittarius::translation::v1::_TextTranslationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sagittarius::translation::v1::_UserQuotaRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sagittarius::translation::v1::_UserQuotaResponse_default_instance_),
};

const char descriptor_table_protodef_translation_2fv1_2ftranslation_2eproto[] =
  "\n translation/v1/translation.proto\022\032sagi"
  "ttarius.translation.v1\032\034google/api/annot"
  "ations.proto\032\027google/rpc/status.proto\032)g"
  "oogle/cloud/speech/v1/cloud_speech.proto"
  "\"{\n\027MediaTranslationRequest\022\026\n\016media_ide"
  "ntity\030\001 \001(\t\022\025\n\rlanguage_code\030\002 \001(\t\022\016\n\006fo"
  "rmat\030\003 \001(\t\022\022\n\nstart_time\030\006 \001(\001\022\r\n\005hints\030"
  "\007 \001(\t\"\236\001\n\030MediaTranslationResponse\022!\n\005er"
  "ror\030\001 \001(\0132\022.google.rpc.Status\022;\n\007results"
  "\030\002 \003(\0132*.sagittarius.translation.v1.Tran"
  "scriptInfo\022\"\n\032stream_translation_task_id"
  "\030\003 \001(\t\"\206\001\n\016TranscriptInfo\022\033\n\023transcript_"
  "identity\030\001 \001(\t\022\025\n\rlanguage_code\030\002 \001(\t\022\017\n"
  "\007ranking\030\003 \001(\002\022\014\n\004tags\030\004 \003(\t\022\r\n\005delay\030\005 "
  "\001(\003\022\022\n\nconfidence\030\006 \001(\002\" \n\020DetectionRequ"
  "est\022\014\n\004text\030\001 \001(\t\"X\n\021DetectionResponse\022C"
  "\n\nprediction\030\001 \003(\0132/.sagittarius.transla"
  "tion.v1.DetectionPrediction\"@\n\023Detection"
  "Prediction\022\025\n\rlanguage_code\030\001 \001(\t\022\022\n\ncon"
  "fidence\030\002 \001(\002\"D\n\021TranscriptRequest\022\033\n\023tr"
  "anscript_identity\030\004 \001(\t\022\022\n\nstart_time\030\006 "
  "\001(\001\"\331\001\n\022TranscriptResponse\022!\n\005error\030\001 \001("
  "\0132\022.google.rpc.Status\022G\n\013transcripts\030\002 \003"
  "(\01322.sagittarius.translation.v1.Transcri"
  "ptResponse.Cue\022\034\n\024is_end_of_transcript\030\003"
  " \001(\010\0329\n\003Cue\022\022\n\nstart_time\030\001 \001(\001\022\020\n\010end_t"
  "ime\030\002 \001(\001\022\014\n\004text\030\003 \001(\t\"\246\001\n\033StreamingTra"
  "nslationRequest\022Y\n\020streaming_config\030\001 \001("
  "\0132=.sagittarius.translation.v1.Streaming"
  "TranslationRequestConfigH\000\022\027\n\raudio_cont"
  "ent\030\002 \001(\014H\000B\023\n\021streaming_request\"\337\001\n!Str"
  "eamingTranslationRequestConfig\022C\n\020stream"
  "ing_config\030\001 \001(\0132).google.cloud.speech.v"
  "1.RecognitionConfig\022\026\n\016media_identity\030\002 "
  "\001(\t\022\033\n\023audio_language_code\030\003 \001(\t\022\034\n\024targ"
  "et_language_code\030\004 \001(\t\022\023\n\013audio_track\030\005 "
  "\001(\t\022\r\n\005hints\030\006 \001(\t\"\302\002\n\034StreamingTranslat"
  "ionResponse\022!\n\005error\030\001 \001(\0132\022.google.rpc."
  "Status\022R\n\020streaming_result\030\002 \001(\01326.sagit"
  "tarius.translation.v1.StreamingTranslati"
  "onResultH\000\022L\n\010taskinfo\030\003 \001(\01328.sagittari"
  "us.translation.v1.StreamingTranslationTa"
  "skInfoH\000\022G\n\021transcript_result\030\004 \001(\0132*.sa"
  "gittarius.translation.v1.TranscriptInfoH"
  "\000B\024\n\022streaming_response\"2\n\037StreamingTran"
  "slationTaskRequest\022\017\n\007task_id\030\001 \001(\t\"\356\001\n "
  "StreamingTranslationTaskResponse\022!\n\005erro"
  "r\030\001 \001(\0132\022.google.rpc.Status\022L\n\010taskinfo\030"
  "\002 \001(\01328.sagittarius.translation.v1.Strea"
  "mingTranslationTaskInfoH\000\022D\n\016transcripti"
  "nfo\030\003 \001(\0132*.sagittarius.translation.v1.T"
  "ranscriptInfoH\000B\023\n\021streaming_request\"F\n\034"
  "StreamingTranslationTaskInfo\022\017\n\007task_id\030"
  "\001 \001(\t\022\025\n\restimate_time\030\002 \001(\001\"}\n\032Streamin"
  "gTranslationResult\022\022\n\ntranscript\030\001 \001(\t\022\022"
  "\n\nconfidence\030\002 \001(\002\022\021\n\tstability\030\003 \001(\002\022\022\n"
  "\nstart_time\030\004 \001(\001\022\020\n\010end_time\030\005 \001(\001\"b\n\026T"
  "extTranslationRequest\022\014\n\004text\030\001 \003(\t\022\034\n\024t"
  "arget_language_code\030\002 \001(\t\022\034\n\024source_lang"
  "uage_code\030\003 \001(\t\"\266\001\n\027TextTranslationRespo"
  "nse\022!\n\005error\030\001 \001(\0132\022.google.rpc.Status\022I"
  "\n\007results\030\002 \003(\01328.sagittarius.translatio"
  "n.v1.TextTranslationResponse.Text\032-\n\004Tex"
  "t\022\027\n\017source_language\030\001 \001(\t\022\014\n\004text\030\002 \001(\t"
  "\"\022\n\020UserQuotaRequest\"X\n\021UserQuotaRespons"
  "e\022\r\n\005quota\030\001 \001(\003\022\021\n\ttime_left\030\002 \001(\003\022!\n\005e"
  "rror\030\003 \001(\0132\022.google.rpc.Status*F\n\034Stream"
  "ingTranslationTaskCode\022\006\n\002OK\020\000\022\r\n\010CONTIN"
  "UE\020\214G\022\017\n\nSKIP_AUDIO\020\215G2\264\t\n\013Translation\022\317"
  "\001\n\016TranslateMedia\0223.sagittarius.translat"
  "ion.v1.MediaTranslationRequest\0324.sagitta"
  "rius.translation.v1.MediaTranslationResp"
  "onse\"R\202\323\344\223\002L\"G/v1/media/{media_identity}"
  "/language/{language_code}/transcript:{fo"
  "rmat}:\001*\022\220\001\n\016DetectLanguage\022,.sagittariu"
  "s.translation.v1.DetectionRequest\032-.sagi"
  "ttarius.translation.v1.DetectionResponse"
  "\"!\202\323\344\223\002\033\"\023/v1/language/detect:\004text\022\232\001\n\n"
  "Transcript\022-.sagittarius.translation.v1."
  "TranscriptRequest\032..sagittarius.translat"
  "ion.v1.TranscriptResponse\"-\202\323\344\223\002\'\"\"/v1/t"
  "ranscript/transcript_identity:\001*\022\271\001\n\rTra"
  "nslateText\0222.sagittarius.translation.v1."
  "TextTranslationRequest\0323.sagittarius.tra"
  "nslation.v1.TextTranslationResponse\"\?\202\323\344"
  "\223\0029\"4/v1/text/language/{target_language_"
  "code}/translation:\001*\022\215\001\n\024StreamingTransl"
  "ation\0227.sagittarius.translation.v1.Strea"
  "mingTranslationRequest\0328.sagittarius.tra"
  "nslation.v1.StreamingTranslationResponse"
  "(\0010\001\022\305\001\n\030StreamingTranslationTask\022;.sagi"
  "ttarius.translation.v1.StreamingTranslat"
  "ionTaskRequest\032<.sagittarius.translation"
  ".v1.StreamingTranslationTaskResponse\".\202\323"
  "\344\223\002(\"#/v1/translation/task/{task_id}/inf"
  "o:\001*\022\216\001\n\014GetUserQuota\022,.sagittarius.tran"
  "slation.v1.UserQuotaRequest\032-.sagittariu"
  "s.translation.v1.UserQuotaResponse\"!\202\323\344\223"
  "\002\033\022\031/v1/translation/userquotaBC\n\035ai.sagi"
  "ttarius.translation.v1B\020TranslationProto"
  "P\001Z\013translation\370\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_translation_2fv1_2ftranslation_2eproto_deps[3] = {
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
  &::descriptor_table_google_2fcloud_2fspeech_2fv1_2fcloud_5fspeech_2eproto,
  &::descriptor_table_google_2frpc_2fstatus_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_translation_2fv1_2ftranslation_2eproto_sccs[21] = {
  &scc_info_DetectionPrediction_translation_2fv1_2ftranslation_2eproto.base,
  &scc_info_DetectionRequest_translation_2fv1_2ftranslation_2eproto.base,
  &scc_info_DetectionResponse_translation_2fv1_2ftranslation_2eproto.base,
  &scc_info_MediaTranslationRequest_translation_2fv1_2ftranslation_2eproto.base,
  &scc_info_MediaTranslationResponse_translation_2fv1_2ftranslation_2eproto.base,
  &scc_info_StreamingTranslationRequest_translation_2fv1_2ftranslation_2eproto.base,
  &scc_info_StreamingTranslationRequestConfig_translation_2fv1_2ftranslation_2eproto.base,
  &scc_info_StreamingTranslationResponse_translation_2fv1_2ftranslation_2eproto.base,
  &scc_info_StreamingTranslationResult_translation_2fv1_2ftranslation_2eproto.base,
  &scc_info_StreamingTranslationTaskInfo_translation_2fv1_2ftranslation_2eproto.base,
  &scc_info_StreamingTranslationTaskRequest_translation_2fv1_2ftranslation_2eproto.base,
  &scc_info_StreamingTranslationTaskResponse_translation_2fv1_2ftranslation_2eproto.base,
  &scc_info_TextTranslationRequest_translation_2fv1_2ftranslation_2eproto.base,
  &scc_info_TextTranslationResponse_translation_2fv1_2ftranslation_2eproto.base,
  &scc_info_TextTranslationResponse_Text_translation_2fv1_2ftranslation_2eproto.base,
  &scc_info_TranscriptInfo_translation_2fv1_2ftranslation_2eproto.base,
  &scc_info_TranscriptRequest_translation_2fv1_2ftranslation_2eproto.base,
  &scc_info_TranscriptResponse_translation_2fv1_2ftranslation_2eproto.base,
  &scc_info_TranscriptResponse_Cue_translation_2fv1_2ftranslation_2eproto.base,
  &scc_info_UserQuotaRequest_translation_2fv1_2ftranslation_2eproto.base,
  &scc_info_UserQuotaResponse_translation_2fv1_2ftranslation_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_translation_2fv1_2ftranslation_2eproto_once;
static bool descriptor_table_translation_2fv1_2ftranslation_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_translation_2fv1_2ftranslation_2eproto = {
  &descriptor_table_translation_2fv1_2ftranslation_2eproto_initialized, descriptor_table_protodef_translation_2fv1_2ftranslation_2eproto, "translation/v1/translation.proto", 4026,
  &descriptor_table_translation_2fv1_2ftranslation_2eproto_once, descriptor_table_translation_2fv1_2ftranslation_2eproto_sccs, descriptor_table_translation_2fv1_2ftranslation_2eproto_deps, 21, 3,
  schemas, file_default_instances, TableStruct_translation_2fv1_2ftranslation_2eproto::offsets,
  file_level_metadata_translation_2fv1_2ftranslation_2eproto, 21, file_level_enum_descriptors_translation_2fv1_2ftranslation_2eproto, file_level_service_descriptors_translation_2fv1_2ftranslation_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_translation_2fv1_2ftranslation_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_translation_2fv1_2ftranslation_2eproto), true);
namespace sagittarius {
namespace translation {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StreamingTranslationTaskCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_translation_2fv1_2ftranslation_2eproto);
  return file_level_enum_descriptors_translation_2fv1_2ftranslation_2eproto[0];
}
bool StreamingTranslationTaskCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 9100:
    case 9101:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void MediaTranslationRequest::InitAsDefaultInstance() {
}
class MediaTranslationRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MediaTranslationRequest::kMediaIdentityFieldNumber;
const int MediaTranslationRequest::kLanguageCodeFieldNumber;
const int MediaTranslationRequest::kFormatFieldNumber;
const int MediaTranslationRequest::kStartTimeFieldNumber;
const int MediaTranslationRequest::kHintsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MediaTranslationRequest::MediaTranslationRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sagittarius.translation.v1.MediaTranslationRequest)
}
MediaTranslationRequest::MediaTranslationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sagittarius.translation.v1.MediaTranslationRequest)
}
MediaTranslationRequest::MediaTranslationRequest(const MediaTranslationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  media_identity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.media_identity().size() > 0) {
    media_identity_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.media_identity(),
      GetArenaNoVirtual());
  }
  language_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.language_code().size() > 0) {
    language_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.language_code(),
      GetArenaNoVirtual());
  }
  format_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.format().size() > 0) {
    format_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.format(),
      GetArenaNoVirtual());
  }
  hints_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.hints().size() > 0) {
    hints_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hints(),
      GetArenaNoVirtual());
  }
  start_time_ = from.start_time_;
  // @@protoc_insertion_point(copy_constructor:sagittarius.translation.v1.MediaTranslationRequest)
}

void MediaTranslationRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MediaTranslationRequest_translation_2fv1_2ftranslation_2eproto.base);
  media_identity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  format_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hints_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  start_time_ = 0;
}

MediaTranslationRequest::~MediaTranslationRequest() {
  // @@protoc_insertion_point(destructor:sagittarius.translation.v1.MediaTranslationRequest)
  SharedDtor();
}

void MediaTranslationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  media_identity_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  format_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hints_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MediaTranslationRequest::ArenaDtor(void* object) {
  MediaTranslationRequest* _this = reinterpret_cast< MediaTranslationRequest* >(object);
  (void)_this;
}
void MediaTranslationRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MediaTranslationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MediaTranslationRequest& MediaTranslationRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MediaTranslationRequest_translation_2fv1_2ftranslation_2eproto.base);
  return *internal_default_instance();
}


void MediaTranslationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sagittarius.translation.v1.MediaTranslationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  media_identity_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  language_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  format_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  hints_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  start_time_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MediaTranslationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string media_identity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_media_identity(), ptr, ctx, "sagittarius.translation.v1.MediaTranslationRequest.media_identity");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string language_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_language_code(), ptr, ctx, "sagittarius.translation.v1.MediaTranslationRequest.language_code");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string format = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_format(), ptr, ctx, "sagittarius.translation.v1.MediaTranslationRequest.format");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double start_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string hints = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_hints(), ptr, ctx, "sagittarius.translation.v1.MediaTranslationRequest.hints");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MediaTranslationRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sagittarius.translation.v1.MediaTranslationRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string media_identity = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_media_identity()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->media_identity().data(), static_cast<int>(this->media_identity().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "sagittarius.translation.v1.MediaTranslationRequest.media_identity"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string language_code = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_language_code()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->language_code().data(), static_cast<int>(this->language_code().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "sagittarius.translation.v1.MediaTranslationRequest.language_code"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string format = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_format()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->format().data(), static_cast<int>(this->format().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "sagittarius.translation.v1.MediaTranslationRequest.format"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double start_time = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (49 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string hints = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_hints()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->hints().data(), static_cast<int>(this->hints().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "sagittarius.translation.v1.MediaTranslationRequest.hints"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sagittarius.translation.v1.MediaTranslationRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sagittarius.translation.v1.MediaTranslationRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MediaTranslationRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sagittarius.translation.v1.MediaTranslationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string media_identity = 1;
  if (this->media_identity().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->media_identity().data(), static_cast<int>(this->media_identity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sagittarius.translation.v1.MediaTranslationRequest.media_identity");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->media_identity(), output);
  }

  // string language_code = 2;
  if (this->language_code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->language_code().data(), static_cast<int>(this->language_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sagittarius.translation.v1.MediaTranslationRequest.language_code");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->language_code(), output);
  }

  // string format = 3;
  if (this->format().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->format().data(), static_cast<int>(this->format().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sagittarius.translation.v1.MediaTranslationRequest.format");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->format(), output);
  }

  // double start_time = 6;
  if (!(this->start_time() <= 0 && this->start_time() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(6, this->start_time(), output);
  }

  // string hints = 7;
  if (this->hints().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->hints().data(), static_cast<int>(this->hints().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sagittarius.translation.v1.MediaTranslationRequest.hints");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->hints(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sagittarius.translation.v1.MediaTranslationRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* MediaTranslationRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sagittarius.translation.v1.MediaTranslationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string media_identity = 1;
  if (this->media_identity().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->media_identity().data(), static_cast<int>(this->media_identity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sagittarius.translation.v1.MediaTranslationRequest.media_identity");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->media_identity(), target);
  }

  // string language_code = 2;
  if (this->language_code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->language_code().data(), static_cast<int>(this->language_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sagittarius.translation.v1.MediaTranslationRequest.language_code");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->language_code(), target);
  }

  // string format = 3;
  if (this->format().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->format().data(), static_cast<int>(this->format().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sagittarius.translation.v1.MediaTranslationRequest.format");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->format(), target);
  }

  // double start_time = 6;
  if (!(this->start_time() <= 0 && this->start_time() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->start_time(), target);
  }

  // string hints = 7;
  if (this->hints().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->hints().data(), static_cast<int>(this->hints().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sagittarius.translation.v1.MediaTranslationRequest.hints");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        7, this->hints(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sagittarius.translation.v1.MediaTranslationRequest)
  return target;
}

size_t MediaTranslationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sagittarius.translation.v1.MediaTranslationRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string media_identity = 1;
  if (this->media_identity().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->media_identity());
  }

  // string language_code = 2;
  if (this->language_code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->language_code());
  }

  // string format = 3;
  if (this->format().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->format());
  }

  // string hints = 7;
  if (this->hints().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->hints());
  }

  // double start_time = 6;
  if (!(this->start_time() <= 0 && this->start_time() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MediaTranslationRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sagittarius.translation.v1.MediaTranslationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MediaTranslationRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MediaTranslationRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sagittarius.translation.v1.MediaTranslationRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sagittarius.translation.v1.MediaTranslationRequest)
    MergeFrom(*source);
  }
}

void MediaTranslationRequest::MergeFrom(const MediaTranslationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sagittarius.translation.v1.MediaTranslationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.media_identity().size() > 0) {
    set_media_identity(from.media_identity());
  }
  if (from.language_code().size() > 0) {
    set_language_code(from.language_code());
  }
  if (from.format().size() > 0) {
    set_format(from.format());
  }
  if (from.hints().size() > 0) {
    set_hints(from.hints());
  }
  if (!(from.start_time() <= 0 && from.start_time() >= 0)) {
    set_start_time(from.start_time());
  }
}

void MediaTranslationRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sagittarius.translation.v1.MediaTranslationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MediaTranslationRequest::CopyFrom(const MediaTranslationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sagittarius.translation.v1.MediaTranslationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaTranslationRequest::IsInitialized() const {
  return true;
}

void MediaTranslationRequest::Swap(MediaTranslationRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    MediaTranslationRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void MediaTranslationRequest::UnsafeArenaSwap(MediaTranslationRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void MediaTranslationRequest::InternalSwap(MediaTranslationRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  media_identity_.Swap(&other->media_identity_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  language_code_.Swap(&other->language_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  format_.Swap(&other->format_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hints_.Swap(&other->hints_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(start_time_, other->start_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MediaTranslationRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MediaTranslationResponse::InitAsDefaultInstance() {
  ::sagittarius::translation::v1::_MediaTranslationResponse_default_instance_._instance.get_mutable()->error_ = const_cast< ::google::rpc::Status*>(
      ::google::rpc::Status::internal_default_instance());
}
class MediaTranslationResponse::HasBitSetters {
 public:
  static const ::google::rpc::Status& error(const MediaTranslationResponse* msg);
};

const ::google::rpc::Status&
MediaTranslationResponse::HasBitSetters::error(const MediaTranslationResponse* msg) {
  return *msg->error_;
}
void MediaTranslationResponse::unsafe_arena_set_allocated_error(
    ::google::rpc::Status* error) {
  if (GetArenaNoVirtual() == nullptr) {
    delete error_;
  }
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sagittarius.translation.v1.MediaTranslationResponse.error)
}
void MediaTranslationResponse::clear_error() {
  if (GetArenaNoVirtual() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MediaTranslationResponse::kErrorFieldNumber;
const int MediaTranslationResponse::kResultsFieldNumber;
const int MediaTranslationResponse::kStreamTranslationTaskIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MediaTranslationResponse::MediaTranslationResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sagittarius.translation.v1.MediaTranslationResponse)
}
MediaTranslationResponse::MediaTranslationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  results_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sagittarius.translation.v1.MediaTranslationResponse)
}
MediaTranslationResponse::MediaTranslationResponse(const MediaTranslationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      results_(from.results_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stream_translation_task_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.stream_translation_task_id().size() > 0) {
    stream_translation_task_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.stream_translation_task_id(),
      GetArenaNoVirtual());
  }
  if (from.has_error()) {
    error_ = new ::google::rpc::Status(*from.error_);
  } else {
    error_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:sagittarius.translation.v1.MediaTranslationResponse)
}

void MediaTranslationResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MediaTranslationResponse_translation_2fv1_2ftranslation_2eproto.base);
  stream_translation_task_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_ = nullptr;
}

MediaTranslationResponse::~MediaTranslationResponse() {
  // @@protoc_insertion_point(destructor:sagittarius.translation.v1.MediaTranslationResponse)
  SharedDtor();
}

void MediaTranslationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  stream_translation_task_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete error_;
}

void MediaTranslationResponse::ArenaDtor(void* object) {
  MediaTranslationResponse* _this = reinterpret_cast< MediaTranslationResponse* >(object);
  (void)_this;
}
void MediaTranslationResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MediaTranslationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MediaTranslationResponse& MediaTranslationResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MediaTranslationResponse_translation_2fv1_2ftranslation_2eproto.base);
  return *internal_default_instance();
}


void MediaTranslationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sagittarius.translation.v1.MediaTranslationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  stream_translation_task_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MediaTranslationResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.rpc.Status error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_error(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .sagittarius.translation.v1.TranscriptInfo results = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // string stream_translation_task_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_stream_translation_task_id(), ptr, ctx, "sagittarius.translation.v1.MediaTranslationResponse.stream_translation_task_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MediaTranslationResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sagittarius.translation.v1.MediaTranslationResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.rpc.Status error = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sagittarius.translation.v1.TranscriptInfo results = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_results()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string stream_translation_task_id = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_stream_translation_task_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->stream_translation_task_id().data(), static_cast<int>(this->stream_translation_task_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "sagittarius.translation.v1.MediaTranslationResponse.stream_translation_task_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sagittarius.translation.v1.MediaTranslationResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sagittarius.translation.v1.MediaTranslationResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MediaTranslationResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sagittarius.translation.v1.MediaTranslationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.rpc.Status error = 1;
  if (this->has_error()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::error(this), output);
  }

  // repeated .sagittarius.translation.v1.TranscriptInfo results = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->results_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->results(static_cast<int>(i)),
      output);
  }

  // string stream_translation_task_id = 3;
  if (this->stream_translation_task_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->stream_translation_task_id().data(), static_cast<int>(this->stream_translation_task_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sagittarius.translation.v1.MediaTranslationResponse.stream_translation_task_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->stream_translation_task_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sagittarius.translation.v1.MediaTranslationResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* MediaTranslationResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sagittarius.translation.v1.MediaTranslationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.rpc.Status error = 1;
  if (this->has_error()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::error(this), target);
  }

  // repeated .sagittarius.translation.v1.TranscriptInfo results = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->results_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->results(static_cast<int>(i)), target);
  }

  // string stream_translation_task_id = 3;
  if (this->stream_translation_task_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->stream_translation_task_id().data(), static_cast<int>(this->stream_translation_task_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sagittarius.translation.v1.MediaTranslationResponse.stream_translation_task_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->stream_translation_task_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sagittarius.translation.v1.MediaTranslationResponse)
  return target;
}

size_t MediaTranslationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sagittarius.translation.v1.MediaTranslationResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sagittarius.translation.v1.TranscriptInfo results = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->results_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->results(static_cast<int>(i)));
    }
  }

  // string stream_translation_task_id = 3;
  if (this->stream_translation_task_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->stream_translation_task_id());
  }

  // .google.rpc.Status error = 1;
  if (this->has_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *error_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MediaTranslationResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sagittarius.translation.v1.MediaTranslationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MediaTranslationResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MediaTranslationResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sagittarius.translation.v1.MediaTranslationResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sagittarius.translation.v1.MediaTranslationResponse)
    MergeFrom(*source);
  }
}

void MediaTranslationResponse::MergeFrom(const MediaTranslationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sagittarius.translation.v1.MediaTranslationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
  if (from.stream_translation_task_id().size() > 0) {
    set_stream_translation_task_id(from.stream_translation_task_id());
  }
  if (from.has_error()) {
    mutable_error()->::google::rpc::Status::MergeFrom(from.error());
  }
}

void MediaTranslationResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sagittarius.translation.v1.MediaTranslationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MediaTranslationResponse::CopyFrom(const MediaTranslationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sagittarius.translation.v1.MediaTranslationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MediaTranslationResponse::IsInitialized() const {
  return true;
}

void MediaTranslationResponse::Swap(MediaTranslationResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    MediaTranslationResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void MediaTranslationResponse::UnsafeArenaSwap(MediaTranslationResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void MediaTranslationResponse::InternalSwap(MediaTranslationResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&results_)->InternalSwap(CastToBase(&other->results_));
  stream_translation_task_id_.Swap(&other->stream_translation_task_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(error_, other->error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MediaTranslationResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TranscriptInfo::InitAsDefaultInstance() {
}
class TranscriptInfo::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TranscriptInfo::kTranscriptIdentityFieldNumber;
const int TranscriptInfo::kLanguageCodeFieldNumber;
const int TranscriptInfo::kRankingFieldNumber;
const int TranscriptInfo::kTagsFieldNumber;
const int TranscriptInfo::kDelayFieldNumber;
const int TranscriptInfo::kConfidenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TranscriptInfo::TranscriptInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sagittarius.translation.v1.TranscriptInfo)
}
TranscriptInfo::TranscriptInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  tags_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sagittarius.translation.v1.TranscriptInfo)
}
TranscriptInfo::TranscriptInfo(const TranscriptInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      tags_(from.tags_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  transcript_identity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.transcript_identity().size() > 0) {
    transcript_identity_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.transcript_identity(),
      GetArenaNoVirtual());
  }
  language_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.language_code().size() > 0) {
    language_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.language_code(),
      GetArenaNoVirtual());
  }
  ::memcpy(&ranking_, &from.ranking_,
    static_cast<size_t>(reinterpret_cast<char*>(&delay_) -
    reinterpret_cast<char*>(&ranking_)) + sizeof(delay_));
  // @@protoc_insertion_point(copy_constructor:sagittarius.translation.v1.TranscriptInfo)
}

void TranscriptInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TranscriptInfo_translation_2fv1_2ftranslation_2eproto.base);
  transcript_identity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&ranking_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&delay_) -
      reinterpret_cast<char*>(&ranking_)) + sizeof(delay_));
}

TranscriptInfo::~TranscriptInfo() {
  // @@protoc_insertion_point(destructor:sagittarius.translation.v1.TranscriptInfo)
  SharedDtor();
}

void TranscriptInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  transcript_identity_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  language_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TranscriptInfo::ArenaDtor(void* object) {
  TranscriptInfo* _this = reinterpret_cast< TranscriptInfo* >(object);
  (void)_this;
}
void TranscriptInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TranscriptInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TranscriptInfo& TranscriptInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TranscriptInfo_translation_2fv1_2ftranslation_2eproto.base);
  return *internal_default_instance();
}


void TranscriptInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:sagittarius.translation.v1.TranscriptInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  transcript_identity_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  language_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ::memset(&ranking_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&delay_) -
      reinterpret_cast<char*>(&ranking_)) + sizeof(delay_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TranscriptInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string transcript_identity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_transcript_identity(), ptr, ctx, "sagittarius.translation.v1.TranscriptInfo.transcript_identity");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string language_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_language_code(), ptr, ctx, "sagittarius.translation.v1.TranscriptInfo.language_code");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float ranking = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          ranking_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated string tags = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_tags(), ptr, ctx, "sagittarius.translation.v1.TranscriptInfo.tags");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // int64 delay = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          delay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float confidence = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TranscriptInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sagittarius.translation.v1.TranscriptInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string transcript_identity = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_transcript_identity()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->transcript_identity().data(), static_cast<int>(this->transcript_identity().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "sagittarius.translation.v1.TranscriptInfo.transcript_identity"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string language_code = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_language_code()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->language_code().data(), static_cast<int>(this->language_code().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "sagittarius.translation.v1.TranscriptInfo.language_code"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float ranking = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ranking_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string tags = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_tags()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->tags(this->tags_size() - 1).data(),
            static_cast<int>(this->tags(this->tags_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "sagittarius.translation.v1.TranscriptInfo.tags"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 delay = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &delay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float confidence = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (53 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sagittarius.translation.v1.TranscriptInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sagittarius.translation.v1.TranscriptInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TranscriptInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sagittarius.translation.v1.TranscriptInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string transcript_identity = 1;
  if (this->transcript_identity().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->transcript_identity().data(), static_cast<int>(this->transcript_identity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sagittarius.translation.v1.TranscriptInfo.transcript_identity");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->transcript_identity(), output);
  }

  // string language_code = 2;
  if (this->language_code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->language_code().data(), static_cast<int>(this->language_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sagittarius.translation.v1.TranscriptInfo.language_code");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->language_code(), output);
  }

  // float ranking = 3;
  if (!(this->ranking() <= 0 && this->ranking() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->ranking(), output);
  }

  // repeated string tags = 4;
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->tags(i).data(), static_cast<int>(this->tags(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sagittarius.translation.v1.TranscriptInfo.tags");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      4, this->tags(i), output);
  }

  // int64 delay = 5;
  if (this->delay() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(5, this->delay(), output);
  }

  // float confidence = 6;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(6, this->confidence(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sagittarius.translation.v1.TranscriptInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* TranscriptInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sagittarius.translation.v1.TranscriptInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string transcript_identity = 1;
  if (this->transcript_identity().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->transcript_identity().data(), static_cast<int>(this->transcript_identity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sagittarius.translation.v1.TranscriptInfo.transcript_identity");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->transcript_identity(), target);
  }

  // string language_code = 2;
  if (this->language_code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->language_code().data(), static_cast<int>(this->language_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sagittarius.translation.v1.TranscriptInfo.language_code");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->language_code(), target);
  }

  // float ranking = 3;
  if (!(this->ranking() <= 0 && this->ranking() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->ranking(), target);
  }

  // repeated string tags = 4;
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->tags(i).data(), static_cast<int>(this->tags(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sagittarius.translation.v1.TranscriptInfo.tags");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(4, this->tags(i), target);
  }

  // int64 delay = 5;
  if (this->delay() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->delay(), target);
  }

  // float confidence = 6;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->confidence(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sagittarius.translation.v1.TranscriptInfo)
  return target;
}

size_t TranscriptInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sagittarius.translation.v1.TranscriptInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string tags = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->tags_size());
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->tags(i));
  }

  // string transcript_identity = 1;
  if (this->transcript_identity().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->transcript_identity());
  }

  // string language_code = 2;
  if (this->language_code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->language_code());
  }

  // float ranking = 3;
  if (!(this->ranking() <= 0 && this->ranking() >= 0)) {
    total_size += 1 + 4;
  }

  // float confidence = 6;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    total_size += 1 + 4;
  }

  // int64 delay = 5;
  if (this->delay() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->delay());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TranscriptInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sagittarius.translation.v1.TranscriptInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const TranscriptInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TranscriptInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sagittarius.translation.v1.TranscriptInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sagittarius.translation.v1.TranscriptInfo)
    MergeFrom(*source);
  }
}

void TranscriptInfo::MergeFrom(const TranscriptInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sagittarius.translation.v1.TranscriptInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  if (from.transcript_identity().size() > 0) {
    set_transcript_identity(from.transcript_identity());
  }
  if (from.language_code().size() > 0) {
    set_language_code(from.language_code());
  }
  if (!(from.ranking() <= 0 && from.ranking() >= 0)) {
    set_ranking(from.ranking());
  }
  if (!(from.confidence() <= 0 && from.confidence() >= 0)) {
    set_confidence(from.confidence());
  }
  if (from.delay() != 0) {
    set_delay(from.delay());
  }
}

void TranscriptInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sagittarius.translation.v1.TranscriptInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TranscriptInfo::CopyFrom(const TranscriptInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sagittarius.translation.v1.TranscriptInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TranscriptInfo::IsInitialized() const {
  return true;
}

void TranscriptInfo::Swap(TranscriptInfo* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    TranscriptInfo* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void TranscriptInfo::UnsafeArenaSwap(TranscriptInfo* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void TranscriptInfo::InternalSwap(TranscriptInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tags_.InternalSwap(CastToBase(&other->tags_));
  transcript_identity_.Swap(&other->transcript_identity_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  language_code_.Swap(&other->language_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ranking_, other->ranking_);
  swap(confidence_, other->confidence_);
  swap(delay_, other->delay_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TranscriptInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DetectionRequest::InitAsDefaultInstance() {
}
class DetectionRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DetectionRequest::kTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DetectionRequest::DetectionRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sagittarius.translation.v1.DetectionRequest)
}
DetectionRequest::DetectionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sagittarius.translation.v1.DetectionRequest)
}
DetectionRequest::DetectionRequest(const DetectionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.text().size() > 0) {
    text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.text(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:sagittarius.translation.v1.DetectionRequest)
}

void DetectionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DetectionRequest_translation_2fv1_2ftranslation_2eproto.base);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DetectionRequest::~DetectionRequest() {
  // @@protoc_insertion_point(destructor:sagittarius.translation.v1.DetectionRequest)
  SharedDtor();
}

void DetectionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DetectionRequest::ArenaDtor(void* object) {
  DetectionRequest* _this = reinterpret_cast< DetectionRequest* >(object);
  (void)_this;
}
void DetectionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DetectionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DetectionRequest& DetectionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DetectionRequest_translation_2fv1_2ftranslation_2eproto.base);
  return *internal_default_instance();
}


void DetectionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sagittarius.translation.v1.DetectionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  text_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DetectionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_text(), ptr, ctx, "sagittarius.translation.v1.DetectionRequest.text");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DetectionRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sagittarius.translation.v1.DetectionRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string text = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->text().data(), static_cast<int>(this->text().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "sagittarius.translation.v1.DetectionRequest.text"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sagittarius.translation.v1.DetectionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sagittarius.translation.v1.DetectionRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DetectionRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sagittarius.translation.v1.DetectionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string text = 1;
  if (this->text().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), static_cast<int>(this->text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sagittarius.translation.v1.DetectionRequest.text");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->text(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sagittarius.translation.v1.DetectionRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* DetectionRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sagittarius.translation.v1.DetectionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string text = 1;
  if (this->text().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), static_cast<int>(this->text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sagittarius.translation.v1.DetectionRequest.text");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sagittarius.translation.v1.DetectionRequest)
  return target;
}

size_t DetectionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sagittarius.translation.v1.DetectionRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string text = 1;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->text());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DetectionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sagittarius.translation.v1.DetectionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DetectionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DetectionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sagittarius.translation.v1.DetectionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sagittarius.translation.v1.DetectionRequest)
    MergeFrom(*source);
  }
}

void DetectionRequest::MergeFrom(const DetectionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sagittarius.translation.v1.DetectionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.text().size() > 0) {
    set_text(from.text());
  }
}

void DetectionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sagittarius.translation.v1.DetectionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectionRequest::CopyFrom(const DetectionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sagittarius.translation.v1.DetectionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectionRequest::IsInitialized() const {
  return true;
}

void DetectionRequest::Swap(DetectionRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DetectionRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void DetectionRequest::UnsafeArenaSwap(DetectionRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DetectionRequest::InternalSwap(DetectionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata DetectionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DetectionResponse::InitAsDefaultInstance() {
}
class DetectionResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DetectionResponse::kPredictionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DetectionResponse::DetectionResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sagittarius.translation.v1.DetectionResponse)
}
DetectionResponse::DetectionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  prediction_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sagittarius.translation.v1.DetectionResponse)
}
DetectionResponse::DetectionResponse(const DetectionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      prediction_(from.prediction_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sagittarius.translation.v1.DetectionResponse)
}

void DetectionResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DetectionResponse_translation_2fv1_2ftranslation_2eproto.base);
}

DetectionResponse::~DetectionResponse() {
  // @@protoc_insertion_point(destructor:sagittarius.translation.v1.DetectionResponse)
  SharedDtor();
}

void DetectionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void DetectionResponse::ArenaDtor(void* object) {
  DetectionResponse* _this = reinterpret_cast< DetectionResponse* >(object);
  (void)_this;
}
void DetectionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DetectionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DetectionResponse& DetectionResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DetectionResponse_translation_2fv1_2ftranslation_2eproto.base);
  return *internal_default_instance();
}


void DetectionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sagittarius.translation.v1.DetectionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  prediction_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DetectionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .sagittarius.translation.v1.DetectionPrediction prediction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_prediction(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DetectionResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sagittarius.translation.v1.DetectionResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sagittarius.translation.v1.DetectionPrediction prediction = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_prediction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sagittarius.translation.v1.DetectionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sagittarius.translation.v1.DetectionResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DetectionResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sagittarius.translation.v1.DetectionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sagittarius.translation.v1.DetectionPrediction prediction = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->prediction_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->prediction(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sagittarius.translation.v1.DetectionResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* DetectionResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sagittarius.translation.v1.DetectionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sagittarius.translation.v1.DetectionPrediction prediction = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->prediction_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->prediction(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sagittarius.translation.v1.DetectionResponse)
  return target;
}

size_t DetectionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sagittarius.translation.v1.DetectionResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sagittarius.translation.v1.DetectionPrediction prediction = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->prediction_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->prediction(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DetectionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sagittarius.translation.v1.DetectionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DetectionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DetectionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sagittarius.translation.v1.DetectionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sagittarius.translation.v1.DetectionResponse)
    MergeFrom(*source);
  }
}

void DetectionResponse::MergeFrom(const DetectionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sagittarius.translation.v1.DetectionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  prediction_.MergeFrom(from.prediction_);
}

void DetectionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sagittarius.translation.v1.DetectionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectionResponse::CopyFrom(const DetectionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sagittarius.translation.v1.DetectionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectionResponse::IsInitialized() const {
  return true;
}

void DetectionResponse::Swap(DetectionResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DetectionResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void DetectionResponse::UnsafeArenaSwap(DetectionResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DetectionResponse::InternalSwap(DetectionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&prediction_)->InternalSwap(CastToBase(&other->prediction_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DetectionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DetectionPrediction::InitAsDefaultInstance() {
}
class DetectionPrediction::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DetectionPrediction::kLanguageCodeFieldNumber;
const int DetectionPrediction::kConfidenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DetectionPrediction::DetectionPrediction()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sagittarius.translation.v1.DetectionPrediction)
}
DetectionPrediction::DetectionPrediction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sagittarius.translation.v1.DetectionPrediction)
}
DetectionPrediction::DetectionPrediction(const DetectionPrediction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  language_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.language_code().size() > 0) {
    language_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.language_code(),
      GetArenaNoVirtual());
  }
  confidence_ = from.confidence_;
  // @@protoc_insertion_point(copy_constructor:sagittarius.translation.v1.DetectionPrediction)
}

void DetectionPrediction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DetectionPrediction_translation_2fv1_2ftranslation_2eproto.base);
  language_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  confidence_ = 0;
}

DetectionPrediction::~DetectionPrediction() {
  // @@protoc_insertion_point(destructor:sagittarius.translation.v1.DetectionPrediction)
  SharedDtor();
}

void DetectionPrediction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  language_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DetectionPrediction::ArenaDtor(void* object) {
  DetectionPrediction* _this = reinterpret_cast< DetectionPrediction* >(object);
  (void)_this;
}
void DetectionPrediction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DetectionPrediction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DetectionPrediction& DetectionPrediction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DetectionPrediction_translation_2fv1_2ftranslation_2eproto.base);
  return *internal_default_instance();
}


void DetectionPrediction::Clear() {
// @@protoc_insertion_point(message_clear_start:sagittarius.translation.v1.DetectionPrediction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  language_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  confidence_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DetectionPrediction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string language_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_language_code(), ptr, ctx, "sagittarius.translation.v1.DetectionPrediction.language_code");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float confidence = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DetectionPrediction::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sagittarius.translation.v1.DetectionPrediction)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string language_code = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_language_code()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->language_code().data(), static_cast<int>(this->language_code().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "sagittarius.translation.v1.DetectionPrediction.language_code"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float confidence = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sagittarius.translation.v1.DetectionPrediction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sagittarius.translation.v1.DetectionPrediction)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DetectionPrediction::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sagittarius.translation.v1.DetectionPrediction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string language_code = 1;
  if (this->language_code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->language_code().data(), static_cast<int>(this->language_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sagittarius.translation.v1.DetectionPrediction.language_code");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->language_code(), output);
  }

  // float confidence = 2;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->confidence(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sagittarius.translation.v1.DetectionPrediction)
}

::PROTOBUF_NAMESPACE_ID::uint8* DetectionPrediction::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sagittarius.translation.v1.DetectionPrediction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string language_code = 1;
  if (this->language_code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->language_code().data(), static_cast<int>(this->language_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sagittarius.translation.v1.DetectionPrediction.language_code");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->language_code(), target);
  }

  // float confidence = 2;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->confidence(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sagittarius.translation.v1.DetectionPrediction)
  return target;
}

size_t DetectionPrediction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sagittarius.translation.v1.DetectionPrediction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string language_code = 1;
  if (this->language_code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->language_code());
  }

  // float confidence = 2;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DetectionPrediction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sagittarius.translation.v1.DetectionPrediction)
  GOOGLE_DCHECK_NE(&from, this);
  const DetectionPrediction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DetectionPrediction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sagittarius.translation.v1.DetectionPrediction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sagittarius.translation.v1.DetectionPrediction)
    MergeFrom(*source);
  }
}

void DetectionPrediction::MergeFrom(const DetectionPrediction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sagittarius.translation.v1.DetectionPrediction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.language_code().size() > 0) {
    set_language_code(from.language_code());
  }
  if (!(from.confidence() <= 0 && from.confidence() >= 0)) {
    set_confidence(from.confidence());
  }
}

void DetectionPrediction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sagittarius.translation.v1.DetectionPrediction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectionPrediction::CopyFrom(const DetectionPrediction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sagittarius.translation.v1.DetectionPrediction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectionPrediction::IsInitialized() const {
  return true;
}

void DetectionPrediction::Swap(DetectionPrediction* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DetectionPrediction* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void DetectionPrediction::UnsafeArenaSwap(DetectionPrediction* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DetectionPrediction::InternalSwap(DetectionPrediction* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  language_code_.Swap(&other->language_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(confidence_, other->confidence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DetectionPrediction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TranscriptRequest::InitAsDefaultInstance() {
}
class TranscriptRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TranscriptRequest::kTranscriptIdentityFieldNumber;
const int TranscriptRequest::kStartTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TranscriptRequest::TranscriptRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sagittarius.translation.v1.TranscriptRequest)
}
TranscriptRequest::TranscriptRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sagittarius.translation.v1.TranscriptRequest)
}
TranscriptRequest::TranscriptRequest(const TranscriptRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  transcript_identity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.transcript_identity().size() > 0) {
    transcript_identity_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.transcript_identity(),
      GetArenaNoVirtual());
  }
  start_time_ = from.start_time_;
  // @@protoc_insertion_point(copy_constructor:sagittarius.translation.v1.TranscriptRequest)
}

void TranscriptRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TranscriptRequest_translation_2fv1_2ftranslation_2eproto.base);
  transcript_identity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  start_time_ = 0;
}

TranscriptRequest::~TranscriptRequest() {
  // @@protoc_insertion_point(destructor:sagittarius.translation.v1.TranscriptRequest)
  SharedDtor();
}

void TranscriptRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  transcript_identity_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TranscriptRequest::ArenaDtor(void* object) {
  TranscriptRequest* _this = reinterpret_cast< TranscriptRequest* >(object);
  (void)_this;
}
void TranscriptRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TranscriptRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TranscriptRequest& TranscriptRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TranscriptRequest_translation_2fv1_2ftranslation_2eproto.base);
  return *internal_default_instance();
}


void TranscriptRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sagittarius.translation.v1.TranscriptRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transcript_identity_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  start_time_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TranscriptRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string transcript_identity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_transcript_identity(), ptr, ctx, "sagittarius.translation.v1.TranscriptRequest.transcript_identity");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double start_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TranscriptRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sagittarius.translation.v1.TranscriptRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string transcript_identity = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_transcript_identity()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->transcript_identity().data(), static_cast<int>(this->transcript_identity().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "sagittarius.translation.v1.TranscriptRequest.transcript_identity"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double start_time = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (49 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sagittarius.translation.v1.TranscriptRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sagittarius.translation.v1.TranscriptRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TranscriptRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sagittarius.translation.v1.TranscriptRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string transcript_identity = 4;
  if (this->transcript_identity().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->transcript_identity().data(), static_cast<int>(this->transcript_identity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sagittarius.translation.v1.TranscriptRequest.transcript_identity");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->transcript_identity(), output);
  }

  // double start_time = 6;
  if (!(this->start_time() <= 0 && this->start_time() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(6, this->start_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sagittarius.translation.v1.TranscriptRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* TranscriptRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sagittarius.translation.v1.TranscriptRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string transcript_identity = 4;
  if (this->transcript_identity().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->transcript_identity().data(), static_cast<int>(this->transcript_identity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sagittarius.translation.v1.TranscriptRequest.transcript_identity");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->transcript_identity(), target);
  }

  // double start_time = 6;
  if (!(this->start_time() <= 0 && this->start_time() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->start_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sagittarius.translation.v1.TranscriptRequest)
  return target;
}

size_t TranscriptRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sagittarius.translation.v1.TranscriptRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string transcript_identity = 4;
  if (this->transcript_identity().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->transcript_identity());
  }

  // double start_time = 6;
  if (!(this->start_time() <= 0 && this->start_time() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TranscriptRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sagittarius.translation.v1.TranscriptRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TranscriptRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TranscriptRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sagittarius.translation.v1.TranscriptRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sagittarius.translation.v1.TranscriptRequest)
    MergeFrom(*source);
  }
}

void TranscriptRequest::MergeFrom(const TranscriptRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sagittarius.translation.v1.TranscriptRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.transcript_identity().size() > 0) {
    set_transcript_identity(from.transcript_identity());
  }
  if (!(from.start_time() <= 0 && from.start_time() >= 0)) {
    set_start_time(from.start_time());
  }
}

void TranscriptRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sagittarius.translation.v1.TranscriptRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TranscriptRequest::CopyFrom(const TranscriptRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sagittarius.translation.v1.TranscriptRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TranscriptRequest::IsInitialized() const {
  return true;
}

void TranscriptRequest::Swap(TranscriptRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    TranscriptRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void TranscriptRequest::UnsafeArenaSwap(TranscriptRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void TranscriptRequest::InternalSwap(TranscriptRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  transcript_identity_.Swap(&other->transcript_identity_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(start_time_, other->start_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TranscriptRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TranscriptResponse_Cue::InitAsDefaultInstance() {
}
class TranscriptResponse_Cue::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TranscriptResponse_Cue::kStartTimeFieldNumber;
const int TranscriptResponse_Cue::kEndTimeFieldNumber;
const int TranscriptResponse_Cue::kTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TranscriptResponse_Cue::TranscriptResponse_Cue()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sagittarius.translation.v1.TranscriptResponse.Cue)
}
TranscriptResponse_Cue::TranscriptResponse_Cue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sagittarius.translation.v1.TranscriptResponse.Cue)
}
TranscriptResponse_Cue::TranscriptResponse_Cue(const TranscriptResponse_Cue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.text().size() > 0) {
    text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.text(),
      GetArenaNoVirtual());
  }
  ::memcpy(&start_time_, &from.start_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_time_) -
    reinterpret_cast<char*>(&start_time_)) + sizeof(end_time_));
  // @@protoc_insertion_point(copy_constructor:sagittarius.translation.v1.TranscriptResponse.Cue)
}

void TranscriptResponse_Cue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TranscriptResponse_Cue_translation_2fv1_2ftranslation_2eproto.base);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_time_) -
      reinterpret_cast<char*>(&start_time_)) + sizeof(end_time_));
}

TranscriptResponse_Cue::~TranscriptResponse_Cue() {
  // @@protoc_insertion_point(destructor:sagittarius.translation.v1.TranscriptResponse.Cue)
  SharedDtor();
}

void TranscriptResponse_Cue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TranscriptResponse_Cue::ArenaDtor(void* object) {
  TranscriptResponse_Cue* _this = reinterpret_cast< TranscriptResponse_Cue* >(object);
  (void)_this;
}
void TranscriptResponse_Cue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TranscriptResponse_Cue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TranscriptResponse_Cue& TranscriptResponse_Cue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TranscriptResponse_Cue_translation_2fv1_2ftranslation_2eproto.base);
  return *internal_default_instance();
}


void TranscriptResponse_Cue::Clear() {
// @@protoc_insertion_point(message_clear_start:sagittarius.translation.v1.TranscriptResponse.Cue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  text_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ::memset(&start_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_time_) -
      reinterpret_cast<char*>(&start_time_)) + sizeof(end_time_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TranscriptResponse_Cue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double start_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double end_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string text = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_text(), ptr, ctx, "sagittarius.translation.v1.TranscriptResponse.Cue.text");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TranscriptResponse_Cue::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sagittarius.translation.v1.TranscriptResponse.Cue)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double start_time = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double end_time = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &end_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string text = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->text().data(), static_cast<int>(this->text().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "sagittarius.translation.v1.TranscriptResponse.Cue.text"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sagittarius.translation.v1.TranscriptResponse.Cue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sagittarius.translation.v1.TranscriptResponse.Cue)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TranscriptResponse_Cue::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sagittarius.translation.v1.TranscriptResponse.Cue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double start_time = 1;
  if (!(this->start_time() <= 0 && this->start_time() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->start_time(), output);
  }

  // double end_time = 2;
  if (!(this->end_time() <= 0 && this->end_time() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->end_time(), output);
  }

  // string text = 3;
  if (this->text().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), static_cast<int>(this->text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sagittarius.translation.v1.TranscriptResponse.Cue.text");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->text(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sagittarius.translation.v1.TranscriptResponse.Cue)
}

::PROTOBUF_NAMESPACE_ID::uint8* TranscriptResponse_Cue::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sagittarius.translation.v1.TranscriptResponse.Cue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double start_time = 1;
  if (!(this->start_time() <= 0 && this->start_time() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->start_time(), target);
  }

  // double end_time = 2;
  if (!(this->end_time() <= 0 && this->end_time() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->end_time(), target);
  }

  // string text = 3;
  if (this->text().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), static_cast<int>(this->text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sagittarius.translation.v1.TranscriptResponse.Cue.text");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->text(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sagittarius.translation.v1.TranscriptResponse.Cue)
  return target;
}

size_t TranscriptResponse_Cue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sagittarius.translation.v1.TranscriptResponse.Cue)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string text = 3;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->text());
  }

  // double start_time = 1;
  if (!(this->start_time() <= 0 && this->start_time() >= 0)) {
    total_size += 1 + 8;
  }

  // double end_time = 2;
  if (!(this->end_time() <= 0 && this->end_time() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TranscriptResponse_Cue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sagittarius.translation.v1.TranscriptResponse.Cue)
  GOOGLE_DCHECK_NE(&from, this);
  const TranscriptResponse_Cue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TranscriptResponse_Cue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sagittarius.translation.v1.TranscriptResponse.Cue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sagittarius.translation.v1.TranscriptResponse.Cue)
    MergeFrom(*source);
  }
}

void TranscriptResponse_Cue::MergeFrom(const TranscriptResponse_Cue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sagittarius.translation.v1.TranscriptResponse.Cue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.text().size() > 0) {
    set_text(from.text());
  }
  if (!(from.start_time() <= 0 && from.start_time() >= 0)) {
    set_start_time(from.start_time());
  }
  if (!(from.end_time() <= 0 && from.end_time() >= 0)) {
    set_end_time(from.end_time());
  }
}

void TranscriptResponse_Cue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sagittarius.translation.v1.TranscriptResponse.Cue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TranscriptResponse_Cue::CopyFrom(const TranscriptResponse_Cue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sagittarius.translation.v1.TranscriptResponse.Cue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TranscriptResponse_Cue::IsInitialized() const {
  return true;
}

void TranscriptResponse_Cue::Swap(TranscriptResponse_Cue* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    TranscriptResponse_Cue* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void TranscriptResponse_Cue::UnsafeArenaSwap(TranscriptResponse_Cue* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void TranscriptResponse_Cue::InternalSwap(TranscriptResponse_Cue* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(start_time_, other->start_time_);
  swap(end_time_, other->end_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TranscriptResponse_Cue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TranscriptResponse::InitAsDefaultInstance() {
  ::sagittarius::translation::v1::_TranscriptResponse_default_instance_._instance.get_mutable()->error_ = const_cast< ::google::rpc::Status*>(
      ::google::rpc::Status::internal_default_instance());
}
class TranscriptResponse::HasBitSetters {
 public:
  static const ::google::rpc::Status& error(const TranscriptResponse* msg);
};

const ::google::rpc::Status&
TranscriptResponse::HasBitSetters::error(const TranscriptResponse* msg) {
  return *msg->error_;
}
void TranscriptResponse::unsafe_arena_set_allocated_error(
    ::google::rpc::Status* error) {
  if (GetArenaNoVirtual() == nullptr) {
    delete error_;
  }
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sagittarius.translation.v1.TranscriptResponse.error)
}
void TranscriptResponse::clear_error() {
  if (GetArenaNoVirtual() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TranscriptResponse::kErrorFieldNumber;
const int TranscriptResponse::kTranscriptsFieldNumber;
const int TranscriptResponse::kIsEndOfTranscriptFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TranscriptResponse::TranscriptResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sagittarius.translation.v1.TranscriptResponse)
}
TranscriptResponse::TranscriptResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  transcripts_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sagittarius.translation.v1.TranscriptResponse)
}
TranscriptResponse::TranscriptResponse(const TranscriptResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      transcripts_(from.transcripts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_error()) {
    error_ = new ::google::rpc::Status(*from.error_);
  } else {
    error_ = nullptr;
  }
  is_end_of_transcript_ = from.is_end_of_transcript_;
  // @@protoc_insertion_point(copy_constructor:sagittarius.translation.v1.TranscriptResponse)
}

void TranscriptResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TranscriptResponse_translation_2fv1_2ftranslation_2eproto.base);
  ::memset(&error_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_end_of_transcript_) -
      reinterpret_cast<char*>(&error_)) + sizeof(is_end_of_transcript_));
}

TranscriptResponse::~TranscriptResponse() {
  // @@protoc_insertion_point(destructor:sagittarius.translation.v1.TranscriptResponse)
  SharedDtor();
}

void TranscriptResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete error_;
}

void TranscriptResponse::ArenaDtor(void* object) {
  TranscriptResponse* _this = reinterpret_cast< TranscriptResponse* >(object);
  (void)_this;
}
void TranscriptResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TranscriptResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TranscriptResponse& TranscriptResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TranscriptResponse_translation_2fv1_2ftranslation_2eproto.base);
  return *internal_default_instance();
}


void TranscriptResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sagittarius.translation.v1.TranscriptResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transcripts_.Clear();
  if (GetArenaNoVirtual() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
  is_end_of_transcript_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TranscriptResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.rpc.Status error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_error(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .sagittarius.translation.v1.TranscriptResponse.Cue transcripts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_transcripts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // bool is_end_of_transcript = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          is_end_of_transcript_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TranscriptResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sagittarius.translation.v1.TranscriptResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.rpc.Status error = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sagittarius.translation.v1.TranscriptResponse.Cue transcripts = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_transcripts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_end_of_transcript = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_end_of_transcript_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sagittarius.translation.v1.TranscriptResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sagittarius.translation.v1.TranscriptResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TranscriptResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sagittarius.translation.v1.TranscriptResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.rpc.Status error = 1;
  if (this->has_error()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::error(this), output);
  }

  // repeated .sagittarius.translation.v1.TranscriptResponse.Cue transcripts = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->transcripts_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->transcripts(static_cast<int>(i)),
      output);
  }

  // bool is_end_of_transcript = 3;
  if (this->is_end_of_transcript() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->is_end_of_transcript(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sagittarius.translation.v1.TranscriptResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* TranscriptResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sagittarius.translation.v1.TranscriptResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.rpc.Status error = 1;
  if (this->has_error()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::error(this), target);
  }

  // repeated .sagittarius.translation.v1.TranscriptResponse.Cue transcripts = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->transcripts_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->transcripts(static_cast<int>(i)), target);
  }

  // bool is_end_of_transcript = 3;
  if (this->is_end_of_transcript() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->is_end_of_transcript(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sagittarius.translation.v1.TranscriptResponse)
  return target;
}

size_t TranscriptResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sagittarius.translation.v1.TranscriptResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sagittarius.translation.v1.TranscriptResponse.Cue transcripts = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->transcripts_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->transcripts(static_cast<int>(i)));
    }
  }

  // .google.rpc.Status error = 1;
  if (this->has_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *error_);
  }

  // bool is_end_of_transcript = 3;
  if (this->is_end_of_transcript() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TranscriptResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sagittarius.translation.v1.TranscriptResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TranscriptResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TranscriptResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sagittarius.translation.v1.TranscriptResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sagittarius.translation.v1.TranscriptResponse)
    MergeFrom(*source);
  }
}

void TranscriptResponse::MergeFrom(const TranscriptResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sagittarius.translation.v1.TranscriptResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  transcripts_.MergeFrom(from.transcripts_);
  if (from.has_error()) {
    mutable_error()->::google::rpc::Status::MergeFrom(from.error());
  }
  if (from.is_end_of_transcript() != 0) {
    set_is_end_of_transcript(from.is_end_of_transcript());
  }
}

void TranscriptResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sagittarius.translation.v1.TranscriptResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TranscriptResponse::CopyFrom(const TranscriptResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sagittarius.translation.v1.TranscriptResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TranscriptResponse::IsInitialized() const {
  return true;
}

void TranscriptResponse::Swap(TranscriptResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    TranscriptResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void TranscriptResponse::UnsafeArenaSwap(TranscriptResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void TranscriptResponse::InternalSwap(TranscriptResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&transcripts_)->InternalSwap(CastToBase(&other->transcripts_));
  swap(error_, other->error_);
  swap(is_end_of_transcript_, other->is_end_of_transcript_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TranscriptResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StreamingTranslationRequest::InitAsDefaultInstance() {
  ::sagittarius::translation::v1::_StreamingTranslationRequest_default_instance_.streaming_config_ = const_cast< ::sagittarius::translation::v1::StreamingTranslationRequestConfig*>(
      ::sagittarius::translation::v1::StreamingTranslationRequestConfig::internal_default_instance());
  ::sagittarius::translation::v1::_StreamingTranslationRequest_default_instance_.audio_content_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
class StreamingTranslationRequest::HasBitSetters {
 public:
  static const ::sagittarius::translation::v1::StreamingTranslationRequestConfig& streaming_config(const StreamingTranslationRequest* msg);
};

const ::sagittarius::translation::v1::StreamingTranslationRequestConfig&
StreamingTranslationRequest::HasBitSetters::streaming_config(const StreamingTranslationRequest* msg) {
  return *msg->streaming_request_.streaming_config_;
}
void StreamingTranslationRequest::set_allocated_streaming_config(::sagittarius::translation::v1::StreamingTranslationRequestConfig* streaming_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_streaming_request();
  if (streaming_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(streaming_config);
    if (message_arena != submessage_arena) {
      streaming_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, streaming_config, submessage_arena);
    }
    set_has_streaming_config();
    streaming_request_.streaming_config_ = streaming_config;
  }
  // @@protoc_insertion_point(field_set_allocated:sagittarius.translation.v1.StreamingTranslationRequest.streaming_config)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StreamingTranslationRequest::kStreamingConfigFieldNumber;
const int StreamingTranslationRequest::kAudioContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StreamingTranslationRequest::StreamingTranslationRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sagittarius.translation.v1.StreamingTranslationRequest)
}
StreamingTranslationRequest::StreamingTranslationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sagittarius.translation.v1.StreamingTranslationRequest)
}
StreamingTranslationRequest::StreamingTranslationRequest(const StreamingTranslationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_streaming_request();
  switch (from.streaming_request_case()) {
    case kStreamingConfig: {
      mutable_streaming_config()->::sagittarius::translation::v1::StreamingTranslationRequestConfig::MergeFrom(from.streaming_config());
      break;
    }
    case kAudioContent: {
      set_audio_content(from.audio_content());
      break;
    }
    case STREAMING_REQUEST_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:sagittarius.translation.v1.StreamingTranslationRequest)
}

void StreamingTranslationRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StreamingTranslationRequest_translation_2fv1_2ftranslation_2eproto.base);
  clear_has_streaming_request();
}

StreamingTranslationRequest::~StreamingTranslationRequest() {
  // @@protoc_insertion_point(destructor:sagittarius.translation.v1.StreamingTranslationRequest)
  SharedDtor();
}

void StreamingTranslationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (has_streaming_request()) {
    clear_streaming_request();
  }
}

void StreamingTranslationRequest::ArenaDtor(void* object) {
  StreamingTranslationRequest* _this = reinterpret_cast< StreamingTranslationRequest* >(object);
  (void)_this;
}
void StreamingTranslationRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamingTranslationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StreamingTranslationRequest& StreamingTranslationRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StreamingTranslationRequest_translation_2fv1_2ftranslation_2eproto.base);
  return *internal_default_instance();
}


void StreamingTranslationRequest::clear_streaming_request() {
// @@protoc_insertion_point(one_of_clear_start:sagittarius.translation.v1.StreamingTranslationRequest)
  switch (streaming_request_case()) {
    case kStreamingConfig: {
      if (GetArenaNoVirtual() == nullptr) {
        delete streaming_request_.streaming_config_;
      }
      break;
    }
    case kAudioContent: {
      streaming_request_.audio_content_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          GetArenaNoVirtual());
      break;
    }
    case STREAMING_REQUEST_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = STREAMING_REQUEST_NOT_SET;
}


void StreamingTranslationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sagittarius.translation.v1.StreamingTranslationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_streaming_request();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StreamingTranslationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .sagittarius.translation.v1.StreamingTranslationRequestConfig streaming_config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_streaming_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes audio_content = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_audio_content(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StreamingTranslationRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sagittarius.translation.v1.StreamingTranslationRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sagittarius.translation.v1.StreamingTranslationRequestConfig streaming_config = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_streaming_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes audio_content = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_audio_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sagittarius.translation.v1.StreamingTranslationRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sagittarius.translation.v1.StreamingTranslationRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StreamingTranslationRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sagittarius.translation.v1.StreamingTranslationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sagittarius.translation.v1.StreamingTranslationRequestConfig streaming_config = 1;
  if (has_streaming_config()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::streaming_config(this), output);
  }

  // bytes audio_content = 2;
  if (has_audio_content()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->audio_content(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sagittarius.translation.v1.StreamingTranslationRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamingTranslationRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sagittarius.translation.v1.StreamingTranslationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sagittarius.translation.v1.StreamingTranslationRequestConfig streaming_config = 1;
  if (has_streaming_config()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::streaming_config(this), target);
  }

  // bytes audio_content = 2;
  if (has_audio_content()) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->audio_content(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sagittarius.translation.v1.StreamingTranslationRequest)
  return target;
}

size_t StreamingTranslationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sagittarius.translation.v1.StreamingTranslationRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (streaming_request_case()) {
    // .sagittarius.translation.v1.StreamingTranslationRequestConfig streaming_config = 1;
    case kStreamingConfig: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *streaming_request_.streaming_config_);
      break;
    }
    // bytes audio_content = 2;
    case kAudioContent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->audio_content());
      break;
    }
    case STREAMING_REQUEST_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamingTranslationRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sagittarius.translation.v1.StreamingTranslationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamingTranslationRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StreamingTranslationRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sagittarius.translation.v1.StreamingTranslationRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sagittarius.translation.v1.StreamingTranslationRequest)
    MergeFrom(*source);
  }
}

void StreamingTranslationRequest::MergeFrom(const StreamingTranslationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sagittarius.translation.v1.StreamingTranslationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.streaming_request_case()) {
    case kStreamingConfig: {
      mutable_streaming_config()->::sagittarius::translation::v1::StreamingTranslationRequestConfig::MergeFrom(from.streaming_config());
      break;
    }
    case kAudioContent: {
      set_audio_content(from.audio_content());
      break;
    }
    case STREAMING_REQUEST_NOT_SET: {
      break;
    }
  }
}

void StreamingTranslationRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sagittarius.translation.v1.StreamingTranslationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamingTranslationRequest::CopyFrom(const StreamingTranslationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sagittarius.translation.v1.StreamingTranslationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamingTranslationRequest::IsInitialized() const {
  return true;
}

void StreamingTranslationRequest::Swap(StreamingTranslationRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    StreamingTranslationRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void StreamingTranslationRequest::UnsafeArenaSwap(StreamingTranslationRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void StreamingTranslationRequest::InternalSwap(StreamingTranslationRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(streaming_request_, other->streaming_request_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamingTranslationRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StreamingTranslationRequestConfig::InitAsDefaultInstance() {
  ::sagittarius::translation::v1::_StreamingTranslationRequestConfig_default_instance_._instance.get_mutable()->streaming_config_ = const_cast< ::google::cloud::speech::v1::RecognitionConfig*>(
      ::google::cloud::speech::v1::RecognitionConfig::internal_default_instance());
}
class StreamingTranslationRequestConfig::HasBitSetters {
 public:
  static const ::google::cloud::speech::v1::RecognitionConfig& streaming_config(const StreamingTranslationRequestConfig* msg);
};

const ::google::cloud::speech::v1::RecognitionConfig&
StreamingTranslationRequestConfig::HasBitSetters::streaming_config(const StreamingTranslationRequestConfig* msg) {
  return *msg->streaming_config_;
}
void StreamingTranslationRequestConfig::unsafe_arena_set_allocated_streaming_config(
    ::google::cloud::speech::v1::RecognitionConfig* streaming_config) {
  if (GetArenaNoVirtual() == nullptr) {
    delete streaming_config_;
  }
  streaming_config_ = streaming_config;
  if (streaming_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sagittarius.translation.v1.StreamingTranslationRequestConfig.streaming_config)
}
void StreamingTranslationRequestConfig::clear_streaming_config() {
  if (GetArenaNoVirtual() == nullptr && streaming_config_ != nullptr) {
    delete streaming_config_;
  }
  streaming_config_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StreamingTranslationRequestConfig::kStreamingConfigFieldNumber;
const int StreamingTranslationRequestConfig::kMediaIdentityFieldNumber;
const int StreamingTranslationRequestConfig::kAudioLanguageCodeFieldNumber;
const int StreamingTranslationRequestConfig::kTargetLanguageCodeFieldNumber;
const int StreamingTranslationRequestConfig::kAudioTrackFieldNumber;
const int StreamingTranslationRequestConfig::kHintsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StreamingTranslationRequestConfig::StreamingTranslationRequestConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sagittarius.translation.v1.StreamingTranslationRequestConfig)
}
StreamingTranslationRequestConfig::StreamingTranslationRequestConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sagittarius.translation.v1.StreamingTranslationRequestConfig)
}
StreamingTranslationRequestConfig::StreamingTranslationRequestConfig(const StreamingTranslationRequestConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  media_identity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.media_identity().size() > 0) {
    media_identity_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.media_identity(),
      GetArenaNoVirtual());
  }
  audio_language_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.audio_language_code().size() > 0) {
    audio_language_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.audio_language_code(),
      GetArenaNoVirtual());
  }
  target_language_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.target_language_code().size() > 0) {
    target_language_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.target_language_code(),
      GetArenaNoVirtual());
  }
  audio_track_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.audio_track().size() > 0) {
    audio_track_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.audio_track(),
      GetArenaNoVirtual());
  }
  hints_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.hints().size() > 0) {
    hints_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hints(),
      GetArenaNoVirtual());
  }
  if (from.has_streaming_config()) {
    streaming_config_ = new ::google::cloud::speech::v1::RecognitionConfig(*from.streaming_config_);
  } else {
    streaming_config_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:sagittarius.translation.v1.StreamingTranslationRequestConfig)
}

void StreamingTranslationRequestConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StreamingTranslationRequestConfig_translation_2fv1_2ftranslation_2eproto.base);
  media_identity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  audio_language_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  target_language_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  audio_track_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hints_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  streaming_config_ = nullptr;
}

StreamingTranslationRequestConfig::~StreamingTranslationRequestConfig() {
  // @@protoc_insertion_point(destructor:sagittarius.translation.v1.StreamingTranslationRequestConfig)
  SharedDtor();
}

void StreamingTranslationRequestConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  media_identity_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  audio_language_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  target_language_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  audio_track_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hints_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete streaming_config_;
}

void StreamingTranslationRequestConfig::ArenaDtor(void* object) {
  StreamingTranslationRequestConfig* _this = reinterpret_cast< StreamingTranslationRequestConfig* >(object);
  (void)_this;
}
void StreamingTranslationRequestConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamingTranslationRequestConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StreamingTranslationRequestConfig& StreamingTranslationRequestConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StreamingTranslationRequestConfig_translation_2fv1_2ftranslation_2eproto.base);
  return *internal_default_instance();
}


void StreamingTranslationRequestConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:sagittarius.translation.v1.StreamingTranslationRequestConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  media_identity_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  audio_language_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  target_language_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  audio_track_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  hints_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == nullptr && streaming_config_ != nullptr) {
    delete streaming_config_;
  }
  streaming_config_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StreamingTranslationRequestConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.cloud.speech.v1.RecognitionConfig streaming_config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_streaming_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string media_identity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_media_identity(), ptr, ctx, "sagittarius.translation.v1.StreamingTranslationRequestConfig.media_identity");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string audio_language_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_audio_language_code(), ptr, ctx, "sagittarius.translation.v1.StreamingTranslationRequestConfig.audio_language_code");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string target_language_code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_target_language_code(), ptr, ctx, "sagittarius.translation.v1.StreamingTranslationRequestConfig.target_language_code");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string audio_track = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_audio_track(), ptr, ctx, "sagittarius.translation.v1.StreamingTranslationRequestConfig.audio_track");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string hints = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_hints(), ptr, ctx, "sagittarius.translation.v1.StreamingTranslationRequestConfig.hints");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StreamingTranslationRequestConfig::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sagittarius.translation.v1.StreamingTranslationRequestConfig)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.cloud.speech.v1.RecognitionConfig streaming_config = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_streaming_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string media_identity = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_media_identity()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->media_identity().data(), static_cast<int>(this->media_identity().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "sagittarius.translation.v1.StreamingTranslationRequestConfig.media_identity"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string audio_language_code = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_audio_language_code()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->audio_language_code().data(), static_cast<int>(this->audio_language_code().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "sagittarius.translation.v1.StreamingTranslationRequestConfig.audio_language_code"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string target_language_code = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_target_language_code()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->target_language_code().data(), static_cast<int>(this->target_language_code().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "sagittarius.translation.v1.StreamingTranslationRequestConfig.target_language_code"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string audio_track = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_audio_track()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->audio_track().data(), static_cast<int>(this->audio_track().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "sagittarius.translation.v1.StreamingTranslationRequestConfig.audio_track"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string hints = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_hints()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->hints().data(), static_cast<int>(this->hints().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "sagittarius.translation.v1.StreamingTranslationRequestConfig.hints"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sagittarius.translation.v1.StreamingTranslationRequestConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sagittarius.translation.v1.StreamingTranslationRequestConfig)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StreamingTranslationRequestConfig::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sagittarius.translation.v1.StreamingTranslationRequestConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.speech.v1.RecognitionConfig streaming_config = 1;
  if (this->has_streaming_config()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::streaming_config(this), output);
  }

  // string media_identity = 2;
  if (this->media_identity().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->media_identity().data(), static_cast<int>(this->media_identity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sagittarius.translation.v1.StreamingTranslationRequestConfig.media_identity");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->media_identity(), output);
  }

  // string audio_language_code = 3;
  if (this->audio_language_code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->audio_language_code().data(), static_cast<int>(this->audio_language_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sagittarius.translation.v1.StreamingTranslationRequestConfig.audio_language_code");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->audio_language_code(), output);
  }

  // string target_language_code = 4;
  if (this->target_language_code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->target_language_code().data(), static_cast<int>(this->target_language_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sagittarius.translation.v1.StreamingTranslationRequestConfig.target_language_code");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->target_language_code(), output);
  }

  // string audio_track = 5;
  if (this->audio_track().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->audio_track().data(), static_cast<int>(this->audio_track().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sagittarius.translation.v1.StreamingTranslationRequestConfig.audio_track");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->audio_track(), output);
  }

  // string hints = 6;
  if (this->hints().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->hints().data(), static_cast<int>(this->hints().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sagittarius.translation.v1.StreamingTranslationRequestConfig.hints");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->hints(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sagittarius.translation.v1.StreamingTranslationRequestConfig)
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamingTranslationRequestConfig::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sagittarius.translation.v1.StreamingTranslationRequestConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.cloud.speech.v1.RecognitionConfig streaming_config = 1;
  if (this->has_streaming_config()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::streaming_config(this), target);
  }

  // string media_identity = 2;
  if (this->media_identity().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->media_identity().data(), static_cast<int>(this->media_identity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sagittarius.translation.v1.StreamingTranslationRequestConfig.media_identity");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->media_identity(), target);
  }

  // string audio_language_code = 3;
  if (this->audio_language_code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->audio_language_code().data(), static_cast<int>(this->audio_language_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sagittarius.translation.v1.StreamingTranslationRequestConfig.audio_language_code");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->audio_language_code(), target);
  }

  // string target_language_code = 4;
  if (this->target_language_code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->target_language_code().data(), static_cast<int>(this->target_language_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sagittarius.translation.v1.StreamingTranslationRequestConfig.target_language_code");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->target_language_code(), target);
  }

  // string audio_track = 5;
  if (this->audio_track().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->audio_track().data(), static_cast<int>(this->audio_track().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sagittarius.translation.v1.StreamingTranslationRequestConfig.audio_track");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->audio_track(), target);
  }

  // string hints = 6;
  if (this->hints().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->hints().data(), static_cast<int>(this->hints().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sagittarius.translation.v1.StreamingTranslationRequestConfig.hints");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        6, this->hints(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sagittarius.translation.v1.StreamingTranslationRequestConfig)
  return target;
}

size_t StreamingTranslationRequestConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sagittarius.translation.v1.StreamingTranslationRequestConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string media_identity = 2;
  if (this->media_identity().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->media_identity());
  }

  // string audio_language_code = 3;
  if (this->audio_language_code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->audio_language_code());
  }

  // string target_language_code = 4;
  if (this->target_language_code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->target_language_code());
  }

  // string audio_track = 5;
  if (this->audio_track().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->audio_track());
  }

  // string hints = 6;
  if (this->hints().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->hints());
  }

  // .google.cloud.speech.v1.RecognitionConfig streaming_config = 1;
  if (this->has_streaming_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *streaming_config_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamingTranslationRequestConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sagittarius.translation.v1.StreamingTranslationRequestConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamingTranslationRequestConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StreamingTranslationRequestConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sagittarius.translation.v1.StreamingTranslationRequestConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sagittarius.translation.v1.StreamingTranslationRequestConfig)
    MergeFrom(*source);
  }
}

void StreamingTranslationRequestConfig::MergeFrom(const StreamingTranslationRequestConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sagittarius.translation.v1.StreamingTranslationRequestConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.media_identity().size() > 0) {
    set_media_identity(from.media_identity());
  }
  if (from.audio_language_code().size() > 0) {
    set_audio_language_code(from.audio_language_code());
  }
  if (from.target_language_code().size() > 0) {
    set_target_language_code(from.target_language_code());
  }
  if (from.audio_track().size() > 0) {
    set_audio_track(from.audio_track());
  }
  if (from.hints().size() > 0) {
    set_hints(from.hints());
  }
  if (from.has_streaming_config()) {
    mutable_streaming_config()->::google::cloud::speech::v1::RecognitionConfig::MergeFrom(from.streaming_config());
  }
}

void StreamingTranslationRequestConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sagittarius.translation.v1.StreamingTranslationRequestConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamingTranslationRequestConfig::CopyFrom(const StreamingTranslationRequestConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sagittarius.translation.v1.StreamingTranslationRequestConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamingTranslationRequestConfig::IsInitialized() const {
  return true;
}

void StreamingTranslationRequestConfig::Swap(StreamingTranslationRequestConfig* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    StreamingTranslationRequestConfig* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void StreamingTranslationRequestConfig::UnsafeArenaSwap(StreamingTranslationRequestConfig* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void StreamingTranslationRequestConfig::InternalSwap(StreamingTranslationRequestConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  media_identity_.Swap(&other->media_identity_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  audio_language_code_.Swap(&other->audio_language_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  target_language_code_.Swap(&other->target_language_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  audio_track_.Swap(&other->audio_track_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hints_.Swap(&other->hints_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(streaming_config_, other->streaming_config_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamingTranslationRequestConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StreamingTranslationResponse::InitAsDefaultInstance() {
  ::sagittarius::translation::v1::_StreamingTranslationResponse_default_instance_._instance.get_mutable()->error_ = const_cast< ::google::rpc::Status*>(
      ::google::rpc::Status::internal_default_instance());
  ::sagittarius::translation::v1::_StreamingTranslationResponse_default_instance_.streaming_result_ = const_cast< ::sagittarius::translation::v1::StreamingTranslationResult*>(
      ::sagittarius::translation::v1::StreamingTranslationResult::internal_default_instance());
  ::sagittarius::translation::v1::_StreamingTranslationResponse_default_instance_.taskinfo_ = const_cast< ::sagittarius::translation::v1::StreamingTranslationTaskInfo*>(
      ::sagittarius::translation::v1::StreamingTranslationTaskInfo::internal_default_instance());
  ::sagittarius::translation::v1::_StreamingTranslationResponse_default_instance_.transcript_result_ = const_cast< ::sagittarius::translation::v1::TranscriptInfo*>(
      ::sagittarius::translation::v1::TranscriptInfo::internal_default_instance());
}
class StreamingTranslationResponse::HasBitSetters {
 public:
  static const ::google::rpc::Status& error(const StreamingTranslationResponse* msg);
  static const ::sagittarius::translation::v1::StreamingTranslationResult& streaming_result(const StreamingTranslationResponse* msg);
  static const ::sagittarius::translation::v1::StreamingTranslationTaskInfo& taskinfo(const StreamingTranslationResponse* msg);
  static const ::sagittarius::translation::v1::TranscriptInfo& transcript_result(const StreamingTranslationResponse* msg);
};

const ::google::rpc::Status&
StreamingTranslationResponse::HasBitSetters::error(const StreamingTranslationResponse* msg) {
  return *msg->error_;
}
const ::sagittarius::translation::v1::StreamingTranslationResult&
StreamingTranslationResponse::HasBitSetters::streaming_result(const StreamingTranslationResponse* msg) {
  return *msg->streaming_response_.streaming_result_;
}
const ::sagittarius::translation::v1::StreamingTranslationTaskInfo&
StreamingTranslationResponse::HasBitSetters::taskinfo(const StreamingTranslationResponse* msg) {
  return *msg->streaming_response_.taskinfo_;
}
const ::sagittarius::translation::v1::TranscriptInfo&
StreamingTranslationResponse::HasBitSetters::transcript_result(const StreamingTranslationResponse* msg) {
  return *msg->streaming_response_.transcript_result_;
}
void StreamingTranslationResponse::unsafe_arena_set_allocated_error(
    ::google::rpc::Status* error) {
  if (GetArenaNoVirtual() == nullptr) {
    delete error_;
  }
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sagittarius.translation.v1.StreamingTranslationResponse.error)
}
void StreamingTranslationResponse::clear_error() {
  if (GetArenaNoVirtual() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
}
void StreamingTranslationResponse::set_allocated_streaming_result(::sagittarius::translation::v1::StreamingTranslationResult* streaming_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_streaming_response();
  if (streaming_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(streaming_result);
    if (message_arena != submessage_arena) {
      streaming_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, streaming_result, submessage_arena);
    }
    set_has_streaming_result();
    streaming_response_.streaming_result_ = streaming_result;
  }
  // @@protoc_insertion_point(field_set_allocated:sagittarius.translation.v1.StreamingTranslationResponse.streaming_result)
}
void StreamingTranslationResponse::set_allocated_taskinfo(::sagittarius::translation::v1::StreamingTranslationTaskInfo* taskinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_streaming_response();
  if (taskinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(taskinfo);
    if (message_arena != submessage_arena) {
      taskinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, taskinfo, submessage_arena);
    }
    set_has_taskinfo();
    streaming_response_.taskinfo_ = taskinfo;
  }
  // @@protoc_insertion_point(field_set_allocated:sagittarius.translation.v1.StreamingTranslationResponse.taskinfo)
}
void StreamingTranslationResponse::set_allocated_transcript_result(::sagittarius::translation::v1::TranscriptInfo* transcript_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_streaming_response();
  if (transcript_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(transcript_result);
    if (message_arena != submessage_arena) {
      transcript_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transcript_result, submessage_arena);
    }
    set_has_transcript_result();
    streaming_response_.transcript_result_ = transcript_result;
  }
  // @@protoc_insertion_point(field_set_allocated:sagittarius.translation.v1.StreamingTranslationResponse.transcript_result)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StreamingTranslationResponse::kErrorFieldNumber;
const int StreamingTranslationResponse::kStreamingResultFieldNumber;
const int StreamingTranslationResponse::kTaskinfoFieldNumber;
const int StreamingTranslationResponse::kTranscriptResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StreamingTranslationResponse::StreamingTranslationResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sagittarius.translation.v1.StreamingTranslationResponse)
}
StreamingTranslationResponse::StreamingTranslationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sagittarius.translation.v1.StreamingTranslationResponse)
}
StreamingTranslationResponse::StreamingTranslationResponse(const StreamingTranslationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_error()) {
    error_ = new ::google::rpc::Status(*from.error_);
  } else {
    error_ = nullptr;
  }
  clear_has_streaming_response();
  switch (from.streaming_response_case()) {
    case kStreamingResult: {
      mutable_streaming_result()->::sagittarius::translation::v1::StreamingTranslationResult::MergeFrom(from.streaming_result());
      break;
    }
    case kTaskinfo: {
      mutable_taskinfo()->::sagittarius::translation::v1::StreamingTranslationTaskInfo::MergeFrom(from.taskinfo());
      break;
    }
    case kTranscriptResult: {
      mutable_transcript_result()->::sagittarius::translation::v1::TranscriptInfo::MergeFrom(from.transcript_result());
      break;
    }
    case STREAMING_RESPONSE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:sagittarius.translation.v1.StreamingTranslationResponse)
}

void StreamingTranslationResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StreamingTranslationResponse_translation_2fv1_2ftranslation_2eproto.base);
  error_ = nullptr;
  clear_has_streaming_response();
}

StreamingTranslationResponse::~StreamingTranslationResponse() {
  // @@protoc_insertion_point(destructor:sagittarius.translation.v1.StreamingTranslationResponse)
  SharedDtor();
}

void StreamingTranslationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete error_;
  if (has_streaming_response()) {
    clear_streaming_response();
  }
}

void StreamingTranslationResponse::ArenaDtor(void* object) {
  StreamingTranslationResponse* _this = reinterpret_cast< StreamingTranslationResponse* >(object);
  (void)_this;
}
void StreamingTranslationResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamingTranslationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StreamingTranslationResponse& StreamingTranslationResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StreamingTranslationResponse_translation_2fv1_2ftranslation_2eproto.base);
  return *internal_default_instance();
}


void StreamingTranslationResponse::clear_streaming_response() {
// @@protoc_insertion_point(one_of_clear_start:sagittarius.translation.v1.StreamingTranslationResponse)
  switch (streaming_response_case()) {
    case kStreamingResult: {
      if (GetArenaNoVirtual() == nullptr) {
        delete streaming_response_.streaming_result_;
      }
      break;
    }
    case kTaskinfo: {
      if (GetArenaNoVirtual() == nullptr) {
        delete streaming_response_.taskinfo_;
      }
      break;
    }
    case kTranscriptResult: {
      if (GetArenaNoVirtual() == nullptr) {
        delete streaming_response_.transcript_result_;
      }
      break;
    }
    case STREAMING_RESPONSE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = STREAMING_RESPONSE_NOT_SET;
}


void StreamingTranslationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sagittarius.translation.v1.StreamingTranslationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
  clear_streaming_response();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StreamingTranslationResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.rpc.Status error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_error(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sagittarius.translation.v1.StreamingTranslationResult streaming_result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_streaming_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sagittarius.translation.v1.StreamingTranslationTaskInfo taskinfo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_taskinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sagittarius.translation.v1.TranscriptInfo transcript_result = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_transcript_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StreamingTranslationResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sagittarius.translation.v1.StreamingTranslationResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.rpc.Status error = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sagittarius.translation.v1.StreamingTranslationResult streaming_result = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_streaming_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sagittarius.translation.v1.StreamingTranslationTaskInfo taskinfo = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_taskinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sagittarius.translation.v1.TranscriptInfo transcript_result = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_transcript_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sagittarius.translation.v1.StreamingTranslationResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sagittarius.translation.v1.StreamingTranslationResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StreamingTranslationResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sagittarius.translation.v1.StreamingTranslationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.rpc.Status error = 1;
  if (this->has_error()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::error(this), output);
  }

  // .sagittarius.translation.v1.StreamingTranslationResult streaming_result = 2;
  if (has_streaming_result()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::streaming_result(this), output);
  }

  // .sagittarius.translation.v1.StreamingTranslationTaskInfo taskinfo = 3;
  if (has_taskinfo()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::taskinfo(this), output);
  }

  // .sagittarius.translation.v1.TranscriptInfo transcript_result = 4;
  if (has_transcript_result()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::transcript_result(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sagittarius.translation.v1.StreamingTranslationResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamingTranslationResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sagittarius.translation.v1.StreamingTranslationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.rpc.Status error = 1;
  if (this->has_error()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::error(this), target);
  }

  // .sagittarius.translation.v1.StreamingTranslationResult streaming_result = 2;
  if (has_streaming_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::streaming_result(this), target);
  }

  // .sagittarius.translation.v1.StreamingTranslationTaskInfo taskinfo = 3;
  if (has_taskinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::taskinfo(this), target);
  }

  // .sagittarius.translation.v1.TranscriptInfo transcript_result = 4;
  if (has_transcript_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::transcript_result(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sagittarius.translation.v1.StreamingTranslationResponse)
  return target;
}

size_t StreamingTranslationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sagittarius.translation.v1.StreamingTranslationResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.rpc.Status error = 1;
  if (this->has_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *error_);
  }

  switch (streaming_response_case()) {
    // .sagittarius.translation.v1.StreamingTranslationResult streaming_result = 2;
    case kStreamingResult: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *streaming_response_.streaming_result_);
      break;
    }
    // .sagittarius.translation.v1.StreamingTranslationTaskInfo taskinfo = 3;
    case kTaskinfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *streaming_response_.taskinfo_);
      break;
    }
    // .sagittarius.translation.v1.TranscriptInfo transcript_result = 4;
    case kTranscriptResult: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *streaming_response_.transcript_result_);
      break;
    }
    case STREAMING_RESPONSE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamingTranslationResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sagittarius.translation.v1.StreamingTranslationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamingTranslationResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StreamingTranslationResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sagittarius.translation.v1.StreamingTranslationResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sagittarius.translation.v1.StreamingTranslationResponse)
    MergeFrom(*source);
  }
}

void StreamingTranslationResponse::MergeFrom(const StreamingTranslationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sagittarius.translation.v1.StreamingTranslationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_error()) {
    mutable_error()->::google::rpc::Status::MergeFrom(from.error());
  }
  switch (from.streaming_response_case()) {
    case kStreamingResult: {
      mutable_streaming_result()->::sagittarius::translation::v1::StreamingTranslationResult::MergeFrom(from.streaming_result());
      break;
    }
    case kTaskinfo: {
      mutable_taskinfo()->::sagittarius::translation::v1::StreamingTranslationTaskInfo::MergeFrom(from.taskinfo());
      break;
    }
    case kTranscriptResult: {
      mutable_transcript_result()->::sagittarius::translation::v1::TranscriptInfo::MergeFrom(from.transcript_result());
      break;
    }
    case STREAMING_RESPONSE_NOT_SET: {
      break;
    }
  }
}

void StreamingTranslationResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sagittarius.translation.v1.StreamingTranslationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamingTranslationResponse::CopyFrom(const StreamingTranslationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sagittarius.translation.v1.StreamingTranslationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamingTranslationResponse::IsInitialized() const {
  return true;
}

void StreamingTranslationResponse::Swap(StreamingTranslationResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    StreamingTranslationResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void StreamingTranslationResponse::UnsafeArenaSwap(StreamingTranslationResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void StreamingTranslationResponse::InternalSwap(StreamingTranslationResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(error_, other->error_);
  swap(streaming_response_, other->streaming_response_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamingTranslationResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StreamingTranslationTaskRequest::InitAsDefaultInstance() {
}
class StreamingTranslationTaskRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StreamingTranslationTaskRequest::kTaskIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StreamingTranslationTaskRequest::StreamingTranslationTaskRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sagittarius.translation.v1.StreamingTranslationTaskRequest)
}
StreamingTranslationTaskRequest::StreamingTranslationTaskRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sagittarius.translation.v1.StreamingTranslationTaskRequest)
}
StreamingTranslationTaskRequest::StreamingTranslationTaskRequest(const StreamingTranslationTaskRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  task_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.task_id().size() > 0) {
    task_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.task_id(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:sagittarius.translation.v1.StreamingTranslationTaskRequest)
}

void StreamingTranslationTaskRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StreamingTranslationTaskRequest_translation_2fv1_2ftranslation_2eproto.base);
  task_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

StreamingTranslationTaskRequest::~StreamingTranslationTaskRequest() {
  // @@protoc_insertion_point(destructor:sagittarius.translation.v1.StreamingTranslationTaskRequest)
  SharedDtor();
}

void StreamingTranslationTaskRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  task_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StreamingTranslationTaskRequest::ArenaDtor(void* object) {
  StreamingTranslationTaskRequest* _this = reinterpret_cast< StreamingTranslationTaskRequest* >(object);
  (void)_this;
}
void StreamingTranslationTaskRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamingTranslationTaskRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StreamingTranslationTaskRequest& StreamingTranslationTaskRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StreamingTranslationTaskRequest_translation_2fv1_2ftranslation_2eproto.base);
  return *internal_default_instance();
}


void StreamingTranslationTaskRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sagittarius.translation.v1.StreamingTranslationTaskRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  task_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StreamingTranslationTaskRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string task_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_task_id(), ptr, ctx, "sagittarius.translation.v1.StreamingTranslationTaskRequest.task_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StreamingTranslationTaskRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sagittarius.translation.v1.StreamingTranslationTaskRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string task_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_task_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->task_id().data(), static_cast<int>(this->task_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "sagittarius.translation.v1.StreamingTranslationTaskRequest.task_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sagittarius.translation.v1.StreamingTranslationTaskRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sagittarius.translation.v1.StreamingTranslationTaskRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StreamingTranslationTaskRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sagittarius.translation.v1.StreamingTranslationTaskRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string task_id = 1;
  if (this->task_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->task_id().data(), static_cast<int>(this->task_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sagittarius.translation.v1.StreamingTranslationTaskRequest.task_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->task_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sagittarius.translation.v1.StreamingTranslationTaskRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamingTranslationTaskRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sagittarius.translation.v1.StreamingTranslationTaskRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string task_id = 1;
  if (this->task_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->task_id().data(), static_cast<int>(this->task_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sagittarius.translation.v1.StreamingTranslationTaskRequest.task_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->task_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sagittarius.translation.v1.StreamingTranslationTaskRequest)
  return target;
}

size_t StreamingTranslationTaskRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sagittarius.translation.v1.StreamingTranslationTaskRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string task_id = 1;
  if (this->task_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->task_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamingTranslationTaskRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sagittarius.translation.v1.StreamingTranslationTaskRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamingTranslationTaskRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StreamingTranslationTaskRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sagittarius.translation.v1.StreamingTranslationTaskRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sagittarius.translation.v1.StreamingTranslationTaskRequest)
    MergeFrom(*source);
  }
}

void StreamingTranslationTaskRequest::MergeFrom(const StreamingTranslationTaskRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sagittarius.translation.v1.StreamingTranslationTaskRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.task_id().size() > 0) {
    set_task_id(from.task_id());
  }
}

void StreamingTranslationTaskRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sagittarius.translation.v1.StreamingTranslationTaskRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamingTranslationTaskRequest::CopyFrom(const StreamingTranslationTaskRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sagittarius.translation.v1.StreamingTranslationTaskRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamingTranslationTaskRequest::IsInitialized() const {
  return true;
}

void StreamingTranslationTaskRequest::Swap(StreamingTranslationTaskRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    StreamingTranslationTaskRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void StreamingTranslationTaskRequest::UnsafeArenaSwap(StreamingTranslationTaskRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void StreamingTranslationTaskRequest::InternalSwap(StreamingTranslationTaskRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  task_id_.Swap(&other->task_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamingTranslationTaskRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StreamingTranslationTaskResponse::InitAsDefaultInstance() {
  ::sagittarius::translation::v1::_StreamingTranslationTaskResponse_default_instance_._instance.get_mutable()->error_ = const_cast< ::google::rpc::Status*>(
      ::google::rpc::Status::internal_default_instance());
  ::sagittarius::translation::v1::_StreamingTranslationTaskResponse_default_instance_.taskinfo_ = const_cast< ::sagittarius::translation::v1::StreamingTranslationTaskInfo*>(
      ::sagittarius::translation::v1::StreamingTranslationTaskInfo::internal_default_instance());
  ::sagittarius::translation::v1::_StreamingTranslationTaskResponse_default_instance_.transcriptinfo_ = const_cast< ::sagittarius::translation::v1::TranscriptInfo*>(
      ::sagittarius::translation::v1::TranscriptInfo::internal_default_instance());
}
class StreamingTranslationTaskResponse::HasBitSetters {
 public:
  static const ::google::rpc::Status& error(const StreamingTranslationTaskResponse* msg);
  static const ::sagittarius::translation::v1::StreamingTranslationTaskInfo& taskinfo(const StreamingTranslationTaskResponse* msg);
  static const ::sagittarius::translation::v1::TranscriptInfo& transcriptinfo(const StreamingTranslationTaskResponse* msg);
};

const ::google::rpc::Status&
StreamingTranslationTaskResponse::HasBitSetters::error(const StreamingTranslationTaskResponse* msg) {
  return *msg->error_;
}
const ::sagittarius::translation::v1::StreamingTranslationTaskInfo&
StreamingTranslationTaskResponse::HasBitSetters::taskinfo(const StreamingTranslationTaskResponse* msg) {
  return *msg->streaming_request_.taskinfo_;
}
const ::sagittarius::translation::v1::TranscriptInfo&
StreamingTranslationTaskResponse::HasBitSetters::transcriptinfo(const StreamingTranslationTaskResponse* msg) {
  return *msg->streaming_request_.transcriptinfo_;
}
void StreamingTranslationTaskResponse::unsafe_arena_set_allocated_error(
    ::google::rpc::Status* error) {
  if (GetArenaNoVirtual() == nullptr) {
    delete error_;
  }
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sagittarius.translation.v1.StreamingTranslationTaskResponse.error)
}
void StreamingTranslationTaskResponse::clear_error() {
  if (GetArenaNoVirtual() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
}
void StreamingTranslationTaskResponse::set_allocated_taskinfo(::sagittarius::translation::v1::StreamingTranslationTaskInfo* taskinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_streaming_request();
  if (taskinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(taskinfo);
    if (message_arena != submessage_arena) {
      taskinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, taskinfo, submessage_arena);
    }
    set_has_taskinfo();
    streaming_request_.taskinfo_ = taskinfo;
  }
  // @@protoc_insertion_point(field_set_allocated:sagittarius.translation.v1.StreamingTranslationTaskResponse.taskinfo)
}
void StreamingTranslationTaskResponse::set_allocated_transcriptinfo(::sagittarius::translation::v1::TranscriptInfo* transcriptinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_streaming_request();
  if (transcriptinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(transcriptinfo);
    if (message_arena != submessage_arena) {
      transcriptinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transcriptinfo, submessage_arena);
    }
    set_has_transcriptinfo();
    streaming_request_.transcriptinfo_ = transcriptinfo;
  }
  // @@protoc_insertion_point(field_set_allocated:sagittarius.translation.v1.StreamingTranslationTaskResponse.transcriptinfo)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StreamingTranslationTaskResponse::kErrorFieldNumber;
const int StreamingTranslationTaskResponse::kTaskinfoFieldNumber;
const int StreamingTranslationTaskResponse::kTranscriptinfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StreamingTranslationTaskResponse::StreamingTranslationTaskResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sagittarius.translation.v1.StreamingTranslationTaskResponse)
}
StreamingTranslationTaskResponse::StreamingTranslationTaskResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sagittarius.translation.v1.StreamingTranslationTaskResponse)
}
StreamingTranslationTaskResponse::StreamingTranslationTaskResponse(const StreamingTranslationTaskResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_error()) {
    error_ = new ::google::rpc::Status(*from.error_);
  } else {
    error_ = nullptr;
  }
  clear_has_streaming_request();
  switch (from.streaming_request_case()) {
    case kTaskinfo: {
      mutable_taskinfo()->::sagittarius::translation::v1::StreamingTranslationTaskInfo::MergeFrom(from.taskinfo());
      break;
    }
    case kTranscriptinfo: {
      mutable_transcriptinfo()->::sagittarius::translation::v1::TranscriptInfo::MergeFrom(from.transcriptinfo());
      break;
    }
    case STREAMING_REQUEST_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:sagittarius.translation.v1.StreamingTranslationTaskResponse)
}

void StreamingTranslationTaskResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StreamingTranslationTaskResponse_translation_2fv1_2ftranslation_2eproto.base);
  error_ = nullptr;
  clear_has_streaming_request();
}

StreamingTranslationTaskResponse::~StreamingTranslationTaskResponse() {
  // @@protoc_insertion_point(destructor:sagittarius.translation.v1.StreamingTranslationTaskResponse)
  SharedDtor();
}

void StreamingTranslationTaskResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete error_;
  if (has_streaming_request()) {
    clear_streaming_request();
  }
}

void StreamingTranslationTaskResponse::ArenaDtor(void* object) {
  StreamingTranslationTaskResponse* _this = reinterpret_cast< StreamingTranslationTaskResponse* >(object);
  (void)_this;
}
void StreamingTranslationTaskResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamingTranslationTaskResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StreamingTranslationTaskResponse& StreamingTranslationTaskResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StreamingTranslationTaskResponse_translation_2fv1_2ftranslation_2eproto.base);
  return *internal_default_instance();
}


void StreamingTranslationTaskResponse::clear_streaming_request() {
// @@protoc_insertion_point(one_of_clear_start:sagittarius.translation.v1.StreamingTranslationTaskResponse)
  switch (streaming_request_case()) {
    case kTaskinfo: {
      if (GetArenaNoVirtual() == nullptr) {
        delete streaming_request_.taskinfo_;
      }
      break;
    }
    case kTranscriptinfo: {
      if (GetArenaNoVirtual() == nullptr) {
        delete streaming_request_.transcriptinfo_;
      }
      break;
    }
    case STREAMING_REQUEST_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = STREAMING_REQUEST_NOT_SET;
}


void StreamingTranslationTaskResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sagittarius.translation.v1.StreamingTranslationTaskResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
  clear_streaming_request();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StreamingTranslationTaskResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.rpc.Status error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_error(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sagittarius.translation.v1.StreamingTranslationTaskInfo taskinfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_taskinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sagittarius.translation.v1.TranscriptInfo transcriptinfo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_transcriptinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StreamingTranslationTaskResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sagittarius.translation.v1.StreamingTranslationTaskResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.rpc.Status error = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sagittarius.translation.v1.StreamingTranslationTaskInfo taskinfo = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_taskinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sagittarius.translation.v1.TranscriptInfo transcriptinfo = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_transcriptinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sagittarius.translation.v1.StreamingTranslationTaskResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sagittarius.translation.v1.StreamingTranslationTaskResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StreamingTranslationTaskResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sagittarius.translation.v1.StreamingTranslationTaskResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.rpc.Status error = 1;
  if (this->has_error()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::error(this), output);
  }

  // .sagittarius.translation.v1.StreamingTranslationTaskInfo taskinfo = 2;
  if (has_taskinfo()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::taskinfo(this), output);
  }

  // .sagittarius.translation.v1.TranscriptInfo transcriptinfo = 3;
  if (has_transcriptinfo()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::transcriptinfo(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sagittarius.translation.v1.StreamingTranslationTaskResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamingTranslationTaskResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sagittarius.translation.v1.StreamingTranslationTaskResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.rpc.Status error = 1;
  if (this->has_error()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::error(this), target);
  }

  // .sagittarius.translation.v1.StreamingTranslationTaskInfo taskinfo = 2;
  if (has_taskinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::taskinfo(this), target);
  }

  // .sagittarius.translation.v1.TranscriptInfo transcriptinfo = 3;
  if (has_transcriptinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::transcriptinfo(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sagittarius.translation.v1.StreamingTranslationTaskResponse)
  return target;
}

size_t StreamingTranslationTaskResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sagittarius.translation.v1.StreamingTranslationTaskResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.rpc.Status error = 1;
  if (this->has_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *error_);
  }

  switch (streaming_request_case()) {
    // .sagittarius.translation.v1.StreamingTranslationTaskInfo taskinfo = 2;
    case kTaskinfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *streaming_request_.taskinfo_);
      break;
    }
    // .sagittarius.translation.v1.TranscriptInfo transcriptinfo = 3;
    case kTranscriptinfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *streaming_request_.transcriptinfo_);
      break;
    }
    case STREAMING_REQUEST_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamingTranslationTaskResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sagittarius.translation.v1.StreamingTranslationTaskResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamingTranslationTaskResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StreamingTranslationTaskResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sagittarius.translation.v1.StreamingTranslationTaskResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sagittarius.translation.v1.StreamingTranslationTaskResponse)
    MergeFrom(*source);
  }
}

void StreamingTranslationTaskResponse::MergeFrom(const StreamingTranslationTaskResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sagittarius.translation.v1.StreamingTranslationTaskResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_error()) {
    mutable_error()->::google::rpc::Status::MergeFrom(from.error());
  }
  switch (from.streaming_request_case()) {
    case kTaskinfo: {
      mutable_taskinfo()->::sagittarius::translation::v1::StreamingTranslationTaskInfo::MergeFrom(from.taskinfo());
      break;
    }
    case kTranscriptinfo: {
      mutable_transcriptinfo()->::sagittarius::translation::v1::TranscriptInfo::MergeFrom(from.transcriptinfo());
      break;
    }
    case STREAMING_REQUEST_NOT_SET: {
      break;
    }
  }
}

void StreamingTranslationTaskResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sagittarius.translation.v1.StreamingTranslationTaskResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamingTranslationTaskResponse::CopyFrom(const StreamingTranslationTaskResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sagittarius.translation.v1.StreamingTranslationTaskResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamingTranslationTaskResponse::IsInitialized() const {
  return true;
}

void StreamingTranslationTaskResponse::Swap(StreamingTranslationTaskResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    StreamingTranslationTaskResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void StreamingTranslationTaskResponse::UnsafeArenaSwap(StreamingTranslationTaskResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void StreamingTranslationTaskResponse::InternalSwap(StreamingTranslationTaskResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(error_, other->error_);
  swap(streaming_request_, other->streaming_request_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamingTranslationTaskResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StreamingTranslationTaskInfo::InitAsDefaultInstance() {
}
class StreamingTranslationTaskInfo::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StreamingTranslationTaskInfo::kTaskIdFieldNumber;
const int StreamingTranslationTaskInfo::kEstimateTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StreamingTranslationTaskInfo::StreamingTranslationTaskInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sagittarius.translation.v1.StreamingTranslationTaskInfo)
}
StreamingTranslationTaskInfo::StreamingTranslationTaskInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sagittarius.translation.v1.StreamingTranslationTaskInfo)
}
StreamingTranslationTaskInfo::StreamingTranslationTaskInfo(const StreamingTranslationTaskInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  task_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.task_id().size() > 0) {
    task_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.task_id(),
      GetArenaNoVirtual());
  }
  estimate_time_ = from.estimate_time_;
  // @@protoc_insertion_point(copy_constructor:sagittarius.translation.v1.StreamingTranslationTaskInfo)
}

void StreamingTranslationTaskInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StreamingTranslationTaskInfo_translation_2fv1_2ftranslation_2eproto.base);
  task_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  estimate_time_ = 0;
}

StreamingTranslationTaskInfo::~StreamingTranslationTaskInfo() {
  // @@protoc_insertion_point(destructor:sagittarius.translation.v1.StreamingTranslationTaskInfo)
  SharedDtor();
}

void StreamingTranslationTaskInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  task_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StreamingTranslationTaskInfo::ArenaDtor(void* object) {
  StreamingTranslationTaskInfo* _this = reinterpret_cast< StreamingTranslationTaskInfo* >(object);
  (void)_this;
}
void StreamingTranslationTaskInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamingTranslationTaskInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StreamingTranslationTaskInfo& StreamingTranslationTaskInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StreamingTranslationTaskInfo_translation_2fv1_2ftranslation_2eproto.base);
  return *internal_default_instance();
}


void StreamingTranslationTaskInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:sagittarius.translation.v1.StreamingTranslationTaskInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  task_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  estimate_time_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StreamingTranslationTaskInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string task_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_task_id(), ptr, ctx, "sagittarius.translation.v1.StreamingTranslationTaskInfo.task_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double estimate_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          estimate_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StreamingTranslationTaskInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sagittarius.translation.v1.StreamingTranslationTaskInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string task_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_task_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->task_id().data(), static_cast<int>(this->task_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "sagittarius.translation.v1.StreamingTranslationTaskInfo.task_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double estimate_time = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &estimate_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sagittarius.translation.v1.StreamingTranslationTaskInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sagittarius.translation.v1.StreamingTranslationTaskInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StreamingTranslationTaskInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sagittarius.translation.v1.StreamingTranslationTaskInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string task_id = 1;
  if (this->task_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->task_id().data(), static_cast<int>(this->task_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sagittarius.translation.v1.StreamingTranslationTaskInfo.task_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->task_id(), output);
  }

  // double estimate_time = 2;
  if (!(this->estimate_time() <= 0 && this->estimate_time() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->estimate_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sagittarius.translation.v1.StreamingTranslationTaskInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamingTranslationTaskInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sagittarius.translation.v1.StreamingTranslationTaskInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string task_id = 1;
  if (this->task_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->task_id().data(), static_cast<int>(this->task_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sagittarius.translation.v1.StreamingTranslationTaskInfo.task_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->task_id(), target);
  }

  // double estimate_time = 2;
  if (!(this->estimate_time() <= 0 && this->estimate_time() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->estimate_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sagittarius.translation.v1.StreamingTranslationTaskInfo)
  return target;
}

size_t StreamingTranslationTaskInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sagittarius.translation.v1.StreamingTranslationTaskInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string task_id = 1;
  if (this->task_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->task_id());
  }

  // double estimate_time = 2;
  if (!(this->estimate_time() <= 0 && this->estimate_time() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamingTranslationTaskInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sagittarius.translation.v1.StreamingTranslationTaskInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamingTranslationTaskInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StreamingTranslationTaskInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sagittarius.translation.v1.StreamingTranslationTaskInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sagittarius.translation.v1.StreamingTranslationTaskInfo)
    MergeFrom(*source);
  }
}

void StreamingTranslationTaskInfo::MergeFrom(const StreamingTranslationTaskInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sagittarius.translation.v1.StreamingTranslationTaskInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.task_id().size() > 0) {
    set_task_id(from.task_id());
  }
  if (!(from.estimate_time() <= 0 && from.estimate_time() >= 0)) {
    set_estimate_time(from.estimate_time());
  }
}

void StreamingTranslationTaskInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sagittarius.translation.v1.StreamingTranslationTaskInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamingTranslationTaskInfo::CopyFrom(const StreamingTranslationTaskInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sagittarius.translation.v1.StreamingTranslationTaskInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamingTranslationTaskInfo::IsInitialized() const {
  return true;
}

void StreamingTranslationTaskInfo::Swap(StreamingTranslationTaskInfo* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    StreamingTranslationTaskInfo* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void StreamingTranslationTaskInfo::UnsafeArenaSwap(StreamingTranslationTaskInfo* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void StreamingTranslationTaskInfo::InternalSwap(StreamingTranslationTaskInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  task_id_.Swap(&other->task_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(estimate_time_, other->estimate_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamingTranslationTaskInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StreamingTranslationResult::InitAsDefaultInstance() {
}
class StreamingTranslationResult::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StreamingTranslationResult::kTranscriptFieldNumber;
const int StreamingTranslationResult::kConfidenceFieldNumber;
const int StreamingTranslationResult::kStabilityFieldNumber;
const int StreamingTranslationResult::kStartTimeFieldNumber;
const int StreamingTranslationResult::kEndTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StreamingTranslationResult::StreamingTranslationResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sagittarius.translation.v1.StreamingTranslationResult)
}
StreamingTranslationResult::StreamingTranslationResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sagittarius.translation.v1.StreamingTranslationResult)
}
StreamingTranslationResult::StreamingTranslationResult(const StreamingTranslationResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  transcript_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.transcript().size() > 0) {
    transcript_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.transcript(),
      GetArenaNoVirtual());
  }
  ::memcpy(&confidence_, &from.confidence_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_time_) -
    reinterpret_cast<char*>(&confidence_)) + sizeof(end_time_));
  // @@protoc_insertion_point(copy_constructor:sagittarius.translation.v1.StreamingTranslationResult)
}

void StreamingTranslationResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StreamingTranslationResult_translation_2fv1_2ftranslation_2eproto.base);
  transcript_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&confidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_time_) -
      reinterpret_cast<char*>(&confidence_)) + sizeof(end_time_));
}

StreamingTranslationResult::~StreamingTranslationResult() {
  // @@protoc_insertion_point(destructor:sagittarius.translation.v1.StreamingTranslationResult)
  SharedDtor();
}

void StreamingTranslationResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  transcript_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StreamingTranslationResult::ArenaDtor(void* object) {
  StreamingTranslationResult* _this = reinterpret_cast< StreamingTranslationResult* >(object);
  (void)_this;
}
void StreamingTranslationResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamingTranslationResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StreamingTranslationResult& StreamingTranslationResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StreamingTranslationResult_translation_2fv1_2ftranslation_2eproto.base);
  return *internal_default_instance();
}


void StreamingTranslationResult::Clear() {
// @@protoc_insertion_point(message_clear_start:sagittarius.translation.v1.StreamingTranslationResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transcript_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ::memset(&confidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_time_) -
      reinterpret_cast<char*>(&confidence_)) + sizeof(end_time_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StreamingTranslationResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string transcript = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_transcript(), ptr, ctx, "sagittarius.translation.v1.StreamingTranslationResult.transcript");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float confidence = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float stability = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          stability_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // double start_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double end_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StreamingTranslationResult::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sagittarius.translation.v1.StreamingTranslationResult)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string transcript = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_transcript()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->transcript().data(), static_cast<int>(this->transcript().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "sagittarius.translation.v1.StreamingTranslationResult.transcript"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float confidence = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float stability = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &stability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double start_time = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (33 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double end_time = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (41 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &end_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sagittarius.translation.v1.StreamingTranslationResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sagittarius.translation.v1.StreamingTranslationResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StreamingTranslationResult::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sagittarius.translation.v1.StreamingTranslationResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string transcript = 1;
  if (this->transcript().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->transcript().data(), static_cast<int>(this->transcript().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sagittarius.translation.v1.StreamingTranslationResult.transcript");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->transcript(), output);
  }

  // float confidence = 2;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->confidence(), output);
  }

  // float stability = 3;
  if (!(this->stability() <= 0 && this->stability() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->stability(), output);
  }

  // double start_time = 4;
  if (!(this->start_time() <= 0 && this->start_time() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(4, this->start_time(), output);
  }

  // double end_time = 5;
  if (!(this->end_time() <= 0 && this->end_time() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(5, this->end_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sagittarius.translation.v1.StreamingTranslationResult)
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamingTranslationResult::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sagittarius.translation.v1.StreamingTranslationResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string transcript = 1;
  if (this->transcript().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->transcript().data(), static_cast<int>(this->transcript().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sagittarius.translation.v1.StreamingTranslationResult.transcript");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->transcript(), target);
  }

  // float confidence = 2;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->confidence(), target);
  }

  // float stability = 3;
  if (!(this->stability() <= 0 && this->stability() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->stability(), target);
  }

  // double start_time = 4;
  if (!(this->start_time() <= 0 && this->start_time() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->start_time(), target);
  }

  // double end_time = 5;
  if (!(this->end_time() <= 0 && this->end_time() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->end_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sagittarius.translation.v1.StreamingTranslationResult)
  return target;
}

size_t StreamingTranslationResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sagittarius.translation.v1.StreamingTranslationResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string transcript = 1;
  if (this->transcript().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->transcript());
  }

  // float confidence = 2;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    total_size += 1 + 4;
  }

  // float stability = 3;
  if (!(this->stability() <= 0 && this->stability() >= 0)) {
    total_size += 1 + 4;
  }

  // double start_time = 4;
  if (!(this->start_time() <= 0 && this->start_time() >= 0)) {
    total_size += 1 + 8;
  }

  // double end_time = 5;
  if (!(this->end_time() <= 0 && this->end_time() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamingTranslationResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sagittarius.translation.v1.StreamingTranslationResult)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamingTranslationResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StreamingTranslationResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sagittarius.translation.v1.StreamingTranslationResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sagittarius.translation.v1.StreamingTranslationResult)
    MergeFrom(*source);
  }
}

void StreamingTranslationResult::MergeFrom(const StreamingTranslationResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sagittarius.translation.v1.StreamingTranslationResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.transcript().size() > 0) {
    set_transcript(from.transcript());
  }
  if (!(from.confidence() <= 0 && from.confidence() >= 0)) {
    set_confidence(from.confidence());
  }
  if (!(from.stability() <= 0 && from.stability() >= 0)) {
    set_stability(from.stability());
  }
  if (!(from.start_time() <= 0 && from.start_time() >= 0)) {
    set_start_time(from.start_time());
  }
  if (!(from.end_time() <= 0 && from.end_time() >= 0)) {
    set_end_time(from.end_time());
  }
}

void StreamingTranslationResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sagittarius.translation.v1.StreamingTranslationResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamingTranslationResult::CopyFrom(const StreamingTranslationResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sagittarius.translation.v1.StreamingTranslationResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamingTranslationResult::IsInitialized() const {
  return true;
}

void StreamingTranslationResult::Swap(StreamingTranslationResult* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    StreamingTranslationResult* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void StreamingTranslationResult::UnsafeArenaSwap(StreamingTranslationResult* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void StreamingTranslationResult::InternalSwap(StreamingTranslationResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  transcript_.Swap(&other->transcript_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(confidence_, other->confidence_);
  swap(stability_, other->stability_);
  swap(start_time_, other->start_time_);
  swap(end_time_, other->end_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamingTranslationResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TextTranslationRequest::InitAsDefaultInstance() {
}
class TextTranslationRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TextTranslationRequest::kTextFieldNumber;
const int TextTranslationRequest::kTargetLanguageCodeFieldNumber;
const int TextTranslationRequest::kSourceLanguageCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TextTranslationRequest::TextTranslationRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sagittarius.translation.v1.TextTranslationRequest)
}
TextTranslationRequest::TextTranslationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  text_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sagittarius.translation.v1.TextTranslationRequest)
}
TextTranslationRequest::TextTranslationRequest(const TextTranslationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      text_(from.text_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  target_language_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.target_language_code().size() > 0) {
    target_language_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.target_language_code(),
      GetArenaNoVirtual());
  }
  source_language_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.source_language_code().size() > 0) {
    source_language_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.source_language_code(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:sagittarius.translation.v1.TextTranslationRequest)
}

void TextTranslationRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TextTranslationRequest_translation_2fv1_2ftranslation_2eproto.base);
  target_language_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  source_language_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TextTranslationRequest::~TextTranslationRequest() {
  // @@protoc_insertion_point(destructor:sagittarius.translation.v1.TextTranslationRequest)
  SharedDtor();
}

void TextTranslationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  target_language_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  source_language_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TextTranslationRequest::ArenaDtor(void* object) {
  TextTranslationRequest* _this = reinterpret_cast< TextTranslationRequest* >(object);
  (void)_this;
}
void TextTranslationRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TextTranslationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TextTranslationRequest& TextTranslationRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TextTranslationRequest_translation_2fv1_2ftranslation_2eproto.base);
  return *internal_default_instance();
}


void TextTranslationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sagittarius.translation.v1.TextTranslationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  text_.Clear();
  target_language_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  source_language_code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TextTranslationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_text(), ptr, ctx, "sagittarius.translation.v1.TextTranslationRequest.text");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // string target_language_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_target_language_code(), ptr, ctx, "sagittarius.translation.v1.TextTranslationRequest.target_language_code");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string source_language_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_source_language_code(), ptr, ctx, "sagittarius.translation.v1.TextTranslationRequest.source_language_code");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TextTranslationRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sagittarius.translation.v1.TextTranslationRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string text = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_text()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->text(this->text_size() - 1).data(),
            static_cast<int>(this->text(this->text_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "sagittarius.translation.v1.TextTranslationRequest.text"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string target_language_code = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_target_language_code()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->target_language_code().data(), static_cast<int>(this->target_language_code().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "sagittarius.translation.v1.TextTranslationRequest.target_language_code"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string source_language_code = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_source_language_code()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->source_language_code().data(), static_cast<int>(this->source_language_code().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "sagittarius.translation.v1.TextTranslationRequest.source_language_code"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sagittarius.translation.v1.TextTranslationRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sagittarius.translation.v1.TextTranslationRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TextTranslationRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sagittarius.translation.v1.TextTranslationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string text = 1;
  for (int i = 0, n = this->text_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->text(i).data(), static_cast<int>(this->text(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sagittarius.translation.v1.TextTranslationRequest.text");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      1, this->text(i), output);
  }

  // string target_language_code = 2;
  if (this->target_language_code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->target_language_code().data(), static_cast<int>(this->target_language_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sagittarius.translation.v1.TextTranslationRequest.target_language_code");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->target_language_code(), output);
  }

  // string source_language_code = 3;
  if (this->source_language_code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->source_language_code().data(), static_cast<int>(this->source_language_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sagittarius.translation.v1.TextTranslationRequest.source_language_code");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->source_language_code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sagittarius.translation.v1.TextTranslationRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* TextTranslationRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sagittarius.translation.v1.TextTranslationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string text = 1;
  for (int i = 0, n = this->text_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->text(i).data(), static_cast<int>(this->text(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sagittarius.translation.v1.TextTranslationRequest.text");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(1, this->text(i), target);
  }

  // string target_language_code = 2;
  if (this->target_language_code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->target_language_code().data(), static_cast<int>(this->target_language_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sagittarius.translation.v1.TextTranslationRequest.target_language_code");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->target_language_code(), target);
  }

  // string source_language_code = 3;
  if (this->source_language_code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->source_language_code().data(), static_cast<int>(this->source_language_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sagittarius.translation.v1.TextTranslationRequest.source_language_code");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->source_language_code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sagittarius.translation.v1.TextTranslationRequest)
  return target;
}

size_t TextTranslationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sagittarius.translation.v1.TextTranslationRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string text = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->text_size());
  for (int i = 0, n = this->text_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->text(i));
  }

  // string target_language_code = 2;
  if (this->target_language_code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->target_language_code());
  }

  // string source_language_code = 3;
  if (this->source_language_code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->source_language_code());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TextTranslationRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sagittarius.translation.v1.TextTranslationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TextTranslationRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TextTranslationRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sagittarius.translation.v1.TextTranslationRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sagittarius.translation.v1.TextTranslationRequest)
    MergeFrom(*source);
  }
}

void TextTranslationRequest::MergeFrom(const TextTranslationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sagittarius.translation.v1.TextTranslationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  text_.MergeFrom(from.text_);
  if (from.target_language_code().size() > 0) {
    set_target_language_code(from.target_language_code());
  }
  if (from.source_language_code().size() > 0) {
    set_source_language_code(from.source_language_code());
  }
}

void TextTranslationRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sagittarius.translation.v1.TextTranslationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TextTranslationRequest::CopyFrom(const TextTranslationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sagittarius.translation.v1.TextTranslationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextTranslationRequest::IsInitialized() const {
  return true;
}

void TextTranslationRequest::Swap(TextTranslationRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    TextTranslationRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void TextTranslationRequest::UnsafeArenaSwap(TextTranslationRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void TextTranslationRequest::InternalSwap(TextTranslationRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  text_.InternalSwap(CastToBase(&other->text_));
  target_language_code_.Swap(&other->target_language_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  source_language_code_.Swap(&other->source_language_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata TextTranslationRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TextTranslationResponse_Text::InitAsDefaultInstance() {
}
class TextTranslationResponse_Text::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TextTranslationResponse_Text::kSourceLanguageFieldNumber;
const int TextTranslationResponse_Text::kTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TextTranslationResponse_Text::TextTranslationResponse_Text()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sagittarius.translation.v1.TextTranslationResponse.Text)
}
TextTranslationResponse_Text::TextTranslationResponse_Text(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sagittarius.translation.v1.TextTranslationResponse.Text)
}
TextTranslationResponse_Text::TextTranslationResponse_Text(const TextTranslationResponse_Text& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  source_language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.source_language().size() > 0) {
    source_language_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.source_language(),
      GetArenaNoVirtual());
  }
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.text().size() > 0) {
    text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.text(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:sagittarius.translation.v1.TextTranslationResponse.Text)
}

void TextTranslationResponse_Text::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TextTranslationResponse_Text_translation_2fv1_2ftranslation_2eproto.base);
  source_language_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TextTranslationResponse_Text::~TextTranslationResponse_Text() {
  // @@protoc_insertion_point(destructor:sagittarius.translation.v1.TextTranslationResponse.Text)
  SharedDtor();
}

void TextTranslationResponse_Text::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  source_language_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TextTranslationResponse_Text::ArenaDtor(void* object) {
  TextTranslationResponse_Text* _this = reinterpret_cast< TextTranslationResponse_Text* >(object);
  (void)_this;
}
void TextTranslationResponse_Text::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TextTranslationResponse_Text::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TextTranslationResponse_Text& TextTranslationResponse_Text::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TextTranslationResponse_Text_translation_2fv1_2ftranslation_2eproto.base);
  return *internal_default_instance();
}


void TextTranslationResponse_Text::Clear() {
// @@protoc_insertion_point(message_clear_start:sagittarius.translation.v1.TextTranslationResponse.Text)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  source_language_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  text_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TextTranslationResponse_Text::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string source_language = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_source_language(), ptr, ctx, "sagittarius.translation.v1.TextTranslationResponse.Text.source_language");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string text = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_text(), ptr, ctx, "sagittarius.translation.v1.TextTranslationResponse.Text.text");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TextTranslationResponse_Text::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sagittarius.translation.v1.TextTranslationResponse.Text)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string source_language = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_source_language()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->source_language().data(), static_cast<int>(this->source_language().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "sagittarius.translation.v1.TextTranslationResponse.Text.source_language"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string text = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->text().data(), static_cast<int>(this->text().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "sagittarius.translation.v1.TextTranslationResponse.Text.text"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sagittarius.translation.v1.TextTranslationResponse.Text)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sagittarius.translation.v1.TextTranslationResponse.Text)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TextTranslationResponse_Text::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sagittarius.translation.v1.TextTranslationResponse.Text)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string source_language = 1;
  if (this->source_language().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->source_language().data(), static_cast<int>(this->source_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sagittarius.translation.v1.TextTranslationResponse.Text.source_language");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->source_language(), output);
  }

  // string text = 2;
  if (this->text().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), static_cast<int>(this->text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sagittarius.translation.v1.TextTranslationResponse.Text.text");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->text(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sagittarius.translation.v1.TextTranslationResponse.Text)
}

::PROTOBUF_NAMESPACE_ID::uint8* TextTranslationResponse_Text::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sagittarius.translation.v1.TextTranslationResponse.Text)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string source_language = 1;
  if (this->source_language().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->source_language().data(), static_cast<int>(this->source_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sagittarius.translation.v1.TextTranslationResponse.Text.source_language");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->source_language(), target);
  }

  // string text = 2;
  if (this->text().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), static_cast<int>(this->text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sagittarius.translation.v1.TextTranslationResponse.Text.text");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->text(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sagittarius.translation.v1.TextTranslationResponse.Text)
  return target;
}

size_t TextTranslationResponse_Text::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sagittarius.translation.v1.TextTranslationResponse.Text)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string source_language = 1;
  if (this->source_language().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->source_language());
  }

  // string text = 2;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->text());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TextTranslationResponse_Text::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sagittarius.translation.v1.TextTranslationResponse.Text)
  GOOGLE_DCHECK_NE(&from, this);
  const TextTranslationResponse_Text* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TextTranslationResponse_Text>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sagittarius.translation.v1.TextTranslationResponse.Text)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sagittarius.translation.v1.TextTranslationResponse.Text)
    MergeFrom(*source);
  }
}

void TextTranslationResponse_Text::MergeFrom(const TextTranslationResponse_Text& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sagittarius.translation.v1.TextTranslationResponse.Text)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.source_language().size() > 0) {
    set_source_language(from.source_language());
  }
  if (from.text().size() > 0) {
    set_text(from.text());
  }
}

void TextTranslationResponse_Text::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sagittarius.translation.v1.TextTranslationResponse.Text)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TextTranslationResponse_Text::CopyFrom(const TextTranslationResponse_Text& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sagittarius.translation.v1.TextTranslationResponse.Text)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextTranslationResponse_Text::IsInitialized() const {
  return true;
}

void TextTranslationResponse_Text::Swap(TextTranslationResponse_Text* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    TextTranslationResponse_Text* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void TextTranslationResponse_Text::UnsafeArenaSwap(TextTranslationResponse_Text* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void TextTranslationResponse_Text::InternalSwap(TextTranslationResponse_Text* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  source_language_.Swap(&other->source_language_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata TextTranslationResponse_Text::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TextTranslationResponse::InitAsDefaultInstance() {
  ::sagittarius::translation::v1::_TextTranslationResponse_default_instance_._instance.get_mutable()->error_ = const_cast< ::google::rpc::Status*>(
      ::google::rpc::Status::internal_default_instance());
}
class TextTranslationResponse::HasBitSetters {
 public:
  static const ::google::rpc::Status& error(const TextTranslationResponse* msg);
};

const ::google::rpc::Status&
TextTranslationResponse::HasBitSetters::error(const TextTranslationResponse* msg) {
  return *msg->error_;
}
void TextTranslationResponse::unsafe_arena_set_allocated_error(
    ::google::rpc::Status* error) {
  if (GetArenaNoVirtual() == nullptr) {
    delete error_;
  }
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sagittarius.translation.v1.TextTranslationResponse.error)
}
void TextTranslationResponse::clear_error() {
  if (GetArenaNoVirtual() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TextTranslationResponse::kErrorFieldNumber;
const int TextTranslationResponse::kResultsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TextTranslationResponse::TextTranslationResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sagittarius.translation.v1.TextTranslationResponse)
}
TextTranslationResponse::TextTranslationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  results_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sagittarius.translation.v1.TextTranslationResponse)
}
TextTranslationResponse::TextTranslationResponse(const TextTranslationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      results_(from.results_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_error()) {
    error_ = new ::google::rpc::Status(*from.error_);
  } else {
    error_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:sagittarius.translation.v1.TextTranslationResponse)
}

void TextTranslationResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TextTranslationResponse_translation_2fv1_2ftranslation_2eproto.base);
  error_ = nullptr;
}

TextTranslationResponse::~TextTranslationResponse() {
  // @@protoc_insertion_point(destructor:sagittarius.translation.v1.TextTranslationResponse)
  SharedDtor();
}

void TextTranslationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete error_;
}

void TextTranslationResponse::ArenaDtor(void* object) {
  TextTranslationResponse* _this = reinterpret_cast< TextTranslationResponse* >(object);
  (void)_this;
}
void TextTranslationResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TextTranslationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TextTranslationResponse& TextTranslationResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TextTranslationResponse_translation_2fv1_2ftranslation_2eproto.base);
  return *internal_default_instance();
}


void TextTranslationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sagittarius.translation.v1.TextTranslationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  if (GetArenaNoVirtual() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TextTranslationResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.rpc.Status error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_error(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .sagittarius.translation.v1.TextTranslationResponse.Text results = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TextTranslationResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sagittarius.translation.v1.TextTranslationResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.rpc.Status error = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sagittarius.translation.v1.TextTranslationResponse.Text results = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_results()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sagittarius.translation.v1.TextTranslationResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sagittarius.translation.v1.TextTranslationResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TextTranslationResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sagittarius.translation.v1.TextTranslationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.rpc.Status error = 1;
  if (this->has_error()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::error(this), output);
  }

  // repeated .sagittarius.translation.v1.TextTranslationResponse.Text results = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->results_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->results(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sagittarius.translation.v1.TextTranslationResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* TextTranslationResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sagittarius.translation.v1.TextTranslationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.rpc.Status error = 1;
  if (this->has_error()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::error(this), target);
  }

  // repeated .sagittarius.translation.v1.TextTranslationResponse.Text results = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->results_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->results(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sagittarius.translation.v1.TextTranslationResponse)
  return target;
}

size_t TextTranslationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sagittarius.translation.v1.TextTranslationResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sagittarius.translation.v1.TextTranslationResponse.Text results = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->results_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->results(static_cast<int>(i)));
    }
  }

  // .google.rpc.Status error = 1;
  if (this->has_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *error_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TextTranslationResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sagittarius.translation.v1.TextTranslationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TextTranslationResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TextTranslationResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sagittarius.translation.v1.TextTranslationResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sagittarius.translation.v1.TextTranslationResponse)
    MergeFrom(*source);
  }
}

void TextTranslationResponse::MergeFrom(const TextTranslationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sagittarius.translation.v1.TextTranslationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
  if (from.has_error()) {
    mutable_error()->::google::rpc::Status::MergeFrom(from.error());
  }
}

void TextTranslationResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sagittarius.translation.v1.TextTranslationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TextTranslationResponse::CopyFrom(const TextTranslationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sagittarius.translation.v1.TextTranslationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextTranslationResponse::IsInitialized() const {
  return true;
}

void TextTranslationResponse::Swap(TextTranslationResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    TextTranslationResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void TextTranslationResponse::UnsafeArenaSwap(TextTranslationResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void TextTranslationResponse::InternalSwap(TextTranslationResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&results_)->InternalSwap(CastToBase(&other->results_));
  swap(error_, other->error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TextTranslationResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UserQuotaRequest::InitAsDefaultInstance() {
}
class UserQuotaRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserQuotaRequest::UserQuotaRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sagittarius.translation.v1.UserQuotaRequest)
}
UserQuotaRequest::UserQuotaRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sagittarius.translation.v1.UserQuotaRequest)
}
UserQuotaRequest::UserQuotaRequest(const UserQuotaRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sagittarius.translation.v1.UserQuotaRequest)
}

void UserQuotaRequest::SharedCtor() {
}

UserQuotaRequest::~UserQuotaRequest() {
  // @@protoc_insertion_point(destructor:sagittarius.translation.v1.UserQuotaRequest)
  SharedDtor();
}

void UserQuotaRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void UserQuotaRequest::ArenaDtor(void* object) {
  UserQuotaRequest* _this = reinterpret_cast< UserQuotaRequest* >(object);
  (void)_this;
}
void UserQuotaRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserQuotaRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserQuotaRequest& UserQuotaRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserQuotaRequest_translation_2fv1_2ftranslation_2eproto.base);
  return *internal_default_instance();
}


void UserQuotaRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sagittarius.translation.v1.UserQuotaRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UserQuotaRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UserQuotaRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sagittarius.translation.v1.UserQuotaRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:sagittarius.translation.v1.UserQuotaRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sagittarius.translation.v1.UserQuotaRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UserQuotaRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sagittarius.translation.v1.UserQuotaRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sagittarius.translation.v1.UserQuotaRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* UserQuotaRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sagittarius.translation.v1.UserQuotaRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sagittarius.translation.v1.UserQuotaRequest)
  return target;
}

size_t UserQuotaRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sagittarius.translation.v1.UserQuotaRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserQuotaRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sagittarius.translation.v1.UserQuotaRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UserQuotaRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserQuotaRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sagittarius.translation.v1.UserQuotaRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sagittarius.translation.v1.UserQuotaRequest)
    MergeFrom(*source);
  }
}

void UserQuotaRequest::MergeFrom(const UserQuotaRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sagittarius.translation.v1.UserQuotaRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void UserQuotaRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sagittarius.translation.v1.UserQuotaRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserQuotaRequest::CopyFrom(const UserQuotaRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sagittarius.translation.v1.UserQuotaRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserQuotaRequest::IsInitialized() const {
  return true;
}

void UserQuotaRequest::Swap(UserQuotaRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserQuotaRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void UserQuotaRequest::UnsafeArenaSwap(UserQuotaRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserQuotaRequest::InternalSwap(UserQuotaRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserQuotaRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UserQuotaResponse::InitAsDefaultInstance() {
  ::sagittarius::translation::v1::_UserQuotaResponse_default_instance_._instance.get_mutable()->error_ = const_cast< ::google::rpc::Status*>(
      ::google::rpc::Status::internal_default_instance());
}
class UserQuotaResponse::HasBitSetters {
 public:
  static const ::google::rpc::Status& error(const UserQuotaResponse* msg);
};

const ::google::rpc::Status&
UserQuotaResponse::HasBitSetters::error(const UserQuotaResponse* msg) {
  return *msg->error_;
}
void UserQuotaResponse::unsafe_arena_set_allocated_error(
    ::google::rpc::Status* error) {
  if (GetArenaNoVirtual() == nullptr) {
    delete error_;
  }
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sagittarius.translation.v1.UserQuotaResponse.error)
}
void UserQuotaResponse::clear_error() {
  if (GetArenaNoVirtual() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserQuotaResponse::kQuotaFieldNumber;
const int UserQuotaResponse::kTimeLeftFieldNumber;
const int UserQuotaResponse::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserQuotaResponse::UserQuotaResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sagittarius.translation.v1.UserQuotaResponse)
}
UserQuotaResponse::UserQuotaResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sagittarius.translation.v1.UserQuotaResponse)
}
UserQuotaResponse::UserQuotaResponse(const UserQuotaResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_error()) {
    error_ = new ::google::rpc::Status(*from.error_);
  } else {
    error_ = nullptr;
  }
  ::memcpy(&quota_, &from.quota_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_left_) -
    reinterpret_cast<char*>(&quota_)) + sizeof(time_left_));
  // @@protoc_insertion_point(copy_constructor:sagittarius.translation.v1.UserQuotaResponse)
}

void UserQuotaResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserQuotaResponse_translation_2fv1_2ftranslation_2eproto.base);
  ::memset(&error_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_left_) -
      reinterpret_cast<char*>(&error_)) + sizeof(time_left_));
}

UserQuotaResponse::~UserQuotaResponse() {
  // @@protoc_insertion_point(destructor:sagittarius.translation.v1.UserQuotaResponse)
  SharedDtor();
}

void UserQuotaResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete error_;
}

void UserQuotaResponse::ArenaDtor(void* object) {
  UserQuotaResponse* _this = reinterpret_cast< UserQuotaResponse* >(object);
  (void)_this;
}
void UserQuotaResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserQuotaResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserQuotaResponse& UserQuotaResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserQuotaResponse_translation_2fv1_2ftranslation_2eproto.base);
  return *internal_default_instance();
}


void UserQuotaResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sagittarius.translation.v1.UserQuotaResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
  ::memset(&quota_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_left_) -
      reinterpret_cast<char*>(&quota_)) + sizeof(time_left_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UserQuotaResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 quota = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          quota_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 time_left = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          time_left_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.rpc.Status error = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_error(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UserQuotaResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sagittarius.translation.v1.UserQuotaResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 quota = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &quota_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 time_left = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.rpc.Status error = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sagittarius.translation.v1.UserQuotaResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sagittarius.translation.v1.UserQuotaResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UserQuotaResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sagittarius.translation.v1.UserQuotaResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 quota = 1;
  if (this->quota() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->quota(), output);
  }

  // int64 time_left = 2;
  if (this->time_left() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->time_left(), output);
  }

  // .google.rpc.Status error = 3;
  if (this->has_error()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::error(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sagittarius.translation.v1.UserQuotaResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* UserQuotaResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sagittarius.translation.v1.UserQuotaResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 quota = 1;
  if (this->quota() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->quota(), target);
  }

  // int64 time_left = 2;
  if (this->time_left() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->time_left(), target);
  }

  // .google.rpc.Status error = 3;
  if (this->has_error()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::error(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sagittarius.translation.v1.UserQuotaResponse)
  return target;
}

size_t UserQuotaResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sagittarius.translation.v1.UserQuotaResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.rpc.Status error = 3;
  if (this->has_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *error_);
  }

  // int64 quota = 1;
  if (this->quota() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->quota());
  }

  // int64 time_left = 2;
  if (this->time_left() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->time_left());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserQuotaResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sagittarius.translation.v1.UserQuotaResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UserQuotaResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserQuotaResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sagittarius.translation.v1.UserQuotaResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sagittarius.translation.v1.UserQuotaResponse)
    MergeFrom(*source);
  }
}

void UserQuotaResponse::MergeFrom(const UserQuotaResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sagittarius.translation.v1.UserQuotaResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_error()) {
    mutable_error()->::google::rpc::Status::MergeFrom(from.error());
  }
  if (from.quota() != 0) {
    set_quota(from.quota());
  }
  if (from.time_left() != 0) {
    set_time_left(from.time_left());
  }
}

void UserQuotaResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sagittarius.translation.v1.UserQuotaResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserQuotaResponse::CopyFrom(const UserQuotaResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sagittarius.translation.v1.UserQuotaResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserQuotaResponse::IsInitialized() const {
  return true;
}

void UserQuotaResponse::Swap(UserQuotaResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UserQuotaResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void UserQuotaResponse::UnsafeArenaSwap(UserQuotaResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UserQuotaResponse::InternalSwap(UserQuotaResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(error_, other->error_);
  swap(quota_, other->quota_);
  swap(time_left_, other->time_left_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UserQuotaResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace translation
}  // namespace sagittarius
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sagittarius::translation::v1::MediaTranslationRequest* Arena::CreateMaybeMessage< ::sagittarius::translation::v1::MediaTranslationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sagittarius::translation::v1::MediaTranslationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sagittarius::translation::v1::MediaTranslationResponse* Arena::CreateMaybeMessage< ::sagittarius::translation::v1::MediaTranslationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sagittarius::translation::v1::MediaTranslationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sagittarius::translation::v1::TranscriptInfo* Arena::CreateMaybeMessage< ::sagittarius::translation::v1::TranscriptInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sagittarius::translation::v1::TranscriptInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::sagittarius::translation::v1::DetectionRequest* Arena::CreateMaybeMessage< ::sagittarius::translation::v1::DetectionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sagittarius::translation::v1::DetectionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sagittarius::translation::v1::DetectionResponse* Arena::CreateMaybeMessage< ::sagittarius::translation::v1::DetectionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sagittarius::translation::v1::DetectionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sagittarius::translation::v1::DetectionPrediction* Arena::CreateMaybeMessage< ::sagittarius::translation::v1::DetectionPrediction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sagittarius::translation::v1::DetectionPrediction >(arena);
}
template<> PROTOBUF_NOINLINE ::sagittarius::translation::v1::TranscriptRequest* Arena::CreateMaybeMessage< ::sagittarius::translation::v1::TranscriptRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sagittarius::translation::v1::TranscriptRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sagittarius::translation::v1::TranscriptResponse_Cue* Arena::CreateMaybeMessage< ::sagittarius::translation::v1::TranscriptResponse_Cue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sagittarius::translation::v1::TranscriptResponse_Cue >(arena);
}
template<> PROTOBUF_NOINLINE ::sagittarius::translation::v1::TranscriptResponse* Arena::CreateMaybeMessage< ::sagittarius::translation::v1::TranscriptResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sagittarius::translation::v1::TranscriptResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sagittarius::translation::v1::StreamingTranslationRequest* Arena::CreateMaybeMessage< ::sagittarius::translation::v1::StreamingTranslationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sagittarius::translation::v1::StreamingTranslationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sagittarius::translation::v1::StreamingTranslationRequestConfig* Arena::CreateMaybeMessage< ::sagittarius::translation::v1::StreamingTranslationRequestConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sagittarius::translation::v1::StreamingTranslationRequestConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::sagittarius::translation::v1::StreamingTranslationResponse* Arena::CreateMaybeMessage< ::sagittarius::translation::v1::StreamingTranslationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sagittarius::translation::v1::StreamingTranslationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sagittarius::translation::v1::StreamingTranslationTaskRequest* Arena::CreateMaybeMessage< ::sagittarius::translation::v1::StreamingTranslationTaskRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sagittarius::translation::v1::StreamingTranslationTaskRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sagittarius::translation::v1::StreamingTranslationTaskResponse* Arena::CreateMaybeMessage< ::sagittarius::translation::v1::StreamingTranslationTaskResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sagittarius::translation::v1::StreamingTranslationTaskResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sagittarius::translation::v1::StreamingTranslationTaskInfo* Arena::CreateMaybeMessage< ::sagittarius::translation::v1::StreamingTranslationTaskInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sagittarius::translation::v1::StreamingTranslationTaskInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::sagittarius::translation::v1::StreamingTranslationResult* Arena::CreateMaybeMessage< ::sagittarius::translation::v1::StreamingTranslationResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sagittarius::translation::v1::StreamingTranslationResult >(arena);
}
template<> PROTOBUF_NOINLINE ::sagittarius::translation::v1::TextTranslationRequest* Arena::CreateMaybeMessage< ::sagittarius::translation::v1::TextTranslationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sagittarius::translation::v1::TextTranslationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sagittarius::translation::v1::TextTranslationResponse_Text* Arena::CreateMaybeMessage< ::sagittarius::translation::v1::TextTranslationResponse_Text >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sagittarius::translation::v1::TextTranslationResponse_Text >(arena);
}
template<> PROTOBUF_NOINLINE ::sagittarius::translation::v1::TextTranslationResponse* Arena::CreateMaybeMessage< ::sagittarius::translation::v1::TextTranslationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sagittarius::translation::v1::TextTranslationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sagittarius::translation::v1::UserQuotaRequest* Arena::CreateMaybeMessage< ::sagittarius::translation::v1::UserQuotaRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sagittarius::translation::v1::UserQuotaRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sagittarius::translation::v1::UserQuotaResponse* Arena::CreateMaybeMessage< ::sagittarius::translation::v1::UserQuotaResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sagittarius::translation::v1::UserQuotaResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
