// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: translation/v1/translation.proto
// Original file comments:
// Copyright 2018 Sagittarius LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_translation_2fv1_2ftranslation_2eproto__INCLUDED
#define GRPC_translation_2fv1_2ftranslation_2eproto__INCLUDED

#include "translation/v1/translation.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class CompletionQueue;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc

namespace sagittarius {
namespace translation {
namespace v1 {

// Service that implements Sagittarius Translation API
class Translation final {
 public:
  static constexpr char const* service_full_name() {
    return "sagittarius.translation.v1.Translation";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Translate media(audio or video) by media identity
    virtual ::grpc::Status TranslateMedia(::grpc::ClientContext* context, const ::sagittarius::translation::v1::MediaTranslationRequest& request, ::sagittarius::translation::v1::MediaTranslationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sagittarius::translation::v1::MediaTranslationResponse>> AsyncTranslateMedia(::grpc::ClientContext* context, const ::sagittarius::translation::v1::MediaTranslationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sagittarius::translation::v1::MediaTranslationResponse>>(AsyncTranslateMediaRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sagittarius::translation::v1::MediaTranslationResponse>> PrepareAsyncTranslateMedia(::grpc::ClientContext* context, const ::sagittarius::translation::v1::MediaTranslationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sagittarius::translation::v1::MediaTranslationResponse>>(PrepareAsyncTranslateMediaRaw(context, request, cq));
    }
    // detect the language of text
    virtual ::grpc::Status DetectLanguage(::grpc::ClientContext* context, const ::sagittarius::translation::v1::DetectionRequest& request, ::sagittarius::translation::v1::DetectionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sagittarius::translation::v1::DetectionResponse>> AsyncDetectLanguage(::grpc::ClientContext* context, const ::sagittarius::translation::v1::DetectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sagittarius::translation::v1::DetectionResponse>>(AsyncDetectLanguageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sagittarius::translation::v1::DetectionResponse>> PrepareAsyncDetectLanguage(::grpc::ClientContext* context, const ::sagittarius::translation::v1::DetectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sagittarius::translation::v1::DetectionResponse>>(PrepareAsyncDetectLanguageRaw(context, request, cq));
    }
    virtual ::grpc::Status Transcript(::grpc::ClientContext* context, const ::sagittarius::translation::v1::TranscriptRequest& request, ::sagittarius::translation::v1::TranscriptResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sagittarius::translation::v1::TranscriptResponse>> AsyncTranscript(::grpc::ClientContext* context, const ::sagittarius::translation::v1::TranscriptRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sagittarius::translation::v1::TranscriptResponse>>(AsyncTranscriptRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sagittarius::translation::v1::TranscriptResponse>> PrepareAsyncTranscript(::grpc::ClientContext* context, const ::sagittarius::translation::v1::TranscriptRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sagittarius::translation::v1::TranscriptResponse>>(PrepareAsyncTranscriptRaw(context, request, cq));
    }
    // Translate text by Google Translation Service
    virtual ::grpc::Status TranslateText(::grpc::ClientContext* context, const ::sagittarius::translation::v1::TextTranslationRequest& request, ::sagittarius::translation::v1::TextTranslationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sagittarius::translation::v1::TextTranslationResponse>> AsyncTranslateText(::grpc::ClientContext* context, const ::sagittarius::translation::v1::TextTranslationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sagittarius::translation::v1::TextTranslationResponse>>(AsyncTranslateTextRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sagittarius::translation::v1::TextTranslationResponse>> PrepareAsyncTranslateText(::grpc::ClientContext* context, const ::sagittarius::translation::v1::TextTranslationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sagittarius::translation::v1::TextTranslationResponse>>(PrepareAsyncTranslateTextRaw(context, request, cq));
    }
    // Performs bidirectional streaming audio translation: receive results after or while
    // sending audio. This method is only available via the gRPC API (not REST).
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::sagittarius::translation::v1::StreamingTranslationRequest, ::sagittarius::translation::v1::StreamingTranslationResponse>> StreamingTranslation(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::sagittarius::translation::v1::StreamingTranslationRequest, ::sagittarius::translation::v1::StreamingTranslationResponse>>(StreamingTranslationRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::sagittarius::translation::v1::StreamingTranslationRequest, ::sagittarius::translation::v1::StreamingTranslationResponse>> AsyncStreamingTranslation(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::sagittarius::translation::v1::StreamingTranslationRequest, ::sagittarius::translation::v1::StreamingTranslationResponse>>(AsyncStreamingTranslationRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::sagittarius::translation::v1::StreamingTranslationRequest, ::sagittarius::translation::v1::StreamingTranslationResponse>> PrepareAsyncStreamingTranslation(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::sagittarius::translation::v1::StreamingTranslationRequest, ::sagittarius::translation::v1::StreamingTranslationResponse>>(PrepareAsyncStreamingTranslationRaw(context, cq));
    }
    // Check StreamingTranslationTask results or estimate finish time
    // and maybe other informations related to the task
    virtual ::grpc::Status StreamingTranslationTask(::grpc::ClientContext* context, const ::sagittarius::translation::v1::StreamingTranslationTaskRequest& request, ::sagittarius::translation::v1::StreamingTranslationTaskResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sagittarius::translation::v1::StreamingTranslationTaskResponse>> AsyncStreamingTranslationTask(::grpc::ClientContext* context, const ::sagittarius::translation::v1::StreamingTranslationTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sagittarius::translation::v1::StreamingTranslationTaskResponse>>(AsyncStreamingTranslationTaskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sagittarius::translation::v1::StreamingTranslationTaskResponse>> PrepareAsyncStreamingTranslationTask(::grpc::ClientContext* context, const ::sagittarius::translation::v1::StreamingTranslationTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sagittarius::translation::v1::StreamingTranslationTaskResponse>>(PrepareAsyncStreamingTranslationTaskRaw(context, request, cq));
    }
    // Get User Quota
    virtual ::grpc::Status GetUserQuota(::grpc::ClientContext* context, const ::sagittarius::translation::v1::UserQuotaRequest& request, ::sagittarius::translation::v1::UserQuotaResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sagittarius::translation::v1::UserQuotaResponse>> AsyncGetUserQuota(::grpc::ClientContext* context, const ::sagittarius::translation::v1::UserQuotaRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sagittarius::translation::v1::UserQuotaResponse>>(AsyncGetUserQuotaRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sagittarius::translation::v1::UserQuotaResponse>> PrepareAsyncGetUserQuota(::grpc::ClientContext* context, const ::sagittarius::translation::v1::UserQuotaRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sagittarius::translation::v1::UserQuotaResponse>>(PrepareAsyncGetUserQuotaRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Translate media(audio or video) by media identity
      virtual void TranslateMedia(::grpc::ClientContext* context, const ::sagittarius::translation::v1::MediaTranslationRequest* request, ::sagittarius::translation::v1::MediaTranslationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TranslateMedia(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sagittarius::translation::v1::MediaTranslationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TranslateMedia(::grpc::ClientContext* context, const ::sagittarius::translation::v1::MediaTranslationRequest* request, ::sagittarius::translation::v1::MediaTranslationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void TranslateMedia(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sagittarius::translation::v1::MediaTranslationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // detect the language of text
      virtual void DetectLanguage(::grpc::ClientContext* context, const ::sagittarius::translation::v1::DetectionRequest* request, ::sagittarius::translation::v1::DetectionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DetectLanguage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sagittarius::translation::v1::DetectionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DetectLanguage(::grpc::ClientContext* context, const ::sagittarius::translation::v1::DetectionRequest* request, ::sagittarius::translation::v1::DetectionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void DetectLanguage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sagittarius::translation::v1::DetectionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Transcript(::grpc::ClientContext* context, const ::sagittarius::translation::v1::TranscriptRequest* request, ::sagittarius::translation::v1::TranscriptResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Transcript(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sagittarius::translation::v1::TranscriptResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Transcript(::grpc::ClientContext* context, const ::sagittarius::translation::v1::TranscriptRequest* request, ::sagittarius::translation::v1::TranscriptResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Transcript(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sagittarius::translation::v1::TranscriptResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Translate text by Google Translation Service
      virtual void TranslateText(::grpc::ClientContext* context, const ::sagittarius::translation::v1::TextTranslationRequest* request, ::sagittarius::translation::v1::TextTranslationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TranslateText(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sagittarius::translation::v1::TextTranslationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TranslateText(::grpc::ClientContext* context, const ::sagittarius::translation::v1::TextTranslationRequest* request, ::sagittarius::translation::v1::TextTranslationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void TranslateText(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sagittarius::translation::v1::TextTranslationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Performs bidirectional streaming audio translation: receive results after or while
      // sending audio. This method is only available via the gRPC API (not REST).
      virtual void StreamingTranslation(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::sagittarius::translation::v1::StreamingTranslationRequest,::sagittarius::translation::v1::StreamingTranslationResponse>* reactor) = 0;
      // Check StreamingTranslationTask results or estimate finish time
      // and maybe other informations related to the task
      virtual void StreamingTranslationTask(::grpc::ClientContext* context, const ::sagittarius::translation::v1::StreamingTranslationTaskRequest* request, ::sagittarius::translation::v1::StreamingTranslationTaskResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StreamingTranslationTask(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sagittarius::translation::v1::StreamingTranslationTaskResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StreamingTranslationTask(::grpc::ClientContext* context, const ::sagittarius::translation::v1::StreamingTranslationTaskRequest* request, ::sagittarius::translation::v1::StreamingTranslationTaskResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void StreamingTranslationTask(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sagittarius::translation::v1::StreamingTranslationTaskResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Get User Quota
      virtual void GetUserQuota(::grpc::ClientContext* context, const ::sagittarius::translation::v1::UserQuotaRequest* request, ::sagittarius::translation::v1::UserQuotaResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetUserQuota(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sagittarius::translation::v1::UserQuotaResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetUserQuota(::grpc::ClientContext* context, const ::sagittarius::translation::v1::UserQuotaRequest* request, ::sagittarius::translation::v1::UserQuotaResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetUserQuota(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sagittarius::translation::v1::UserQuotaResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sagittarius::translation::v1::MediaTranslationResponse>* AsyncTranslateMediaRaw(::grpc::ClientContext* context, const ::sagittarius::translation::v1::MediaTranslationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sagittarius::translation::v1::MediaTranslationResponse>* PrepareAsyncTranslateMediaRaw(::grpc::ClientContext* context, const ::sagittarius::translation::v1::MediaTranslationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sagittarius::translation::v1::DetectionResponse>* AsyncDetectLanguageRaw(::grpc::ClientContext* context, const ::sagittarius::translation::v1::DetectionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sagittarius::translation::v1::DetectionResponse>* PrepareAsyncDetectLanguageRaw(::grpc::ClientContext* context, const ::sagittarius::translation::v1::DetectionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sagittarius::translation::v1::TranscriptResponse>* AsyncTranscriptRaw(::grpc::ClientContext* context, const ::sagittarius::translation::v1::TranscriptRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sagittarius::translation::v1::TranscriptResponse>* PrepareAsyncTranscriptRaw(::grpc::ClientContext* context, const ::sagittarius::translation::v1::TranscriptRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sagittarius::translation::v1::TextTranslationResponse>* AsyncTranslateTextRaw(::grpc::ClientContext* context, const ::sagittarius::translation::v1::TextTranslationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sagittarius::translation::v1::TextTranslationResponse>* PrepareAsyncTranslateTextRaw(::grpc::ClientContext* context, const ::sagittarius::translation::v1::TextTranslationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::sagittarius::translation::v1::StreamingTranslationRequest, ::sagittarius::translation::v1::StreamingTranslationResponse>* StreamingTranslationRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::sagittarius::translation::v1::StreamingTranslationRequest, ::sagittarius::translation::v1::StreamingTranslationResponse>* AsyncStreamingTranslationRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::sagittarius::translation::v1::StreamingTranslationRequest, ::sagittarius::translation::v1::StreamingTranslationResponse>* PrepareAsyncStreamingTranslationRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sagittarius::translation::v1::StreamingTranslationTaskResponse>* AsyncStreamingTranslationTaskRaw(::grpc::ClientContext* context, const ::sagittarius::translation::v1::StreamingTranslationTaskRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sagittarius::translation::v1::StreamingTranslationTaskResponse>* PrepareAsyncStreamingTranslationTaskRaw(::grpc::ClientContext* context, const ::sagittarius::translation::v1::StreamingTranslationTaskRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sagittarius::translation::v1::UserQuotaResponse>* AsyncGetUserQuotaRaw(::grpc::ClientContext* context, const ::sagittarius::translation::v1::UserQuotaRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sagittarius::translation::v1::UserQuotaResponse>* PrepareAsyncGetUserQuotaRaw(::grpc::ClientContext* context, const ::sagittarius::translation::v1::UserQuotaRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status TranslateMedia(::grpc::ClientContext* context, const ::sagittarius::translation::v1::MediaTranslationRequest& request, ::sagittarius::translation::v1::MediaTranslationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sagittarius::translation::v1::MediaTranslationResponse>> AsyncTranslateMedia(::grpc::ClientContext* context, const ::sagittarius::translation::v1::MediaTranslationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sagittarius::translation::v1::MediaTranslationResponse>>(AsyncTranslateMediaRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sagittarius::translation::v1::MediaTranslationResponse>> PrepareAsyncTranslateMedia(::grpc::ClientContext* context, const ::sagittarius::translation::v1::MediaTranslationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sagittarius::translation::v1::MediaTranslationResponse>>(PrepareAsyncTranslateMediaRaw(context, request, cq));
    }
    ::grpc::Status DetectLanguage(::grpc::ClientContext* context, const ::sagittarius::translation::v1::DetectionRequest& request, ::sagittarius::translation::v1::DetectionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sagittarius::translation::v1::DetectionResponse>> AsyncDetectLanguage(::grpc::ClientContext* context, const ::sagittarius::translation::v1::DetectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sagittarius::translation::v1::DetectionResponse>>(AsyncDetectLanguageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sagittarius::translation::v1::DetectionResponse>> PrepareAsyncDetectLanguage(::grpc::ClientContext* context, const ::sagittarius::translation::v1::DetectionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sagittarius::translation::v1::DetectionResponse>>(PrepareAsyncDetectLanguageRaw(context, request, cq));
    }
    ::grpc::Status Transcript(::grpc::ClientContext* context, const ::sagittarius::translation::v1::TranscriptRequest& request, ::sagittarius::translation::v1::TranscriptResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sagittarius::translation::v1::TranscriptResponse>> AsyncTranscript(::grpc::ClientContext* context, const ::sagittarius::translation::v1::TranscriptRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sagittarius::translation::v1::TranscriptResponse>>(AsyncTranscriptRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sagittarius::translation::v1::TranscriptResponse>> PrepareAsyncTranscript(::grpc::ClientContext* context, const ::sagittarius::translation::v1::TranscriptRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sagittarius::translation::v1::TranscriptResponse>>(PrepareAsyncTranscriptRaw(context, request, cq));
    }
    ::grpc::Status TranslateText(::grpc::ClientContext* context, const ::sagittarius::translation::v1::TextTranslationRequest& request, ::sagittarius::translation::v1::TextTranslationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sagittarius::translation::v1::TextTranslationResponse>> AsyncTranslateText(::grpc::ClientContext* context, const ::sagittarius::translation::v1::TextTranslationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sagittarius::translation::v1::TextTranslationResponse>>(AsyncTranslateTextRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sagittarius::translation::v1::TextTranslationResponse>> PrepareAsyncTranslateText(::grpc::ClientContext* context, const ::sagittarius::translation::v1::TextTranslationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sagittarius::translation::v1::TextTranslationResponse>>(PrepareAsyncTranslateTextRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::sagittarius::translation::v1::StreamingTranslationRequest, ::sagittarius::translation::v1::StreamingTranslationResponse>> StreamingTranslation(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::sagittarius::translation::v1::StreamingTranslationRequest, ::sagittarius::translation::v1::StreamingTranslationResponse>>(StreamingTranslationRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::sagittarius::translation::v1::StreamingTranslationRequest, ::sagittarius::translation::v1::StreamingTranslationResponse>> AsyncStreamingTranslation(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::sagittarius::translation::v1::StreamingTranslationRequest, ::sagittarius::translation::v1::StreamingTranslationResponse>>(AsyncStreamingTranslationRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::sagittarius::translation::v1::StreamingTranslationRequest, ::sagittarius::translation::v1::StreamingTranslationResponse>> PrepareAsyncStreamingTranslation(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::sagittarius::translation::v1::StreamingTranslationRequest, ::sagittarius::translation::v1::StreamingTranslationResponse>>(PrepareAsyncStreamingTranslationRaw(context, cq));
    }
    ::grpc::Status StreamingTranslationTask(::grpc::ClientContext* context, const ::sagittarius::translation::v1::StreamingTranslationTaskRequest& request, ::sagittarius::translation::v1::StreamingTranslationTaskResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sagittarius::translation::v1::StreamingTranslationTaskResponse>> AsyncStreamingTranslationTask(::grpc::ClientContext* context, const ::sagittarius::translation::v1::StreamingTranslationTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sagittarius::translation::v1::StreamingTranslationTaskResponse>>(AsyncStreamingTranslationTaskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sagittarius::translation::v1::StreamingTranslationTaskResponse>> PrepareAsyncStreamingTranslationTask(::grpc::ClientContext* context, const ::sagittarius::translation::v1::StreamingTranslationTaskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sagittarius::translation::v1::StreamingTranslationTaskResponse>>(PrepareAsyncStreamingTranslationTaskRaw(context, request, cq));
    }
    ::grpc::Status GetUserQuota(::grpc::ClientContext* context, const ::sagittarius::translation::v1::UserQuotaRequest& request, ::sagittarius::translation::v1::UserQuotaResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sagittarius::translation::v1::UserQuotaResponse>> AsyncGetUserQuota(::grpc::ClientContext* context, const ::sagittarius::translation::v1::UserQuotaRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sagittarius::translation::v1::UserQuotaResponse>>(AsyncGetUserQuotaRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sagittarius::translation::v1::UserQuotaResponse>> PrepareAsyncGetUserQuota(::grpc::ClientContext* context, const ::sagittarius::translation::v1::UserQuotaRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sagittarius::translation::v1::UserQuotaResponse>>(PrepareAsyncGetUserQuotaRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void TranslateMedia(::grpc::ClientContext* context, const ::sagittarius::translation::v1::MediaTranslationRequest* request, ::sagittarius::translation::v1::MediaTranslationResponse* response, std::function<void(::grpc::Status)>) override;
      void TranslateMedia(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sagittarius::translation::v1::MediaTranslationResponse* response, std::function<void(::grpc::Status)>) override;
      void TranslateMedia(::grpc::ClientContext* context, const ::sagittarius::translation::v1::MediaTranslationRequest* request, ::sagittarius::translation::v1::MediaTranslationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void TranslateMedia(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sagittarius::translation::v1::MediaTranslationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void DetectLanguage(::grpc::ClientContext* context, const ::sagittarius::translation::v1::DetectionRequest* request, ::sagittarius::translation::v1::DetectionResponse* response, std::function<void(::grpc::Status)>) override;
      void DetectLanguage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sagittarius::translation::v1::DetectionResponse* response, std::function<void(::grpc::Status)>) override;
      void DetectLanguage(::grpc::ClientContext* context, const ::sagittarius::translation::v1::DetectionRequest* request, ::sagittarius::translation::v1::DetectionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void DetectLanguage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sagittarius::translation::v1::DetectionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Transcript(::grpc::ClientContext* context, const ::sagittarius::translation::v1::TranscriptRequest* request, ::sagittarius::translation::v1::TranscriptResponse* response, std::function<void(::grpc::Status)>) override;
      void Transcript(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sagittarius::translation::v1::TranscriptResponse* response, std::function<void(::grpc::Status)>) override;
      void Transcript(::grpc::ClientContext* context, const ::sagittarius::translation::v1::TranscriptRequest* request, ::sagittarius::translation::v1::TranscriptResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Transcript(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sagittarius::translation::v1::TranscriptResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void TranslateText(::grpc::ClientContext* context, const ::sagittarius::translation::v1::TextTranslationRequest* request, ::sagittarius::translation::v1::TextTranslationResponse* response, std::function<void(::grpc::Status)>) override;
      void TranslateText(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sagittarius::translation::v1::TextTranslationResponse* response, std::function<void(::grpc::Status)>) override;
      void TranslateText(::grpc::ClientContext* context, const ::sagittarius::translation::v1::TextTranslationRequest* request, ::sagittarius::translation::v1::TextTranslationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void TranslateText(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sagittarius::translation::v1::TextTranslationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void StreamingTranslation(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::sagittarius::translation::v1::StreamingTranslationRequest,::sagittarius::translation::v1::StreamingTranslationResponse>* reactor) override;
      void StreamingTranslationTask(::grpc::ClientContext* context, const ::sagittarius::translation::v1::StreamingTranslationTaskRequest* request, ::sagittarius::translation::v1::StreamingTranslationTaskResponse* response, std::function<void(::grpc::Status)>) override;
      void StreamingTranslationTask(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sagittarius::translation::v1::StreamingTranslationTaskResponse* response, std::function<void(::grpc::Status)>) override;
      void StreamingTranslationTask(::grpc::ClientContext* context, const ::sagittarius::translation::v1::StreamingTranslationTaskRequest* request, ::sagittarius::translation::v1::StreamingTranslationTaskResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void StreamingTranslationTask(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sagittarius::translation::v1::StreamingTranslationTaskResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetUserQuota(::grpc::ClientContext* context, const ::sagittarius::translation::v1::UserQuotaRequest* request, ::sagittarius::translation::v1::UserQuotaResponse* response, std::function<void(::grpc::Status)>) override;
      void GetUserQuota(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sagittarius::translation::v1::UserQuotaResponse* response, std::function<void(::grpc::Status)>) override;
      void GetUserQuota(::grpc::ClientContext* context, const ::sagittarius::translation::v1::UserQuotaRequest* request, ::sagittarius::translation::v1::UserQuotaResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetUserQuota(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sagittarius::translation::v1::UserQuotaResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::sagittarius::translation::v1::MediaTranslationResponse>* AsyncTranslateMediaRaw(::grpc::ClientContext* context, const ::sagittarius::translation::v1::MediaTranslationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sagittarius::translation::v1::MediaTranslationResponse>* PrepareAsyncTranslateMediaRaw(::grpc::ClientContext* context, const ::sagittarius::translation::v1::MediaTranslationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sagittarius::translation::v1::DetectionResponse>* AsyncDetectLanguageRaw(::grpc::ClientContext* context, const ::sagittarius::translation::v1::DetectionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sagittarius::translation::v1::DetectionResponse>* PrepareAsyncDetectLanguageRaw(::grpc::ClientContext* context, const ::sagittarius::translation::v1::DetectionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sagittarius::translation::v1::TranscriptResponse>* AsyncTranscriptRaw(::grpc::ClientContext* context, const ::sagittarius::translation::v1::TranscriptRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sagittarius::translation::v1::TranscriptResponse>* PrepareAsyncTranscriptRaw(::grpc::ClientContext* context, const ::sagittarius::translation::v1::TranscriptRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sagittarius::translation::v1::TextTranslationResponse>* AsyncTranslateTextRaw(::grpc::ClientContext* context, const ::sagittarius::translation::v1::TextTranslationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sagittarius::translation::v1::TextTranslationResponse>* PrepareAsyncTranslateTextRaw(::grpc::ClientContext* context, const ::sagittarius::translation::v1::TextTranslationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::sagittarius::translation::v1::StreamingTranslationRequest, ::sagittarius::translation::v1::StreamingTranslationResponse>* StreamingTranslationRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::sagittarius::translation::v1::StreamingTranslationRequest, ::sagittarius::translation::v1::StreamingTranslationResponse>* AsyncStreamingTranslationRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::sagittarius::translation::v1::StreamingTranslationRequest, ::sagittarius::translation::v1::StreamingTranslationResponse>* PrepareAsyncStreamingTranslationRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sagittarius::translation::v1::StreamingTranslationTaskResponse>* AsyncStreamingTranslationTaskRaw(::grpc::ClientContext* context, const ::sagittarius::translation::v1::StreamingTranslationTaskRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sagittarius::translation::v1::StreamingTranslationTaskResponse>* PrepareAsyncStreamingTranslationTaskRaw(::grpc::ClientContext* context, const ::sagittarius::translation::v1::StreamingTranslationTaskRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sagittarius::translation::v1::UserQuotaResponse>* AsyncGetUserQuotaRaw(::grpc::ClientContext* context, const ::sagittarius::translation::v1::UserQuotaRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sagittarius::translation::v1::UserQuotaResponse>* PrepareAsyncGetUserQuotaRaw(::grpc::ClientContext* context, const ::sagittarius::translation::v1::UserQuotaRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_TranslateMedia_;
    const ::grpc::internal::RpcMethod rpcmethod_DetectLanguage_;
    const ::grpc::internal::RpcMethod rpcmethod_Transcript_;
    const ::grpc::internal::RpcMethod rpcmethod_TranslateText_;
    const ::grpc::internal::RpcMethod rpcmethod_StreamingTranslation_;
    const ::grpc::internal::RpcMethod rpcmethod_StreamingTranslationTask_;
    const ::grpc::internal::RpcMethod rpcmethod_GetUserQuota_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Translate media(audio or video) by media identity
    virtual ::grpc::Status TranslateMedia(::grpc::ServerContext* context, const ::sagittarius::translation::v1::MediaTranslationRequest* request, ::sagittarius::translation::v1::MediaTranslationResponse* response);
    // detect the language of text
    virtual ::grpc::Status DetectLanguage(::grpc::ServerContext* context, const ::sagittarius::translation::v1::DetectionRequest* request, ::sagittarius::translation::v1::DetectionResponse* response);
    virtual ::grpc::Status Transcript(::grpc::ServerContext* context, const ::sagittarius::translation::v1::TranscriptRequest* request, ::sagittarius::translation::v1::TranscriptResponse* response);
    // Translate text by Google Translation Service
    virtual ::grpc::Status TranslateText(::grpc::ServerContext* context, const ::sagittarius::translation::v1::TextTranslationRequest* request, ::sagittarius::translation::v1::TextTranslationResponse* response);
    // Performs bidirectional streaming audio translation: receive results after or while
    // sending audio. This method is only available via the gRPC API (not REST).
    virtual ::grpc::Status StreamingTranslation(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::sagittarius::translation::v1::StreamingTranslationResponse, ::sagittarius::translation::v1::StreamingTranslationRequest>* stream);
    // Check StreamingTranslationTask results or estimate finish time
    // and maybe other informations related to the task
    virtual ::grpc::Status StreamingTranslationTask(::grpc::ServerContext* context, const ::sagittarius::translation::v1::StreamingTranslationTaskRequest* request, ::sagittarius::translation::v1::StreamingTranslationTaskResponse* response);
    // Get User Quota
    virtual ::grpc::Status GetUserQuota(::grpc::ServerContext* context, const ::sagittarius::translation::v1::UserQuotaRequest* request, ::sagittarius::translation::v1::UserQuotaResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_TranslateMedia : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TranslateMedia() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_TranslateMedia() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TranslateMedia(::grpc::ServerContext* /*context*/, const ::sagittarius::translation::v1::MediaTranslationRequest* /*request*/, ::sagittarius::translation::v1::MediaTranslationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTranslateMedia(::grpc::ServerContext* context, ::sagittarius::translation::v1::MediaTranslationRequest* request, ::grpc::ServerAsyncResponseWriter< ::sagittarius::translation::v1::MediaTranslationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DetectLanguage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DetectLanguage() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_DetectLanguage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DetectLanguage(::grpc::ServerContext* /*context*/, const ::sagittarius::translation::v1::DetectionRequest* /*request*/, ::sagittarius::translation::v1::DetectionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDetectLanguage(::grpc::ServerContext* context, ::sagittarius::translation::v1::DetectionRequest* request, ::grpc::ServerAsyncResponseWriter< ::sagittarius::translation::v1::DetectionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Transcript : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Transcript() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Transcript() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Transcript(::grpc::ServerContext* /*context*/, const ::sagittarius::translation::v1::TranscriptRequest* /*request*/, ::sagittarius::translation::v1::TranscriptResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTranscript(::grpc::ServerContext* context, ::sagittarius::translation::v1::TranscriptRequest* request, ::grpc::ServerAsyncResponseWriter< ::sagittarius::translation::v1::TranscriptResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TranslateText : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TranslateText() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_TranslateText() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TranslateText(::grpc::ServerContext* /*context*/, const ::sagittarius::translation::v1::TextTranslationRequest* /*request*/, ::sagittarius::translation::v1::TextTranslationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTranslateText(::grpc::ServerContext* context, ::sagittarius::translation::v1::TextTranslationRequest* request, ::grpc::ServerAsyncResponseWriter< ::sagittarius::translation::v1::TextTranslationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StreamingTranslation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StreamingTranslation() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_StreamingTranslation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamingTranslation(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::sagittarius::translation::v1::StreamingTranslationResponse, ::sagittarius::translation::v1::StreamingTranslationRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamingTranslation(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::sagittarius::translation::v1::StreamingTranslationResponse, ::sagittarius::translation::v1::StreamingTranslationRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(4, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StreamingTranslationTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StreamingTranslationTask() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_StreamingTranslationTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamingTranslationTask(::grpc::ServerContext* /*context*/, const ::sagittarius::translation::v1::StreamingTranslationTaskRequest* /*request*/, ::sagittarius::translation::v1::StreamingTranslationTaskResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamingTranslationTask(::grpc::ServerContext* context, ::sagittarius::translation::v1::StreamingTranslationTaskRequest* request, ::grpc::ServerAsyncResponseWriter< ::sagittarius::translation::v1::StreamingTranslationTaskResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetUserQuota : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetUserQuota() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_GetUserQuota() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUserQuota(::grpc::ServerContext* /*context*/, const ::sagittarius::translation::v1::UserQuotaRequest* /*request*/, ::sagittarius::translation::v1::UserQuotaResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetUserQuota(::grpc::ServerContext* context, ::sagittarius::translation::v1::UserQuotaRequest* request, ::grpc::ServerAsyncResponseWriter< ::sagittarius::translation::v1::UserQuotaResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_TranslateMedia<WithAsyncMethod_DetectLanguage<WithAsyncMethod_Transcript<WithAsyncMethod_TranslateText<WithAsyncMethod_StreamingTranslation<WithAsyncMethod_StreamingTranslationTask<WithAsyncMethod_GetUserQuota<Service > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_TranslateMedia : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_TranslateMedia() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::sagittarius::translation::v1::MediaTranslationRequest, ::sagittarius::translation::v1::MediaTranslationResponse>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::sagittarius::translation::v1::MediaTranslationRequest* request, ::sagittarius::translation::v1::MediaTranslationResponse* response) { return this->TranslateMedia(context, request, response); }));}
    void SetMessageAllocatorFor_TranslateMedia(
        ::grpc::experimental::MessageAllocator< ::sagittarius::translation::v1::MediaTranslationRequest, ::sagittarius::translation::v1::MediaTranslationResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::sagittarius::translation::v1::MediaTranslationRequest, ::sagittarius::translation::v1::MediaTranslationResponse>*>(
          ::grpc::Service::experimental().GetHandler(0))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_TranslateMedia() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TranslateMedia(::grpc::ServerContext* /*context*/, const ::sagittarius::translation::v1::MediaTranslationRequest* /*request*/, ::sagittarius::translation::v1::MediaTranslationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* TranslateMedia(::grpc::experimental::CallbackServerContext* /*context*/, const ::sagittarius::translation::v1::MediaTranslationRequest* /*request*/, ::sagittarius::translation::v1::MediaTranslationResponse* /*response*/) { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DetectLanguage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DetectLanguage() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::sagittarius::translation::v1::DetectionRequest, ::sagittarius::translation::v1::DetectionResponse>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::sagittarius::translation::v1::DetectionRequest* request, ::sagittarius::translation::v1::DetectionResponse* response) { return this->DetectLanguage(context, request, response); }));}
    void SetMessageAllocatorFor_DetectLanguage(
        ::grpc::experimental::MessageAllocator< ::sagittarius::translation::v1::DetectionRequest, ::sagittarius::translation::v1::DetectionResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::sagittarius::translation::v1::DetectionRequest, ::sagittarius::translation::v1::DetectionResponse>*>(
          ::grpc::Service::experimental().GetHandler(1))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DetectLanguage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DetectLanguage(::grpc::ServerContext* /*context*/, const ::sagittarius::translation::v1::DetectionRequest* /*request*/, ::sagittarius::translation::v1::DetectionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* DetectLanguage(::grpc::experimental::CallbackServerContext* /*context*/, const ::sagittarius::translation::v1::DetectionRequest* /*request*/, ::sagittarius::translation::v1::DetectionResponse* /*response*/) { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Transcript : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Transcript() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::sagittarius::translation::v1::TranscriptRequest, ::sagittarius::translation::v1::TranscriptResponse>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::sagittarius::translation::v1::TranscriptRequest* request, ::sagittarius::translation::v1::TranscriptResponse* response) { return this->Transcript(context, request, response); }));}
    void SetMessageAllocatorFor_Transcript(
        ::grpc::experimental::MessageAllocator< ::sagittarius::translation::v1::TranscriptRequest, ::sagittarius::translation::v1::TranscriptResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::sagittarius::translation::v1::TranscriptRequest, ::sagittarius::translation::v1::TranscriptResponse>*>(
          ::grpc::Service::experimental().GetHandler(2))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Transcript() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Transcript(::grpc::ServerContext* /*context*/, const ::sagittarius::translation::v1::TranscriptRequest* /*request*/, ::sagittarius::translation::v1::TranscriptResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* Transcript(::grpc::experimental::CallbackServerContext* /*context*/, const ::sagittarius::translation::v1::TranscriptRequest* /*request*/, ::sagittarius::translation::v1::TranscriptResponse* /*response*/) { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_TranslateText : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_TranslateText() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::sagittarius::translation::v1::TextTranslationRequest, ::sagittarius::translation::v1::TextTranslationResponse>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::sagittarius::translation::v1::TextTranslationRequest* request, ::sagittarius::translation::v1::TextTranslationResponse* response) { return this->TranslateText(context, request, response); }));}
    void SetMessageAllocatorFor_TranslateText(
        ::grpc::experimental::MessageAllocator< ::sagittarius::translation::v1::TextTranslationRequest, ::sagittarius::translation::v1::TextTranslationResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::sagittarius::translation::v1::TextTranslationRequest, ::sagittarius::translation::v1::TextTranslationResponse>*>(
          ::grpc::Service::experimental().GetHandler(3))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_TranslateText() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TranslateText(::grpc::ServerContext* /*context*/, const ::sagittarius::translation::v1::TextTranslationRequest* /*request*/, ::sagittarius::translation::v1::TextTranslationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* TranslateText(::grpc::experimental::CallbackServerContext* /*context*/, const ::sagittarius::translation::v1::TextTranslationRequest* /*request*/, ::sagittarius::translation::v1::TextTranslationResponse* /*response*/) { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_StreamingTranslation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_StreamingTranslation() {
      ::grpc::Service::experimental().MarkMethodCallback(4,
        new ::grpc_impl::internal::CallbackBidiHandler< ::sagittarius::translation::v1::StreamingTranslationRequest, ::sagittarius::translation::v1::StreamingTranslationResponse>(
          [this](::grpc::experimental::CallbackServerContext* context) { return this->StreamingTranslation(context); }));
    }
    ~ExperimentalWithCallbackMethod_StreamingTranslation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamingTranslation(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::sagittarius::translation::v1::StreamingTranslationResponse, ::sagittarius::translation::v1::StreamingTranslationRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerBidiReactor< ::sagittarius::translation::v1::StreamingTranslationRequest, ::sagittarius::translation::v1::StreamingTranslationResponse>* StreamingTranslation(::grpc::experimental::CallbackServerContext* /*context*/) { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_StreamingTranslationTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_StreamingTranslationTask() {
      ::grpc::Service::experimental().MarkMethodCallback(5,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::sagittarius::translation::v1::StreamingTranslationTaskRequest, ::sagittarius::translation::v1::StreamingTranslationTaskResponse>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::sagittarius::translation::v1::StreamingTranslationTaskRequest* request, ::sagittarius::translation::v1::StreamingTranslationTaskResponse* response) { return this->StreamingTranslationTask(context, request, response); }));}
    void SetMessageAllocatorFor_StreamingTranslationTask(
        ::grpc::experimental::MessageAllocator< ::sagittarius::translation::v1::StreamingTranslationTaskRequest, ::sagittarius::translation::v1::StreamingTranslationTaskResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::sagittarius::translation::v1::StreamingTranslationTaskRequest, ::sagittarius::translation::v1::StreamingTranslationTaskResponse>*>(
          ::grpc::Service::experimental().GetHandler(5))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_StreamingTranslationTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamingTranslationTask(::grpc::ServerContext* /*context*/, const ::sagittarius::translation::v1::StreamingTranslationTaskRequest* /*request*/, ::sagittarius::translation::v1::StreamingTranslationTaskResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* StreamingTranslationTask(::grpc::experimental::CallbackServerContext* /*context*/, const ::sagittarius::translation::v1::StreamingTranslationTaskRequest* /*request*/, ::sagittarius::translation::v1::StreamingTranslationTaskResponse* /*response*/) { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetUserQuota : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetUserQuota() {
      ::grpc::Service::experimental().MarkMethodCallback(6,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::sagittarius::translation::v1::UserQuotaRequest, ::sagittarius::translation::v1::UserQuotaResponse>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::sagittarius::translation::v1::UserQuotaRequest* request, ::sagittarius::translation::v1::UserQuotaResponse* response) { return this->GetUserQuota(context, request, response); }));}
    void SetMessageAllocatorFor_GetUserQuota(
        ::grpc::experimental::MessageAllocator< ::sagittarius::translation::v1::UserQuotaRequest, ::sagittarius::translation::v1::UserQuotaResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::sagittarius::translation::v1::UserQuotaRequest, ::sagittarius::translation::v1::UserQuotaResponse>*>(
          ::grpc::Service::experimental().GetHandler(6))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetUserQuota() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUserQuota(::grpc::ServerContext* /*context*/, const ::sagittarius::translation::v1::UserQuotaRequest* /*request*/, ::sagittarius::translation::v1::UserQuotaResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* GetUserQuota(::grpc::experimental::CallbackServerContext* /*context*/, const ::sagittarius::translation::v1::UserQuotaRequest* /*request*/, ::sagittarius::translation::v1::UserQuotaResponse* /*response*/) { return nullptr; }
  };
  typedef ExperimentalWithCallbackMethod_TranslateMedia<ExperimentalWithCallbackMethod_DetectLanguage<ExperimentalWithCallbackMethod_Transcript<ExperimentalWithCallbackMethod_TranslateText<ExperimentalWithCallbackMethod_StreamingTranslation<ExperimentalWithCallbackMethod_StreamingTranslationTask<ExperimentalWithCallbackMethod_GetUserQuota<Service > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_TranslateMedia : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TranslateMedia() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_TranslateMedia() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TranslateMedia(::grpc::ServerContext* /*context*/, const ::sagittarius::translation::v1::MediaTranslationRequest* /*request*/, ::sagittarius::translation::v1::MediaTranslationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DetectLanguage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DetectLanguage() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_DetectLanguage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DetectLanguage(::grpc::ServerContext* /*context*/, const ::sagittarius::translation::v1::DetectionRequest* /*request*/, ::sagittarius::translation::v1::DetectionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Transcript : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Transcript() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Transcript() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Transcript(::grpc::ServerContext* /*context*/, const ::sagittarius::translation::v1::TranscriptRequest* /*request*/, ::sagittarius::translation::v1::TranscriptResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TranslateText : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TranslateText() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_TranslateText() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TranslateText(::grpc::ServerContext* /*context*/, const ::sagittarius::translation::v1::TextTranslationRequest* /*request*/, ::sagittarius::translation::v1::TextTranslationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StreamingTranslation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StreamingTranslation() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_StreamingTranslation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamingTranslation(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::sagittarius::translation::v1::StreamingTranslationResponse, ::sagittarius::translation::v1::StreamingTranslationRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StreamingTranslationTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StreamingTranslationTask() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_StreamingTranslationTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamingTranslationTask(::grpc::ServerContext* /*context*/, const ::sagittarius::translation::v1::StreamingTranslationTaskRequest* /*request*/, ::sagittarius::translation::v1::StreamingTranslationTaskResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetUserQuota : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetUserQuota() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_GetUserQuota() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUserQuota(::grpc::ServerContext* /*context*/, const ::sagittarius::translation::v1::UserQuotaRequest* /*request*/, ::sagittarius::translation::v1::UserQuotaResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_TranslateMedia : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TranslateMedia() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_TranslateMedia() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TranslateMedia(::grpc::ServerContext* /*context*/, const ::sagittarius::translation::v1::MediaTranslationRequest* /*request*/, ::sagittarius::translation::v1::MediaTranslationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTranslateMedia(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DetectLanguage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DetectLanguage() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_DetectLanguage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DetectLanguage(::grpc::ServerContext* /*context*/, const ::sagittarius::translation::v1::DetectionRequest* /*request*/, ::sagittarius::translation::v1::DetectionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDetectLanguage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Transcript : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Transcript() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Transcript() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Transcript(::grpc::ServerContext* /*context*/, const ::sagittarius::translation::v1::TranscriptRequest* /*request*/, ::sagittarius::translation::v1::TranscriptResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTranscript(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TranslateText : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TranslateText() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_TranslateText() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TranslateText(::grpc::ServerContext* /*context*/, const ::sagittarius::translation::v1::TextTranslationRequest* /*request*/, ::sagittarius::translation::v1::TextTranslationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTranslateText(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StreamingTranslation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StreamingTranslation() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_StreamingTranslation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamingTranslation(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::sagittarius::translation::v1::StreamingTranslationResponse, ::sagittarius::translation::v1::StreamingTranslationRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamingTranslation(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(4, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StreamingTranslationTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StreamingTranslationTask() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_StreamingTranslationTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamingTranslationTask(::grpc::ServerContext* /*context*/, const ::sagittarius::translation::v1::StreamingTranslationTaskRequest* /*request*/, ::sagittarius::translation::v1::StreamingTranslationTaskResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamingTranslationTask(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetUserQuota : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetUserQuota() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_GetUserQuota() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUserQuota(::grpc::ServerContext* /*context*/, const ::sagittarius::translation::v1::UserQuotaRequest* /*request*/, ::sagittarius::translation::v1::UserQuotaResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetUserQuota(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_TranslateMedia : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_TranslateMedia() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->TranslateMedia(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_TranslateMedia() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TranslateMedia(::grpc::ServerContext* /*context*/, const ::sagittarius::translation::v1::MediaTranslationRequest* /*request*/, ::sagittarius::translation::v1::MediaTranslationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* TranslateMedia(::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/) { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DetectLanguage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DetectLanguage() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DetectLanguage(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DetectLanguage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DetectLanguage(::grpc::ServerContext* /*context*/, const ::sagittarius::translation::v1::DetectionRequest* /*request*/, ::sagittarius::translation::v1::DetectionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* DetectLanguage(::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/) { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Transcript : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Transcript() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Transcript(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Transcript() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Transcript(::grpc::ServerContext* /*context*/, const ::sagittarius::translation::v1::TranscriptRequest* /*request*/, ::sagittarius::translation::v1::TranscriptResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* Transcript(::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/) { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_TranslateText : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_TranslateText() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->TranslateText(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_TranslateText() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TranslateText(::grpc::ServerContext* /*context*/, const ::sagittarius::translation::v1::TextTranslationRequest* /*request*/, ::sagittarius::translation::v1::TextTranslationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* TranslateText(::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/) { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_StreamingTranslation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_StreamingTranslation() {
      ::grpc::Service::experimental().MarkMethodRawCallback(4,
        new ::grpc_impl::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::experimental::CallbackServerContext* context) { return this->StreamingTranslation(context); }));
    }
    ~ExperimentalWithRawCallbackMethod_StreamingTranslation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamingTranslation(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::sagittarius::translation::v1::StreamingTranslationResponse, ::sagittarius::translation::v1::StreamingTranslationRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* StreamingTranslation(::grpc::experimental::CallbackServerContext* /*context*/) { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_StreamingTranslationTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_StreamingTranslationTask() {
      ::grpc::Service::experimental().MarkMethodRawCallback(5,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->StreamingTranslationTask(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_StreamingTranslationTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamingTranslationTask(::grpc::ServerContext* /*context*/, const ::sagittarius::translation::v1::StreamingTranslationTaskRequest* /*request*/, ::sagittarius::translation::v1::StreamingTranslationTaskResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* StreamingTranslationTask(::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/) { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetUserQuota : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetUserQuota() {
      ::grpc::Service::experimental().MarkMethodRawCallback(6,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::experimental::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetUserQuota(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetUserQuota() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUserQuota(::grpc::ServerContext* /*context*/, const ::sagittarius::translation::v1::UserQuotaRequest* /*request*/, ::sagittarius::translation::v1::UserQuotaResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerUnaryReactor* GetUserQuota(::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/) { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TranslateMedia : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TranslateMedia() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::sagittarius::translation::v1::MediaTranslationRequest, ::sagittarius::translation::v1::MediaTranslationResponse>(std::bind(&WithStreamedUnaryMethod_TranslateMedia<BaseClass>::StreamedTranslateMedia, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_TranslateMedia() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TranslateMedia(::grpc::ServerContext* /*context*/, const ::sagittarius::translation::v1::MediaTranslationRequest* /*request*/, ::sagittarius::translation::v1::MediaTranslationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTranslateMedia(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sagittarius::translation::v1::MediaTranslationRequest,::sagittarius::translation::v1::MediaTranslationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DetectLanguage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DetectLanguage() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::sagittarius::translation::v1::DetectionRequest, ::sagittarius::translation::v1::DetectionResponse>(std::bind(&WithStreamedUnaryMethod_DetectLanguage<BaseClass>::StreamedDetectLanguage, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DetectLanguage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DetectLanguage(::grpc::ServerContext* /*context*/, const ::sagittarius::translation::v1::DetectionRequest* /*request*/, ::sagittarius::translation::v1::DetectionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDetectLanguage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sagittarius::translation::v1::DetectionRequest,::sagittarius::translation::v1::DetectionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Transcript : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Transcript() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::sagittarius::translation::v1::TranscriptRequest, ::sagittarius::translation::v1::TranscriptResponse>(std::bind(&WithStreamedUnaryMethod_Transcript<BaseClass>::StreamedTranscript, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Transcript() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Transcript(::grpc::ServerContext* /*context*/, const ::sagittarius::translation::v1::TranscriptRequest* /*request*/, ::sagittarius::translation::v1::TranscriptResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTranscript(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sagittarius::translation::v1::TranscriptRequest,::sagittarius::translation::v1::TranscriptResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TranslateText : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TranslateText() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::sagittarius::translation::v1::TextTranslationRequest, ::sagittarius::translation::v1::TextTranslationResponse>(std::bind(&WithStreamedUnaryMethod_TranslateText<BaseClass>::StreamedTranslateText, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_TranslateText() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TranslateText(::grpc::ServerContext* /*context*/, const ::sagittarius::translation::v1::TextTranslationRequest* /*request*/, ::sagittarius::translation::v1::TextTranslationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTranslateText(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sagittarius::translation::v1::TextTranslationRequest,::sagittarius::translation::v1::TextTranslationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StreamingTranslationTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_StreamingTranslationTask() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::sagittarius::translation::v1::StreamingTranslationTaskRequest, ::sagittarius::translation::v1::StreamingTranslationTaskResponse>(std::bind(&WithStreamedUnaryMethod_StreamingTranslationTask<BaseClass>::StreamedStreamingTranslationTask, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_StreamingTranslationTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StreamingTranslationTask(::grpc::ServerContext* /*context*/, const ::sagittarius::translation::v1::StreamingTranslationTaskRequest* /*request*/, ::sagittarius::translation::v1::StreamingTranslationTaskResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStreamingTranslationTask(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sagittarius::translation::v1::StreamingTranslationTaskRequest,::sagittarius::translation::v1::StreamingTranslationTaskResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetUserQuota : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetUserQuota() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::sagittarius::translation::v1::UserQuotaRequest, ::sagittarius::translation::v1::UserQuotaResponse>(std::bind(&WithStreamedUnaryMethod_GetUserQuota<BaseClass>::StreamedGetUserQuota, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetUserQuota() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetUserQuota(::grpc::ServerContext* /*context*/, const ::sagittarius::translation::v1::UserQuotaRequest* /*request*/, ::sagittarius::translation::v1::UserQuotaResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetUserQuota(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sagittarius::translation::v1::UserQuotaRequest,::sagittarius::translation::v1::UserQuotaResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_TranslateMedia<WithStreamedUnaryMethod_DetectLanguage<WithStreamedUnaryMethod_Transcript<WithStreamedUnaryMethod_TranslateText<WithStreamedUnaryMethod_StreamingTranslationTask<WithStreamedUnaryMethod_GetUserQuota<Service > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_TranslateMedia<WithStreamedUnaryMethod_DetectLanguage<WithStreamedUnaryMethod_Transcript<WithStreamedUnaryMethod_TranslateText<WithStreamedUnaryMethod_StreamingTranslationTask<WithStreamedUnaryMethod_GetUserQuota<Service > > > > > > StreamedService;
};

}  // namespace v1
}  // namespace translation
}  // namespace sagittarius


#endif  // GRPC_translation_2fv1_2ftranslation_2eproto__INCLUDED
