// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: media/v1/media.proto

#include "media/v1/media.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2frpc_2fstatus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Status_google_2frpc_2fstatus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_media_2fv1_2fmedia_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Info_media_2fv1_2fmedia_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_media_2fv1_2fmedia_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Info_TrackInfo_media_2fv1_2fmedia_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_media_2fv1_2fmedia_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Thumbnail_media_2fv1_2fmedia_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_media_2fv1_2fmedia_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TimeRange_media_2fv1_2fmedia_2eproto;
namespace sagittarius {
namespace media {
namespace v1 {
class Info_TrackInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Info_TrackInfo> _instance;
} _Info_TrackInfo_default_instance_;
class InfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Info> _instance;
} _Info_default_instance_;
class GetInfoRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetInfoRequest> _instance;
} _GetInfoRequest_default_instance_;
class UpdateInfoRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateInfoRequest> _instance;
} _UpdateInfoRequest_default_instance_;
class ThumbnailTimeRangesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ThumbnailTimeRangesRequest> _instance;
} _ThumbnailTimeRangesRequest_default_instance_;
class TimeRangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TimeRange> _instance;
} _TimeRange_default_instance_;
class ThumbnailTimeRangesResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ThumbnailTimeRangesResponse> _instance;
} _ThumbnailTimeRangesResponse_default_instance_;
class ThumbnailRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ThumbnailRequest> _instance;
  const ::sagittarius::media::v1::TimeRange* range_;
  double timestamp_;
} _ThumbnailRequest_default_instance_;
class ThumbnailDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Thumbnail> _instance;
} _Thumbnail_default_instance_;
class ThumbnailResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ThumbnailResponse> _instance;
} _ThumbnailResponse_default_instance_;
class UpdateThumbnailRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateThumbnailRequest> _instance;
} _UpdateThumbnailRequest_default_instance_;
}  // namespace v1
}  // namespace media
}  // namespace sagittarius
static void InitDefaultsscc_info_GetInfoRequest_media_2fv1_2fmedia_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sagittarius::media::v1::_GetInfoRequest_default_instance_;
    new (ptr) ::sagittarius::media::v1::GetInfoRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sagittarius::media::v1::GetInfoRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetInfoRequest_media_2fv1_2fmedia_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_GetInfoRequest_media_2fv1_2fmedia_2eproto}, {}};

static void InitDefaultsscc_info_Info_media_2fv1_2fmedia_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sagittarius::media::v1::_Info_default_instance_;
    new (ptr) ::sagittarius::media::v1::Info();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sagittarius::media::v1::Info::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Info_media_2fv1_2fmedia_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_Info_media_2fv1_2fmedia_2eproto}, {
      &scc_info_Info_TrackInfo_media_2fv1_2fmedia_2eproto.base,}};

static void InitDefaultsscc_info_Info_TrackInfo_media_2fv1_2fmedia_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sagittarius::media::v1::_Info_TrackInfo_default_instance_;
    new (ptr) ::sagittarius::media::v1::Info_TrackInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sagittarius::media::v1::Info_TrackInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Info_TrackInfo_media_2fv1_2fmedia_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Info_TrackInfo_media_2fv1_2fmedia_2eproto}, {}};

static void InitDefaultsscc_info_Thumbnail_media_2fv1_2fmedia_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sagittarius::media::v1::_Thumbnail_default_instance_;
    new (ptr) ::sagittarius::media::v1::Thumbnail();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sagittarius::media::v1::Thumbnail::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Thumbnail_media_2fv1_2fmedia_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Thumbnail_media_2fv1_2fmedia_2eproto}, {}};

static void InitDefaultsscc_info_ThumbnailRequest_media_2fv1_2fmedia_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sagittarius::media::v1::_ThumbnailRequest_default_instance_;
    new (ptr) ::sagittarius::media::v1::ThumbnailRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sagittarius::media::v1::ThumbnailRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ThumbnailRequest_media_2fv1_2fmedia_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ThumbnailRequest_media_2fv1_2fmedia_2eproto}, {
      &scc_info_TimeRange_media_2fv1_2fmedia_2eproto.base,}};

static void InitDefaultsscc_info_ThumbnailResponse_media_2fv1_2fmedia_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sagittarius::media::v1::_ThumbnailResponse_default_instance_;
    new (ptr) ::sagittarius::media::v1::ThumbnailResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sagittarius::media::v1::ThumbnailResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ThumbnailResponse_media_2fv1_2fmedia_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_ThumbnailResponse_media_2fv1_2fmedia_2eproto}, {
      &scc_info_Status_google_2frpc_2fstatus_2eproto.base,
      &scc_info_Thumbnail_media_2fv1_2fmedia_2eproto.base,}};

static void InitDefaultsscc_info_ThumbnailTimeRangesRequest_media_2fv1_2fmedia_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sagittarius::media::v1::_ThumbnailTimeRangesRequest_default_instance_;
    new (ptr) ::sagittarius::media::v1::ThumbnailTimeRangesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sagittarius::media::v1::ThumbnailTimeRangesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ThumbnailTimeRangesRequest_media_2fv1_2fmedia_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ThumbnailTimeRangesRequest_media_2fv1_2fmedia_2eproto}, {}};

static void InitDefaultsscc_info_ThumbnailTimeRangesResponse_media_2fv1_2fmedia_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sagittarius::media::v1::_ThumbnailTimeRangesResponse_default_instance_;
    new (ptr) ::sagittarius::media::v1::ThumbnailTimeRangesResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sagittarius::media::v1::ThumbnailTimeRangesResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ThumbnailTimeRangesResponse_media_2fv1_2fmedia_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_ThumbnailTimeRangesResponse_media_2fv1_2fmedia_2eproto}, {
      &scc_info_Status_google_2frpc_2fstatus_2eproto.base,
      &scc_info_TimeRange_media_2fv1_2fmedia_2eproto.base,}};

static void InitDefaultsscc_info_TimeRange_media_2fv1_2fmedia_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sagittarius::media::v1::_TimeRange_default_instance_;
    new (ptr) ::sagittarius::media::v1::TimeRange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sagittarius::media::v1::TimeRange::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TimeRange_media_2fv1_2fmedia_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TimeRange_media_2fv1_2fmedia_2eproto}, {}};

static void InitDefaultsscc_info_UpdateInfoRequest_media_2fv1_2fmedia_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sagittarius::media::v1::_UpdateInfoRequest_default_instance_;
    new (ptr) ::sagittarius::media::v1::UpdateInfoRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sagittarius::media::v1::UpdateInfoRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdateInfoRequest_media_2fv1_2fmedia_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_UpdateInfoRequest_media_2fv1_2fmedia_2eproto}, {
      &scc_info_Info_media_2fv1_2fmedia_2eproto.base,}};

static void InitDefaultsscc_info_UpdateThumbnailRequest_media_2fv1_2fmedia_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sagittarius::media::v1::_UpdateThumbnailRequest_default_instance_;
    new (ptr) ::sagittarius::media::v1::UpdateThumbnailRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sagittarius::media::v1::UpdateThumbnailRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdateThumbnailRequest_media_2fv1_2fmedia_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_UpdateThumbnailRequest_media_2fv1_2fmedia_2eproto}, {
      &scc_info_Thumbnail_media_2fv1_2fmedia_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_media_2fv1_2fmedia_2eproto[11];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_media_2fv1_2fmedia_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_media_2fv1_2fmedia_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_media_2fv1_2fmedia_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sagittarius::media::v1::Info_TrackInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sagittarius::media::v1::Info_TrackInfo, types_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sagittarius::media::v1::Info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sagittarius::media::v1::Info, media_hash_),
  PROTOBUF_FIELD_OFFSET(::sagittarius::media::v1::Info, tracks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sagittarius::media::v1::GetInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sagittarius::media::v1::GetInfoRequest, media_hash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sagittarius::media::v1::UpdateInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sagittarius::media::v1::UpdateInfoRequest, media_hash_),
  PROTOBUF_FIELD_OFFSET(::sagittarius::media::v1::UpdateInfoRequest, info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sagittarius::media::v1::ThumbnailTimeRangesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sagittarius::media::v1::ThumbnailTimeRangesRequest, media_hash_),
  PROTOBUF_FIELD_OFFSET(::sagittarius::media::v1::ThumbnailTimeRangesRequest, media_length_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sagittarius::media::v1::TimeRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sagittarius::media::v1::TimeRange, begin_),
  PROTOBUF_FIELD_OFFSET(::sagittarius::media::v1::TimeRange, end_),
  PROTOBUF_FIELD_OFFSET(::sagittarius::media::v1::TimeRange, interval_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sagittarius::media::v1::ThumbnailTimeRangesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sagittarius::media::v1::ThumbnailTimeRangesResponse, error_),
  PROTOBUF_FIELD_OFFSET(::sagittarius::media::v1::ThumbnailTimeRangesResponse, media_hash_),
  PROTOBUF_FIELD_OFFSET(::sagittarius::media::v1::ThumbnailTimeRangesResponse, availables_),
  PROTOBUF_FIELD_OFFSET(::sagittarius::media::v1::ThumbnailTimeRangesResponse, missings_),
  PROTOBUF_FIELD_OFFSET(::sagittarius::media::v1::ThumbnailTimeRangesResponse, token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sagittarius::media::v1::ThumbnailRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::sagittarius::media::v1::ThumbnailRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sagittarius::media::v1::ThumbnailRequest, media_hash_),
  offsetof(::sagittarius::media::v1::ThumbnailRequestDefaultTypeInternal, range_),
  offsetof(::sagittarius::media::v1::ThumbnailRequestDefaultTypeInternal, timestamp_),
  PROTOBUF_FIELD_OFFSET(::sagittarius::media::v1::ThumbnailRequest, token_),
  PROTOBUF_FIELD_OFFSET(::sagittarius::media::v1::ThumbnailRequest, time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sagittarius::media::v1::Thumbnail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sagittarius::media::v1::Thumbnail, timestamp_),
  PROTOBUF_FIELD_OFFSET(::sagittarius::media::v1::Thumbnail, ext_),
  PROTOBUF_FIELD_OFFSET(::sagittarius::media::v1::Thumbnail, payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sagittarius::media::v1::ThumbnailResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sagittarius::media::v1::ThumbnailResponse, error_),
  PROTOBUF_FIELD_OFFSET(::sagittarius::media::v1::ThumbnailResponse, thumbnails_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sagittarius::media::v1::UpdateThumbnailRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sagittarius::media::v1::UpdateThumbnailRequest, media_hash_),
  PROTOBUF_FIELD_OFFSET(::sagittarius::media::v1::UpdateThumbnailRequest, thumbnails_),
  PROTOBUF_FIELD_OFFSET(::sagittarius::media::v1::UpdateThumbnailRequest, token_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::sagittarius::media::v1::Info_TrackInfo)},
  { 6, -1, sizeof(::sagittarius::media::v1::Info)},
  { 13, -1, sizeof(::sagittarius::media::v1::GetInfoRequest)},
  { 19, -1, sizeof(::sagittarius::media::v1::UpdateInfoRequest)},
  { 26, -1, sizeof(::sagittarius::media::v1::ThumbnailTimeRangesRequest)},
  { 33, -1, sizeof(::sagittarius::media::v1::TimeRange)},
  { 41, -1, sizeof(::sagittarius::media::v1::ThumbnailTimeRangesResponse)},
  { 51, -1, sizeof(::sagittarius::media::v1::ThumbnailRequest)},
  { 61, -1, sizeof(::sagittarius::media::v1::Thumbnail)},
  { 69, -1, sizeof(::sagittarius::media::v1::ThumbnailResponse)},
  { 76, -1, sizeof(::sagittarius::media::v1::UpdateThumbnailRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sagittarius::media::v1::_Info_TrackInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sagittarius::media::v1::_Info_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sagittarius::media::v1::_GetInfoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sagittarius::media::v1::_UpdateInfoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sagittarius::media::v1::_ThumbnailTimeRangesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sagittarius::media::v1::_TimeRange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sagittarius::media::v1::_ThumbnailTimeRangesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sagittarius::media::v1::_ThumbnailRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sagittarius::media::v1::_Thumbnail_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sagittarius::media::v1::_ThumbnailResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sagittarius::media::v1::_UpdateThumbnailRequest_default_instance_),
};

const char descriptor_table_protodef_media_2fv1_2fmedia_2eproto[] =
  "\n\024media/v1/media.proto\022\024sagittarius.medi"
  "a.v1\032\034google/api/annotations.proto\032\027goog"
  "le/rpc/status.proto\"\312\001\n\004Info\022\022\n\nmedia_ha"
  "sh\030\001 \001(\t\0224\n\006tracks\030\002 \003(\0132$.sagittarius.m"
  "edia.v1.Info.TrackInfo\032x\n\tTrackInfo\0228\n\005t"
  "ypes\030\001 \001(\0162).sagittarius.media.v1.Info.T"
  "rackInfo.Type\"1\n\004Type\022\t\n\005VIDEO\020\000\022\t\n\005AUDI"
  "O\020\001\022\010\n\004TEXT\020\002\022\t\n\005OTHER\020\003\"$\n\016GetInfoReque"
  "st\022\022\n\nmedia_hash\030\001 \001(\t\"Q\n\021UpdateInfoRequ"
  "est\022\022\n\nmedia_hash\030\001 \001(\t\022(\n\004info\030\002 \001(\0132\032."
  "sagittarius.media.v1.Info\"F\n\032ThumbnailTi"
  "meRangesRequest\022\022\n\nmedia_hash\030\001 \001(\t\022\024\n\014m"
  "edia_length\030\002 \001(\001\"9\n\tTimeRange\022\r\n\005begin\030"
  "\001 \001(\001\022\013\n\003end\030\002 \001(\001\022\020\n\010interval\030\003 \001(\001\"\313\001\n"
  "\033ThumbnailTimeRangesResponse\022!\n\005error\030\001 "
  "\001(\0132\022.google.rpc.Status\022\022\n\nmedia_hash\030\002 "
  "\001(\t\0223\n\navailables\030\003 \003(\0132\037.sagittarius.me"
  "dia.v1.TimeRange\0221\n\010missings\030\004 \003(\0132\037.sag"
  "ittarius.media.v1.TimeRange\022\r\n\005token\030\005 \001"
  "(\t\"\204\001\n\020ThumbnailRequest\022\022\n\nmedia_hash\030\001 "
  "\001(\t\0220\n\005range\030\002 \001(\0132\037.sagittarius.media.v"
  "1.TimeRangeH\000\022\023\n\ttimestamp\030\003 \001(\001H\000\022\r\n\005to"
  "ken\030\004 \001(\tB\006\n\004time\"<\n\tThumbnail\022\021\n\ttimest"
  "amp\030\001 \001(\001\022\013\n\003ext\030\002 \001(\t\022\017\n\007payload\030\003 \001(\014\""
  "k\n\021ThumbnailResponse\022!\n\005error\030\001 \001(\0132\022.go"
  "ogle.rpc.Status\0223\n\nthumbnails\030\002 \003(\0132\037.sa"
  "gittarius.media.v1.Thumbnail\"p\n\026UpdateTh"
  "umbnailRequest\022\022\n\nmedia_hash\030\001 \001(\t\0223\n\nth"
  "umbnails\030\002 \003(\0132\037.sagittarius.media.v1.Th"
  "umbnail\022\r\n\005token\030\003 \001(\t2\312\005\n\005Media\022p\n\007GetI"
  "nfo\022$.sagittarius.media.v1.GetInfoReques"
  "t\032\032.sagittarius.media.v1.Info\"#\202\323\344\223\002\035\022\033/"
  "v1/media/{media_hash}/info\022\200\001\n\nUpdateInf"
  "o\022\'.sagittarius.media.v1.UpdateInfoReque"
  "st\032\032.sagittarius.media.v1.Info\"-\202\323\344\223\002\'\"\""
  "/v1/media/{media_hash}/info/update:\001*\022\262\001"
  "\n\026GetThumbnailTimeRanges\0220.sagittarius.m"
  "edia.v1.ThumbnailTimeRangesRequest\0321.sag"
  "ittarius.media.v1.ThumbnailTimeRangesRes"
  "ponse\"3\202\323\344\223\002-\022+/v1/media/{media_hash}/th"
  "umbnail/timeranges\022\214\001\n\014GetThumbnail\022&.sa"
  "gittarius.media.v1.ThumbnailRequest\032\'.sa"
  "gittarius.media.v1.ThumbnailResponse\"+\202\323"
  "\344\223\002%\" /v1/media/{media_hash}/thumbnail:\001"
  "*\022\207\001\n\017UpdateThumbnail\022,.sagittarius.medi"
  "a.v1.UpdateThumbnailRequest\032\022.google.rpc"
  ".Status\"2\202\323\344\223\002,\"\'/v1/media/{media_hash}/"
  "thumbnail/update:\001*B1\n\027ai.sagittarius.me"
  "dia.v1B\nMediaProtoP\001Z\005media\370\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_media_2fv1_2fmedia_2eproto_deps[2] = {
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
  &::descriptor_table_google_2frpc_2fstatus_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_media_2fv1_2fmedia_2eproto_sccs[11] = {
  &scc_info_GetInfoRequest_media_2fv1_2fmedia_2eproto.base,
  &scc_info_Info_media_2fv1_2fmedia_2eproto.base,
  &scc_info_Info_TrackInfo_media_2fv1_2fmedia_2eproto.base,
  &scc_info_Thumbnail_media_2fv1_2fmedia_2eproto.base,
  &scc_info_ThumbnailRequest_media_2fv1_2fmedia_2eproto.base,
  &scc_info_ThumbnailResponse_media_2fv1_2fmedia_2eproto.base,
  &scc_info_ThumbnailTimeRangesRequest_media_2fv1_2fmedia_2eproto.base,
  &scc_info_ThumbnailTimeRangesResponse_media_2fv1_2fmedia_2eproto.base,
  &scc_info_TimeRange_media_2fv1_2fmedia_2eproto.base,
  &scc_info_UpdateInfoRequest_media_2fv1_2fmedia_2eproto.base,
  &scc_info_UpdateThumbnailRequest_media_2fv1_2fmedia_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_media_2fv1_2fmedia_2eproto_once;
static bool descriptor_table_media_2fv1_2fmedia_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_media_2fv1_2fmedia_2eproto = {
  &descriptor_table_media_2fv1_2fmedia_2eproto_initialized, descriptor_table_protodef_media_2fv1_2fmedia_2eproto, "media/v1/media.proto", 1958,
  &descriptor_table_media_2fv1_2fmedia_2eproto_once, descriptor_table_media_2fv1_2fmedia_2eproto_sccs, descriptor_table_media_2fv1_2fmedia_2eproto_deps, 11, 2,
  schemas, file_default_instances, TableStruct_media_2fv1_2fmedia_2eproto::offsets,
  file_level_metadata_media_2fv1_2fmedia_2eproto, 11, file_level_enum_descriptors_media_2fv1_2fmedia_2eproto, file_level_service_descriptors_media_2fv1_2fmedia_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_media_2fv1_2fmedia_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_media_2fv1_2fmedia_2eproto), true);
namespace sagittarius {
namespace media {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Info_TrackInfo_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_media_2fv1_2fmedia_2eproto);
  return file_level_enum_descriptors_media_2fv1_2fmedia_2eproto[0];
}
bool Info_TrackInfo_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Info_TrackInfo_Type Info_TrackInfo::VIDEO;
constexpr Info_TrackInfo_Type Info_TrackInfo::AUDIO;
constexpr Info_TrackInfo_Type Info_TrackInfo::TEXT;
constexpr Info_TrackInfo_Type Info_TrackInfo::OTHER;
constexpr Info_TrackInfo_Type Info_TrackInfo::Type_MIN;
constexpr Info_TrackInfo_Type Info_TrackInfo::Type_MAX;
constexpr int Info_TrackInfo::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void Info_TrackInfo::InitAsDefaultInstance() {
}
class Info_TrackInfo::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Info_TrackInfo::kTypesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Info_TrackInfo::Info_TrackInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sagittarius.media.v1.Info.TrackInfo)
}
Info_TrackInfo::Info_TrackInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sagittarius.media.v1.Info.TrackInfo)
}
Info_TrackInfo::Info_TrackInfo(const Info_TrackInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  types_ = from.types_;
  // @@protoc_insertion_point(copy_constructor:sagittarius.media.v1.Info.TrackInfo)
}

void Info_TrackInfo::SharedCtor() {
  types_ = 0;
}

Info_TrackInfo::~Info_TrackInfo() {
  // @@protoc_insertion_point(destructor:sagittarius.media.v1.Info.TrackInfo)
  SharedDtor();
}

void Info_TrackInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void Info_TrackInfo::ArenaDtor(void* object) {
  Info_TrackInfo* _this = reinterpret_cast< Info_TrackInfo* >(object);
  (void)_this;
}
void Info_TrackInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Info_TrackInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Info_TrackInfo& Info_TrackInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Info_TrackInfo_media_2fv1_2fmedia_2eproto.base);
  return *internal_default_instance();
}


void Info_TrackInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:sagittarius.media.v1.Info.TrackInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  types_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Info_TrackInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .sagittarius.media.v1.Info.TrackInfo.Type types = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_types(static_cast<::sagittarius::media::v1::Info_TrackInfo_Type>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Info_TrackInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sagittarius.media.v1.Info.TrackInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sagittarius.media.v1.Info.TrackInfo.Type types = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_types(static_cast< ::sagittarius::media::v1::Info_TrackInfo_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sagittarius.media.v1.Info.TrackInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sagittarius.media.v1.Info.TrackInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Info_TrackInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sagittarius.media.v1.Info.TrackInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sagittarius.media.v1.Info.TrackInfo.Type types = 1;
  if (this->types() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->types(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sagittarius.media.v1.Info.TrackInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* Info_TrackInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sagittarius.media.v1.Info.TrackInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sagittarius.media.v1.Info.TrackInfo.Type types = 1;
  if (this->types() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->types(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sagittarius.media.v1.Info.TrackInfo)
  return target;
}

size_t Info_TrackInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sagittarius.media.v1.Info.TrackInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sagittarius.media.v1.Info.TrackInfo.Type types = 1;
  if (this->types() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->types());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Info_TrackInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sagittarius.media.v1.Info.TrackInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const Info_TrackInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Info_TrackInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sagittarius.media.v1.Info.TrackInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sagittarius.media.v1.Info.TrackInfo)
    MergeFrom(*source);
  }
}

void Info_TrackInfo::MergeFrom(const Info_TrackInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sagittarius.media.v1.Info.TrackInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.types() != 0) {
    set_types(from.types());
  }
}

void Info_TrackInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sagittarius.media.v1.Info.TrackInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Info_TrackInfo::CopyFrom(const Info_TrackInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sagittarius.media.v1.Info.TrackInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Info_TrackInfo::IsInitialized() const {
  return true;
}

void Info_TrackInfo::Swap(Info_TrackInfo* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Info_TrackInfo* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void Info_TrackInfo::UnsafeArenaSwap(Info_TrackInfo* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Info_TrackInfo::InternalSwap(Info_TrackInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(types_, other->types_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Info_TrackInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Info::InitAsDefaultInstance() {
}
class Info::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Info::kMediaHashFieldNumber;
const int Info::kTracksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Info::Info()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sagittarius.media.v1.Info)
}
Info::Info(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  tracks_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sagittarius.media.v1.Info)
}
Info::Info(const Info& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      tracks_(from.tracks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  media_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.media_hash().size() > 0) {
    media_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.media_hash(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:sagittarius.media.v1.Info)
}

void Info::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Info_media_2fv1_2fmedia_2eproto.base);
  media_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Info::~Info() {
  // @@protoc_insertion_point(destructor:sagittarius.media.v1.Info)
  SharedDtor();
}

void Info::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  media_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Info::ArenaDtor(void* object) {
  Info* _this = reinterpret_cast< Info* >(object);
  (void)_this;
}
void Info::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Info::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Info& Info::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Info_media_2fv1_2fmedia_2eproto.base);
  return *internal_default_instance();
}


void Info::Clear() {
// @@protoc_insertion_point(message_clear_start:sagittarius.media.v1.Info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tracks_.Clear();
  media_hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Info::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string media_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_media_hash(), ptr, ctx, "sagittarius.media.v1.Info.media_hash");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .sagittarius.media.v1.Info.TrackInfo tracks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_tracks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Info::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sagittarius.media.v1.Info)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string media_hash = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_media_hash()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->media_hash().data(), static_cast<int>(this->media_hash().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "sagittarius.media.v1.Info.media_hash"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sagittarius.media.v1.Info.TrackInfo tracks = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_tracks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sagittarius.media.v1.Info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sagittarius.media.v1.Info)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Info::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sagittarius.media.v1.Info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string media_hash = 1;
  if (this->media_hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->media_hash().data(), static_cast<int>(this->media_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sagittarius.media.v1.Info.media_hash");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->media_hash(), output);
  }

  // repeated .sagittarius.media.v1.Info.TrackInfo tracks = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tracks_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->tracks(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sagittarius.media.v1.Info)
}

::PROTOBUF_NAMESPACE_ID::uint8* Info::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sagittarius.media.v1.Info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string media_hash = 1;
  if (this->media_hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->media_hash().data(), static_cast<int>(this->media_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sagittarius.media.v1.Info.media_hash");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->media_hash(), target);
  }

  // repeated .sagittarius.media.v1.Info.TrackInfo tracks = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tracks_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->tracks(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sagittarius.media.v1.Info)
  return target;
}

size_t Info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sagittarius.media.v1.Info)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sagittarius.media.v1.Info.TrackInfo tracks = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->tracks_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->tracks(static_cast<int>(i)));
    }
  }

  // string media_hash = 1;
  if (this->media_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->media_hash());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Info::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sagittarius.media.v1.Info)
  GOOGLE_DCHECK_NE(&from, this);
  const Info* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Info>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sagittarius.media.v1.Info)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sagittarius.media.v1.Info)
    MergeFrom(*source);
  }
}

void Info::MergeFrom(const Info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sagittarius.media.v1.Info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tracks_.MergeFrom(from.tracks_);
  if (from.media_hash().size() > 0) {
    set_media_hash(from.media_hash());
  }
}

void Info::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sagittarius.media.v1.Info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Info::CopyFrom(const Info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sagittarius.media.v1.Info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Info::IsInitialized() const {
  return true;
}

void Info::Swap(Info* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Info* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void Info::UnsafeArenaSwap(Info* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Info::InternalSwap(Info* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&tracks_)->InternalSwap(CastToBase(&other->tracks_));
  media_hash_.Swap(&other->media_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Info::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetInfoRequest::InitAsDefaultInstance() {
}
class GetInfoRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetInfoRequest::kMediaHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetInfoRequest::GetInfoRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sagittarius.media.v1.GetInfoRequest)
}
GetInfoRequest::GetInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sagittarius.media.v1.GetInfoRequest)
}
GetInfoRequest::GetInfoRequest(const GetInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  media_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.media_hash().size() > 0) {
    media_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.media_hash(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:sagittarius.media.v1.GetInfoRequest)
}

void GetInfoRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetInfoRequest_media_2fv1_2fmedia_2eproto.base);
  media_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetInfoRequest::~GetInfoRequest() {
  // @@protoc_insertion_point(destructor:sagittarius.media.v1.GetInfoRequest)
  SharedDtor();
}

void GetInfoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  media_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetInfoRequest::ArenaDtor(void* object) {
  GetInfoRequest* _this = reinterpret_cast< GetInfoRequest* >(object);
  (void)_this;
}
void GetInfoRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetInfoRequest& GetInfoRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetInfoRequest_media_2fv1_2fmedia_2eproto.base);
  return *internal_default_instance();
}


void GetInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sagittarius.media.v1.GetInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  media_hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GetInfoRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string media_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_media_hash(), ptr, ctx, "sagittarius.media.v1.GetInfoRequest.media_hash");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GetInfoRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sagittarius.media.v1.GetInfoRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string media_hash = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_media_hash()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->media_hash().data(), static_cast<int>(this->media_hash().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "sagittarius.media.v1.GetInfoRequest.media_hash"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sagittarius.media.v1.GetInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sagittarius.media.v1.GetInfoRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GetInfoRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sagittarius.media.v1.GetInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string media_hash = 1;
  if (this->media_hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->media_hash().data(), static_cast<int>(this->media_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sagittarius.media.v1.GetInfoRequest.media_hash");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->media_hash(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sagittarius.media.v1.GetInfoRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* GetInfoRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sagittarius.media.v1.GetInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string media_hash = 1;
  if (this->media_hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->media_hash().data(), static_cast<int>(this->media_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sagittarius.media.v1.GetInfoRequest.media_hash");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->media_hash(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sagittarius.media.v1.GetInfoRequest)
  return target;
}

size_t GetInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sagittarius.media.v1.GetInfoRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string media_hash = 1;
  if (this->media_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->media_hash());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetInfoRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sagittarius.media.v1.GetInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetInfoRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetInfoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sagittarius.media.v1.GetInfoRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sagittarius.media.v1.GetInfoRequest)
    MergeFrom(*source);
  }
}

void GetInfoRequest::MergeFrom(const GetInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sagittarius.media.v1.GetInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.media_hash().size() > 0) {
    set_media_hash(from.media_hash());
  }
}

void GetInfoRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sagittarius.media.v1.GetInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetInfoRequest::CopyFrom(const GetInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sagittarius.media.v1.GetInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInfoRequest::IsInitialized() const {
  return true;
}

void GetInfoRequest::Swap(GetInfoRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GetInfoRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void GetInfoRequest::UnsafeArenaSwap(GetInfoRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GetInfoRequest::InternalSwap(GetInfoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  media_hash_.Swap(&other->media_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetInfoRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateInfoRequest::InitAsDefaultInstance() {
  ::sagittarius::media::v1::_UpdateInfoRequest_default_instance_._instance.get_mutable()->info_ = const_cast< ::sagittarius::media::v1::Info*>(
      ::sagittarius::media::v1::Info::internal_default_instance());
}
class UpdateInfoRequest::HasBitSetters {
 public:
  static const ::sagittarius::media::v1::Info& info(const UpdateInfoRequest* msg);
};

const ::sagittarius::media::v1::Info&
UpdateInfoRequest::HasBitSetters::info(const UpdateInfoRequest* msg) {
  return *msg->info_;
}
void UpdateInfoRequest::unsafe_arena_set_allocated_info(
    ::sagittarius::media::v1::Info* info) {
  if (GetArenaNoVirtual() == nullptr) {
    delete info_;
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sagittarius.media.v1.UpdateInfoRequest.info)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateInfoRequest::kMediaHashFieldNumber;
const int UpdateInfoRequest::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateInfoRequest::UpdateInfoRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sagittarius.media.v1.UpdateInfoRequest)
}
UpdateInfoRequest::UpdateInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sagittarius.media.v1.UpdateInfoRequest)
}
UpdateInfoRequest::UpdateInfoRequest(const UpdateInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  media_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.media_hash().size() > 0) {
    media_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.media_hash(),
      GetArenaNoVirtual());
  }
  if (from.has_info()) {
    info_ = new ::sagittarius::media::v1::Info(*from.info_);
  } else {
    info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:sagittarius.media.v1.UpdateInfoRequest)
}

void UpdateInfoRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateInfoRequest_media_2fv1_2fmedia_2eproto.base);
  media_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  info_ = nullptr;
}

UpdateInfoRequest::~UpdateInfoRequest() {
  // @@protoc_insertion_point(destructor:sagittarius.media.v1.UpdateInfoRequest)
  SharedDtor();
}

void UpdateInfoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  media_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete info_;
}

void UpdateInfoRequest::ArenaDtor(void* object) {
  UpdateInfoRequest* _this = reinterpret_cast< UpdateInfoRequest* >(object);
  (void)_this;
}
void UpdateInfoRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateInfoRequest& UpdateInfoRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateInfoRequest_media_2fv1_2fmedia_2eproto.base);
  return *internal_default_instance();
}


void UpdateInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sagittarius.media.v1.UpdateInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  media_hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UpdateInfoRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string media_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_media_hash(), ptr, ctx, "sagittarius.media.v1.UpdateInfoRequest.media_hash");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sagittarius.media.v1.Info info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UpdateInfoRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sagittarius.media.v1.UpdateInfoRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string media_hash = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_media_hash()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->media_hash().data(), static_cast<int>(this->media_hash().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "sagittarius.media.v1.UpdateInfoRequest.media_hash"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sagittarius.media.v1.Info info = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sagittarius.media.v1.UpdateInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sagittarius.media.v1.UpdateInfoRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UpdateInfoRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sagittarius.media.v1.UpdateInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string media_hash = 1;
  if (this->media_hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->media_hash().data(), static_cast<int>(this->media_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sagittarius.media.v1.UpdateInfoRequest.media_hash");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->media_hash(), output);
  }

  // .sagittarius.media.v1.Info info = 2;
  if (this->has_info()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::info(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sagittarius.media.v1.UpdateInfoRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateInfoRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sagittarius.media.v1.UpdateInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string media_hash = 1;
  if (this->media_hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->media_hash().data(), static_cast<int>(this->media_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sagittarius.media.v1.UpdateInfoRequest.media_hash");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->media_hash(), target);
  }

  // .sagittarius.media.v1.Info info = 2;
  if (this->has_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::info(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sagittarius.media.v1.UpdateInfoRequest)
  return target;
}

size_t UpdateInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sagittarius.media.v1.UpdateInfoRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string media_hash = 1;
  if (this->media_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->media_hash());
  }

  // .sagittarius.media.v1.Info info = 2;
  if (this->has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *info_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateInfoRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sagittarius.media.v1.UpdateInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateInfoRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateInfoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sagittarius.media.v1.UpdateInfoRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sagittarius.media.v1.UpdateInfoRequest)
    MergeFrom(*source);
  }
}

void UpdateInfoRequest::MergeFrom(const UpdateInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sagittarius.media.v1.UpdateInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.media_hash().size() > 0) {
    set_media_hash(from.media_hash());
  }
  if (from.has_info()) {
    mutable_info()->::sagittarius::media::v1::Info::MergeFrom(from.info());
  }
}

void UpdateInfoRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sagittarius.media.v1.UpdateInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateInfoRequest::CopyFrom(const UpdateInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sagittarius.media.v1.UpdateInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateInfoRequest::IsInitialized() const {
  return true;
}

void UpdateInfoRequest::Swap(UpdateInfoRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UpdateInfoRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void UpdateInfoRequest::UnsafeArenaSwap(UpdateInfoRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UpdateInfoRequest::InternalSwap(UpdateInfoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  media_hash_.Swap(&other->media_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(info_, other->info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateInfoRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ThumbnailTimeRangesRequest::InitAsDefaultInstance() {
}
class ThumbnailTimeRangesRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ThumbnailTimeRangesRequest::kMediaHashFieldNumber;
const int ThumbnailTimeRangesRequest::kMediaLengthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ThumbnailTimeRangesRequest::ThumbnailTimeRangesRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sagittarius.media.v1.ThumbnailTimeRangesRequest)
}
ThumbnailTimeRangesRequest::ThumbnailTimeRangesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sagittarius.media.v1.ThumbnailTimeRangesRequest)
}
ThumbnailTimeRangesRequest::ThumbnailTimeRangesRequest(const ThumbnailTimeRangesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  media_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.media_hash().size() > 0) {
    media_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.media_hash(),
      GetArenaNoVirtual());
  }
  media_length_ = from.media_length_;
  // @@protoc_insertion_point(copy_constructor:sagittarius.media.v1.ThumbnailTimeRangesRequest)
}

void ThumbnailTimeRangesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ThumbnailTimeRangesRequest_media_2fv1_2fmedia_2eproto.base);
  media_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  media_length_ = 0;
}

ThumbnailTimeRangesRequest::~ThumbnailTimeRangesRequest() {
  // @@protoc_insertion_point(destructor:sagittarius.media.v1.ThumbnailTimeRangesRequest)
  SharedDtor();
}

void ThumbnailTimeRangesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  media_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ThumbnailTimeRangesRequest::ArenaDtor(void* object) {
  ThumbnailTimeRangesRequest* _this = reinterpret_cast< ThumbnailTimeRangesRequest* >(object);
  (void)_this;
}
void ThumbnailTimeRangesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ThumbnailTimeRangesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ThumbnailTimeRangesRequest& ThumbnailTimeRangesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ThumbnailTimeRangesRequest_media_2fv1_2fmedia_2eproto.base);
  return *internal_default_instance();
}


void ThumbnailTimeRangesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sagittarius.media.v1.ThumbnailTimeRangesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  media_hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  media_length_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ThumbnailTimeRangesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string media_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_media_hash(), ptr, ctx, "sagittarius.media.v1.ThumbnailTimeRangesRequest.media_hash");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double media_length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          media_length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ThumbnailTimeRangesRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sagittarius.media.v1.ThumbnailTimeRangesRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string media_hash = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_media_hash()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->media_hash().data(), static_cast<int>(this->media_hash().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "sagittarius.media.v1.ThumbnailTimeRangesRequest.media_hash"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double media_length = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &media_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sagittarius.media.v1.ThumbnailTimeRangesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sagittarius.media.v1.ThumbnailTimeRangesRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ThumbnailTimeRangesRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sagittarius.media.v1.ThumbnailTimeRangesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string media_hash = 1;
  if (this->media_hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->media_hash().data(), static_cast<int>(this->media_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sagittarius.media.v1.ThumbnailTimeRangesRequest.media_hash");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->media_hash(), output);
  }

  // double media_length = 2;
  if (!(this->media_length() <= 0 && this->media_length() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->media_length(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sagittarius.media.v1.ThumbnailTimeRangesRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* ThumbnailTimeRangesRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sagittarius.media.v1.ThumbnailTimeRangesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string media_hash = 1;
  if (this->media_hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->media_hash().data(), static_cast<int>(this->media_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sagittarius.media.v1.ThumbnailTimeRangesRequest.media_hash");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->media_hash(), target);
  }

  // double media_length = 2;
  if (!(this->media_length() <= 0 && this->media_length() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->media_length(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sagittarius.media.v1.ThumbnailTimeRangesRequest)
  return target;
}

size_t ThumbnailTimeRangesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sagittarius.media.v1.ThumbnailTimeRangesRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string media_hash = 1;
  if (this->media_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->media_hash());
  }

  // double media_length = 2;
  if (!(this->media_length() <= 0 && this->media_length() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ThumbnailTimeRangesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sagittarius.media.v1.ThumbnailTimeRangesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ThumbnailTimeRangesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ThumbnailTimeRangesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sagittarius.media.v1.ThumbnailTimeRangesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sagittarius.media.v1.ThumbnailTimeRangesRequest)
    MergeFrom(*source);
  }
}

void ThumbnailTimeRangesRequest::MergeFrom(const ThumbnailTimeRangesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sagittarius.media.v1.ThumbnailTimeRangesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.media_hash().size() > 0) {
    set_media_hash(from.media_hash());
  }
  if (!(from.media_length() <= 0 && from.media_length() >= 0)) {
    set_media_length(from.media_length());
  }
}

void ThumbnailTimeRangesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sagittarius.media.v1.ThumbnailTimeRangesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThumbnailTimeRangesRequest::CopyFrom(const ThumbnailTimeRangesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sagittarius.media.v1.ThumbnailTimeRangesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThumbnailTimeRangesRequest::IsInitialized() const {
  return true;
}

void ThumbnailTimeRangesRequest::Swap(ThumbnailTimeRangesRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ThumbnailTimeRangesRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void ThumbnailTimeRangesRequest::UnsafeArenaSwap(ThumbnailTimeRangesRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ThumbnailTimeRangesRequest::InternalSwap(ThumbnailTimeRangesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  media_hash_.Swap(&other->media_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(media_length_, other->media_length_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ThumbnailTimeRangesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TimeRange::InitAsDefaultInstance() {
}
class TimeRange::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TimeRange::kBeginFieldNumber;
const int TimeRange::kEndFieldNumber;
const int TimeRange::kIntervalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TimeRange::TimeRange()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sagittarius.media.v1.TimeRange)
}
TimeRange::TimeRange(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sagittarius.media.v1.TimeRange)
}
TimeRange::TimeRange(const TimeRange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&begin_, &from.begin_,
    static_cast<size_t>(reinterpret_cast<char*>(&interval_) -
    reinterpret_cast<char*>(&begin_)) + sizeof(interval_));
  // @@protoc_insertion_point(copy_constructor:sagittarius.media.v1.TimeRange)
}

void TimeRange::SharedCtor() {
  ::memset(&begin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&interval_) -
      reinterpret_cast<char*>(&begin_)) + sizeof(interval_));
}

TimeRange::~TimeRange() {
  // @@protoc_insertion_point(destructor:sagittarius.media.v1.TimeRange)
  SharedDtor();
}

void TimeRange::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void TimeRange::ArenaDtor(void* object) {
  TimeRange* _this = reinterpret_cast< TimeRange* >(object);
  (void)_this;
}
void TimeRange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TimeRange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TimeRange& TimeRange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TimeRange_media_2fv1_2fmedia_2eproto.base);
  return *internal_default_instance();
}


void TimeRange::Clear() {
// @@protoc_insertion_point(message_clear_start:sagittarius.media.v1.TimeRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&begin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&interval_) -
      reinterpret_cast<char*>(&begin_)) + sizeof(interval_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TimeRange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double begin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          begin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          end_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double interval = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          interval_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TimeRange::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sagittarius.media.v1.TimeRange)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double begin = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &begin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double end = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double interval = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sagittarius.media.v1.TimeRange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sagittarius.media.v1.TimeRange)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TimeRange::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sagittarius.media.v1.TimeRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double begin = 1;
  if (!(this->begin() <= 0 && this->begin() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->begin(), output);
  }

  // double end = 2;
  if (!(this->end() <= 0 && this->end() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->end(), output);
  }

  // double interval = 3;
  if (!(this->interval() <= 0 && this->interval() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->interval(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sagittarius.media.v1.TimeRange)
}

::PROTOBUF_NAMESPACE_ID::uint8* TimeRange::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sagittarius.media.v1.TimeRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double begin = 1;
  if (!(this->begin() <= 0 && this->begin() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->begin(), target);
  }

  // double end = 2;
  if (!(this->end() <= 0 && this->end() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->end(), target);
  }

  // double interval = 3;
  if (!(this->interval() <= 0 && this->interval() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->interval(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sagittarius.media.v1.TimeRange)
  return target;
}

size_t TimeRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sagittarius.media.v1.TimeRange)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double begin = 1;
  if (!(this->begin() <= 0 && this->begin() >= 0)) {
    total_size += 1 + 8;
  }

  // double end = 2;
  if (!(this->end() <= 0 && this->end() >= 0)) {
    total_size += 1 + 8;
  }

  // double interval = 3;
  if (!(this->interval() <= 0 && this->interval() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimeRange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sagittarius.media.v1.TimeRange)
  GOOGLE_DCHECK_NE(&from, this);
  const TimeRange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TimeRange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sagittarius.media.v1.TimeRange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sagittarius.media.v1.TimeRange)
    MergeFrom(*source);
  }
}

void TimeRange::MergeFrom(const TimeRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sagittarius.media.v1.TimeRange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.begin() <= 0 && from.begin() >= 0)) {
    set_begin(from.begin());
  }
  if (!(from.end() <= 0 && from.end() >= 0)) {
    set_end(from.end());
  }
  if (!(from.interval() <= 0 && from.interval() >= 0)) {
    set_interval(from.interval());
  }
}

void TimeRange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sagittarius.media.v1.TimeRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeRange::CopyFrom(const TimeRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sagittarius.media.v1.TimeRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeRange::IsInitialized() const {
  return true;
}

void TimeRange::Swap(TimeRange* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    TimeRange* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void TimeRange::UnsafeArenaSwap(TimeRange* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void TimeRange::InternalSwap(TimeRange* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(begin_, other->begin_);
  swap(end_, other->end_);
  swap(interval_, other->interval_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TimeRange::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ThumbnailTimeRangesResponse::InitAsDefaultInstance() {
  ::sagittarius::media::v1::_ThumbnailTimeRangesResponse_default_instance_._instance.get_mutable()->error_ = const_cast< ::google::rpc::Status*>(
      ::google::rpc::Status::internal_default_instance());
}
class ThumbnailTimeRangesResponse::HasBitSetters {
 public:
  static const ::google::rpc::Status& error(const ThumbnailTimeRangesResponse* msg);
};

const ::google::rpc::Status&
ThumbnailTimeRangesResponse::HasBitSetters::error(const ThumbnailTimeRangesResponse* msg) {
  return *msg->error_;
}
void ThumbnailTimeRangesResponse::unsafe_arena_set_allocated_error(
    ::google::rpc::Status* error) {
  if (GetArenaNoVirtual() == nullptr) {
    delete error_;
  }
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sagittarius.media.v1.ThumbnailTimeRangesResponse.error)
}
void ThumbnailTimeRangesResponse::clear_error() {
  if (GetArenaNoVirtual() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ThumbnailTimeRangesResponse::kErrorFieldNumber;
const int ThumbnailTimeRangesResponse::kMediaHashFieldNumber;
const int ThumbnailTimeRangesResponse::kAvailablesFieldNumber;
const int ThumbnailTimeRangesResponse::kMissingsFieldNumber;
const int ThumbnailTimeRangesResponse::kTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ThumbnailTimeRangesResponse::ThumbnailTimeRangesResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sagittarius.media.v1.ThumbnailTimeRangesResponse)
}
ThumbnailTimeRangesResponse::ThumbnailTimeRangesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  availables_(arena),
  missings_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sagittarius.media.v1.ThumbnailTimeRangesResponse)
}
ThumbnailTimeRangesResponse::ThumbnailTimeRangesResponse(const ThumbnailTimeRangesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      availables_(from.availables_),
      missings_(from.missings_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  media_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.media_hash().size() > 0) {
    media_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.media_hash(),
      GetArenaNoVirtual());
  }
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.token().size() > 0) {
    token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token(),
      GetArenaNoVirtual());
  }
  if (from.has_error()) {
    error_ = new ::google::rpc::Status(*from.error_);
  } else {
    error_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:sagittarius.media.v1.ThumbnailTimeRangesResponse)
}

void ThumbnailTimeRangesResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ThumbnailTimeRangesResponse_media_2fv1_2fmedia_2eproto.base);
  media_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_ = nullptr;
}

ThumbnailTimeRangesResponse::~ThumbnailTimeRangesResponse() {
  // @@protoc_insertion_point(destructor:sagittarius.media.v1.ThumbnailTimeRangesResponse)
  SharedDtor();
}

void ThumbnailTimeRangesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  media_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete error_;
}

void ThumbnailTimeRangesResponse::ArenaDtor(void* object) {
  ThumbnailTimeRangesResponse* _this = reinterpret_cast< ThumbnailTimeRangesResponse* >(object);
  (void)_this;
}
void ThumbnailTimeRangesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ThumbnailTimeRangesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ThumbnailTimeRangesResponse& ThumbnailTimeRangesResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ThumbnailTimeRangesResponse_media_2fv1_2fmedia_2eproto.base);
  return *internal_default_instance();
}


void ThumbnailTimeRangesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sagittarius.media.v1.ThumbnailTimeRangesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  availables_.Clear();
  missings_.Clear();
  media_hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ThumbnailTimeRangesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.rpc.Status error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_error(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string media_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_media_hash(), ptr, ctx, "sagittarius.media.v1.ThumbnailTimeRangesResponse.media_hash");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .sagittarius.media.v1.TimeRange availables = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_availables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // repeated .sagittarius.media.v1.TimeRange missings = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_missings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // string token = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_token(), ptr, ctx, "sagittarius.media.v1.ThumbnailTimeRangesResponse.token");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ThumbnailTimeRangesResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sagittarius.media.v1.ThumbnailTimeRangesResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.rpc.Status error = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string media_hash = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_media_hash()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->media_hash().data(), static_cast<int>(this->media_hash().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "sagittarius.media.v1.ThumbnailTimeRangesResponse.media_hash"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sagittarius.media.v1.TimeRange availables = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_availables()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sagittarius.media.v1.TimeRange missings = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_missings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string token = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), static_cast<int>(this->token().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "sagittarius.media.v1.ThumbnailTimeRangesResponse.token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sagittarius.media.v1.ThumbnailTimeRangesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sagittarius.media.v1.ThumbnailTimeRangesResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ThumbnailTimeRangesResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sagittarius.media.v1.ThumbnailTimeRangesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.rpc.Status error = 1;
  if (this->has_error()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::error(this), output);
  }

  // string media_hash = 2;
  if (this->media_hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->media_hash().data(), static_cast<int>(this->media_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sagittarius.media.v1.ThumbnailTimeRangesResponse.media_hash");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->media_hash(), output);
  }

  // repeated .sagittarius.media.v1.TimeRange availables = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->availables_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->availables(static_cast<int>(i)),
      output);
  }

  // repeated .sagittarius.media.v1.TimeRange missings = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->missings_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->missings(static_cast<int>(i)),
      output);
  }

  // string token = 5;
  if (this->token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sagittarius.media.v1.ThumbnailTimeRangesResponse.token");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sagittarius.media.v1.ThumbnailTimeRangesResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* ThumbnailTimeRangesResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sagittarius.media.v1.ThumbnailTimeRangesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.rpc.Status error = 1;
  if (this->has_error()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::error(this), target);
  }

  // string media_hash = 2;
  if (this->media_hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->media_hash().data(), static_cast<int>(this->media_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sagittarius.media.v1.ThumbnailTimeRangesResponse.media_hash");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->media_hash(), target);
  }

  // repeated .sagittarius.media.v1.TimeRange availables = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->availables_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->availables(static_cast<int>(i)), target);
  }

  // repeated .sagittarius.media.v1.TimeRange missings = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->missings_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->missings(static_cast<int>(i)), target);
  }

  // string token = 5;
  if (this->token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sagittarius.media.v1.ThumbnailTimeRangesResponse.token");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sagittarius.media.v1.ThumbnailTimeRangesResponse)
  return target;
}

size_t ThumbnailTimeRangesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sagittarius.media.v1.ThumbnailTimeRangesResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sagittarius.media.v1.TimeRange availables = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->availables_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->availables(static_cast<int>(i)));
    }
  }

  // repeated .sagittarius.media.v1.TimeRange missings = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->missings_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->missings(static_cast<int>(i)));
    }
  }

  // string media_hash = 2;
  if (this->media_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->media_hash());
  }

  // string token = 5;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->token());
  }

  // .google.rpc.Status error = 1;
  if (this->has_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *error_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ThumbnailTimeRangesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sagittarius.media.v1.ThumbnailTimeRangesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ThumbnailTimeRangesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ThumbnailTimeRangesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sagittarius.media.v1.ThumbnailTimeRangesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sagittarius.media.v1.ThumbnailTimeRangesResponse)
    MergeFrom(*source);
  }
}

void ThumbnailTimeRangesResponse::MergeFrom(const ThumbnailTimeRangesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sagittarius.media.v1.ThumbnailTimeRangesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  availables_.MergeFrom(from.availables_);
  missings_.MergeFrom(from.missings_);
  if (from.media_hash().size() > 0) {
    set_media_hash(from.media_hash());
  }
  if (from.token().size() > 0) {
    set_token(from.token());
  }
  if (from.has_error()) {
    mutable_error()->::google::rpc::Status::MergeFrom(from.error());
  }
}

void ThumbnailTimeRangesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sagittarius.media.v1.ThumbnailTimeRangesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThumbnailTimeRangesResponse::CopyFrom(const ThumbnailTimeRangesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sagittarius.media.v1.ThumbnailTimeRangesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThumbnailTimeRangesResponse::IsInitialized() const {
  return true;
}

void ThumbnailTimeRangesResponse::Swap(ThumbnailTimeRangesResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ThumbnailTimeRangesResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void ThumbnailTimeRangesResponse::UnsafeArenaSwap(ThumbnailTimeRangesResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ThumbnailTimeRangesResponse::InternalSwap(ThumbnailTimeRangesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&availables_)->InternalSwap(CastToBase(&other->availables_));
  CastToBase(&missings_)->InternalSwap(CastToBase(&other->missings_));
  media_hash_.Swap(&other->media_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(error_, other->error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ThumbnailTimeRangesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ThumbnailRequest::InitAsDefaultInstance() {
  ::sagittarius::media::v1::_ThumbnailRequest_default_instance_.range_ = const_cast< ::sagittarius::media::v1::TimeRange*>(
      ::sagittarius::media::v1::TimeRange::internal_default_instance());
  ::sagittarius::media::v1::_ThumbnailRequest_default_instance_.timestamp_ = 0;
}
class ThumbnailRequest::HasBitSetters {
 public:
  static const ::sagittarius::media::v1::TimeRange& range(const ThumbnailRequest* msg);
};

const ::sagittarius::media::v1::TimeRange&
ThumbnailRequest::HasBitSetters::range(const ThumbnailRequest* msg) {
  return *msg->time_.range_;
}
void ThumbnailRequest::set_allocated_range(::sagittarius::media::v1::TimeRange* range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_time();
  if (range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(range);
    if (message_arena != submessage_arena) {
      range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, range, submessage_arena);
    }
    set_has_range();
    time_.range_ = range;
  }
  // @@protoc_insertion_point(field_set_allocated:sagittarius.media.v1.ThumbnailRequest.range)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ThumbnailRequest::kMediaHashFieldNumber;
const int ThumbnailRequest::kRangeFieldNumber;
const int ThumbnailRequest::kTimestampFieldNumber;
const int ThumbnailRequest::kTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ThumbnailRequest::ThumbnailRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sagittarius.media.v1.ThumbnailRequest)
}
ThumbnailRequest::ThumbnailRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sagittarius.media.v1.ThumbnailRequest)
}
ThumbnailRequest::ThumbnailRequest(const ThumbnailRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  media_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.media_hash().size() > 0) {
    media_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.media_hash(),
      GetArenaNoVirtual());
  }
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.token().size() > 0) {
    token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token(),
      GetArenaNoVirtual());
  }
  clear_has_time();
  switch (from.time_case()) {
    case kRange: {
      mutable_range()->::sagittarius::media::v1::TimeRange::MergeFrom(from.range());
      break;
    }
    case kTimestamp: {
      set_timestamp(from.timestamp());
      break;
    }
    case TIME_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:sagittarius.media.v1.ThumbnailRequest)
}

void ThumbnailRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ThumbnailRequest_media_2fv1_2fmedia_2eproto.base);
  media_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_has_time();
}

ThumbnailRequest::~ThumbnailRequest() {
  // @@protoc_insertion_point(destructor:sagittarius.media.v1.ThumbnailRequest)
  SharedDtor();
}

void ThumbnailRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  media_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_time()) {
    clear_time();
  }
}

void ThumbnailRequest::ArenaDtor(void* object) {
  ThumbnailRequest* _this = reinterpret_cast< ThumbnailRequest* >(object);
  (void)_this;
}
void ThumbnailRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ThumbnailRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ThumbnailRequest& ThumbnailRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ThumbnailRequest_media_2fv1_2fmedia_2eproto.base);
  return *internal_default_instance();
}


void ThumbnailRequest::clear_time() {
// @@protoc_insertion_point(one_of_clear_start:sagittarius.media.v1.ThumbnailRequest)
  switch (time_case()) {
    case kRange: {
      if (GetArenaNoVirtual() == nullptr) {
        delete time_.range_;
      }
      break;
    }
    case kTimestamp: {
      // No need to clear
      break;
    }
    case TIME_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TIME_NOT_SET;
}


void ThumbnailRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sagittarius.media.v1.ThumbnailRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  media_hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_time();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ThumbnailRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string media_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_media_hash(), ptr, ctx, "sagittarius.media.v1.ThumbnailRequest.media_hash");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sagittarius.media.v1.TimeRange range = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_range(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          set_timestamp(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string token = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_token(), ptr, ctx, "sagittarius.media.v1.ThumbnailRequest.token");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ThumbnailRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sagittarius.media.v1.ThumbnailRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string media_hash = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_media_hash()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->media_hash().data(), static_cast<int>(this->media_hash().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "sagittarius.media.v1.ThumbnailRequest.media_hash"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sagittarius.media.v1.TimeRange range = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double timestamp = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {
          clear_time();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_.timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string token = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), static_cast<int>(this->token().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "sagittarius.media.v1.ThumbnailRequest.token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sagittarius.media.v1.ThumbnailRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sagittarius.media.v1.ThumbnailRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ThumbnailRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sagittarius.media.v1.ThumbnailRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string media_hash = 1;
  if (this->media_hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->media_hash().data(), static_cast<int>(this->media_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sagittarius.media.v1.ThumbnailRequest.media_hash");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->media_hash(), output);
  }

  // .sagittarius.media.v1.TimeRange range = 2;
  if (has_range()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::range(this), output);
  }

  // double timestamp = 3;
  if (has_timestamp()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->timestamp(), output);
  }

  // string token = 4;
  if (this->token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sagittarius.media.v1.ThumbnailRequest.token");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sagittarius.media.v1.ThumbnailRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* ThumbnailRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sagittarius.media.v1.ThumbnailRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string media_hash = 1;
  if (this->media_hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->media_hash().data(), static_cast<int>(this->media_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sagittarius.media.v1.ThumbnailRequest.media_hash");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->media_hash(), target);
  }

  // .sagittarius.media.v1.TimeRange range = 2;
  if (has_range()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::range(this), target);
  }

  // double timestamp = 3;
  if (has_timestamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->timestamp(), target);
  }

  // string token = 4;
  if (this->token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sagittarius.media.v1.ThumbnailRequest.token");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sagittarius.media.v1.ThumbnailRequest)
  return target;
}

size_t ThumbnailRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sagittarius.media.v1.ThumbnailRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string media_hash = 1;
  if (this->media_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->media_hash());
  }

  // string token = 4;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->token());
  }

  switch (time_case()) {
    // .sagittarius.media.v1.TimeRange range = 2;
    case kRange: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *time_.range_);
      break;
    }
    // double timestamp = 3;
    case kTimestamp: {
      total_size += 1 + 8;
      break;
    }
    case TIME_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ThumbnailRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sagittarius.media.v1.ThumbnailRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ThumbnailRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ThumbnailRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sagittarius.media.v1.ThumbnailRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sagittarius.media.v1.ThumbnailRequest)
    MergeFrom(*source);
  }
}

void ThumbnailRequest::MergeFrom(const ThumbnailRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sagittarius.media.v1.ThumbnailRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.media_hash().size() > 0) {
    set_media_hash(from.media_hash());
  }
  if (from.token().size() > 0) {
    set_token(from.token());
  }
  switch (from.time_case()) {
    case kRange: {
      mutable_range()->::sagittarius::media::v1::TimeRange::MergeFrom(from.range());
      break;
    }
    case kTimestamp: {
      set_timestamp(from.timestamp());
      break;
    }
    case TIME_NOT_SET: {
      break;
    }
  }
}

void ThumbnailRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sagittarius.media.v1.ThumbnailRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThumbnailRequest::CopyFrom(const ThumbnailRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sagittarius.media.v1.ThumbnailRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThumbnailRequest::IsInitialized() const {
  return true;
}

void ThumbnailRequest::Swap(ThumbnailRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ThumbnailRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void ThumbnailRequest::UnsafeArenaSwap(ThumbnailRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ThumbnailRequest::InternalSwap(ThumbnailRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  media_hash_.Swap(&other->media_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(time_, other->time_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ThumbnailRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Thumbnail::InitAsDefaultInstance() {
}
class Thumbnail::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Thumbnail::kTimestampFieldNumber;
const int Thumbnail::kExtFieldNumber;
const int Thumbnail::kPayloadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Thumbnail::Thumbnail()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sagittarius.media.v1.Thumbnail)
}
Thumbnail::Thumbnail(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sagittarius.media.v1.Thumbnail)
}
Thumbnail::Thumbnail(const Thumbnail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ext_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.ext().size() > 0) {
    ext_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ext(),
      GetArenaNoVirtual());
  }
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.payload().size() > 0) {
    payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payload(),
      GetArenaNoVirtual());
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:sagittarius.media.v1.Thumbnail)
}

void Thumbnail::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Thumbnail_media_2fv1_2fmedia_2eproto.base);
  ext_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timestamp_ = 0;
}

Thumbnail::~Thumbnail() {
  // @@protoc_insertion_point(destructor:sagittarius.media.v1.Thumbnail)
  SharedDtor();
}

void Thumbnail::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  ext_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payload_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Thumbnail::ArenaDtor(void* object) {
  Thumbnail* _this = reinterpret_cast< Thumbnail* >(object);
  (void)_this;
}
void Thumbnail::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Thumbnail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Thumbnail& Thumbnail::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Thumbnail_media_2fv1_2fmedia_2eproto.base);
  return *internal_default_instance();
}


void Thumbnail::Clear() {
// @@protoc_insertion_point(message_clear_start:sagittarius.media.v1.Thumbnail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ext_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  payload_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  timestamp_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Thumbnail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string ext = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_ext(), ptr, ctx, "sagittarius.media.v1.Thumbnail.ext");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes payload = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_payload(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Thumbnail::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sagittarius.media.v1.Thumbnail)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double timestamp = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ext = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_ext()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->ext().data(), static_cast<int>(this->ext().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "sagittarius.media.v1.Thumbnail.ext"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes payload = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sagittarius.media.v1.Thumbnail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sagittarius.media.v1.Thumbnail)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Thumbnail::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sagittarius.media.v1.Thumbnail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double timestamp = 1;
  if (!(this->timestamp() <= 0 && this->timestamp() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->timestamp(), output);
  }

  // string ext = 2;
  if (this->ext().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->ext().data(), static_cast<int>(this->ext().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sagittarius.media.v1.Thumbnail.ext");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ext(), output);
  }

  // bytes payload = 3;
  if (this->payload().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->payload(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sagittarius.media.v1.Thumbnail)
}

::PROTOBUF_NAMESPACE_ID::uint8* Thumbnail::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sagittarius.media.v1.Thumbnail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double timestamp = 1;
  if (!(this->timestamp() <= 0 && this->timestamp() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->timestamp(), target);
  }

  // string ext = 2;
  if (this->ext().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->ext().data(), static_cast<int>(this->ext().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sagittarius.media.v1.Thumbnail.ext");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->ext(), target);
  }

  // bytes payload = 3;
  if (this->payload().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        3, this->payload(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sagittarius.media.v1.Thumbnail)
  return target;
}

size_t Thumbnail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sagittarius.media.v1.Thumbnail)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ext = 2;
  if (this->ext().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->ext());
  }

  // bytes payload = 3;
  if (this->payload().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->payload());
  }

  // double timestamp = 1;
  if (!(this->timestamp() <= 0 && this->timestamp() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Thumbnail::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sagittarius.media.v1.Thumbnail)
  GOOGLE_DCHECK_NE(&from, this);
  const Thumbnail* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Thumbnail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sagittarius.media.v1.Thumbnail)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sagittarius.media.v1.Thumbnail)
    MergeFrom(*source);
  }
}

void Thumbnail::MergeFrom(const Thumbnail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sagittarius.media.v1.Thumbnail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ext().size() > 0) {
    set_ext(from.ext());
  }
  if (from.payload().size() > 0) {
    set_payload(from.payload());
  }
  if (!(from.timestamp() <= 0 && from.timestamp() >= 0)) {
    set_timestamp(from.timestamp());
  }
}

void Thumbnail::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sagittarius.media.v1.Thumbnail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Thumbnail::CopyFrom(const Thumbnail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sagittarius.media.v1.Thumbnail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Thumbnail::IsInitialized() const {
  return true;
}

void Thumbnail::Swap(Thumbnail* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Thumbnail* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void Thumbnail::UnsafeArenaSwap(Thumbnail* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Thumbnail::InternalSwap(Thumbnail* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ext_.Swap(&other->ext_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  payload_.Swap(&other->payload_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Thumbnail::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ThumbnailResponse::InitAsDefaultInstance() {
  ::sagittarius::media::v1::_ThumbnailResponse_default_instance_._instance.get_mutable()->error_ = const_cast< ::google::rpc::Status*>(
      ::google::rpc::Status::internal_default_instance());
}
class ThumbnailResponse::HasBitSetters {
 public:
  static const ::google::rpc::Status& error(const ThumbnailResponse* msg);
};

const ::google::rpc::Status&
ThumbnailResponse::HasBitSetters::error(const ThumbnailResponse* msg) {
  return *msg->error_;
}
void ThumbnailResponse::unsafe_arena_set_allocated_error(
    ::google::rpc::Status* error) {
  if (GetArenaNoVirtual() == nullptr) {
    delete error_;
  }
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sagittarius.media.v1.ThumbnailResponse.error)
}
void ThumbnailResponse::clear_error() {
  if (GetArenaNoVirtual() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ThumbnailResponse::kErrorFieldNumber;
const int ThumbnailResponse::kThumbnailsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ThumbnailResponse::ThumbnailResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sagittarius.media.v1.ThumbnailResponse)
}
ThumbnailResponse::ThumbnailResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  thumbnails_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sagittarius.media.v1.ThumbnailResponse)
}
ThumbnailResponse::ThumbnailResponse(const ThumbnailResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      thumbnails_(from.thumbnails_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_error()) {
    error_ = new ::google::rpc::Status(*from.error_);
  } else {
    error_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:sagittarius.media.v1.ThumbnailResponse)
}

void ThumbnailResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ThumbnailResponse_media_2fv1_2fmedia_2eproto.base);
  error_ = nullptr;
}

ThumbnailResponse::~ThumbnailResponse() {
  // @@protoc_insertion_point(destructor:sagittarius.media.v1.ThumbnailResponse)
  SharedDtor();
}

void ThumbnailResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete error_;
}

void ThumbnailResponse::ArenaDtor(void* object) {
  ThumbnailResponse* _this = reinterpret_cast< ThumbnailResponse* >(object);
  (void)_this;
}
void ThumbnailResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ThumbnailResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ThumbnailResponse& ThumbnailResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ThumbnailResponse_media_2fv1_2fmedia_2eproto.base);
  return *internal_default_instance();
}


void ThumbnailResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:sagittarius.media.v1.ThumbnailResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  thumbnails_.Clear();
  if (GetArenaNoVirtual() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ThumbnailResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.rpc.Status error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_error(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .sagittarius.media.v1.Thumbnail thumbnails = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_thumbnails(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ThumbnailResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sagittarius.media.v1.ThumbnailResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.rpc.Status error = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sagittarius.media.v1.Thumbnail thumbnails = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_thumbnails()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sagittarius.media.v1.ThumbnailResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sagittarius.media.v1.ThumbnailResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ThumbnailResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sagittarius.media.v1.ThumbnailResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.rpc.Status error = 1;
  if (this->has_error()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::error(this), output);
  }

  // repeated .sagittarius.media.v1.Thumbnail thumbnails = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->thumbnails_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->thumbnails(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sagittarius.media.v1.ThumbnailResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* ThumbnailResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sagittarius.media.v1.ThumbnailResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.rpc.Status error = 1;
  if (this->has_error()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::error(this), target);
  }

  // repeated .sagittarius.media.v1.Thumbnail thumbnails = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->thumbnails_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->thumbnails(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sagittarius.media.v1.ThumbnailResponse)
  return target;
}

size_t ThumbnailResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sagittarius.media.v1.ThumbnailResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sagittarius.media.v1.Thumbnail thumbnails = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->thumbnails_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->thumbnails(static_cast<int>(i)));
    }
  }

  // .google.rpc.Status error = 1;
  if (this->has_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *error_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ThumbnailResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sagittarius.media.v1.ThumbnailResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ThumbnailResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ThumbnailResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sagittarius.media.v1.ThumbnailResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sagittarius.media.v1.ThumbnailResponse)
    MergeFrom(*source);
  }
}

void ThumbnailResponse::MergeFrom(const ThumbnailResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sagittarius.media.v1.ThumbnailResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  thumbnails_.MergeFrom(from.thumbnails_);
  if (from.has_error()) {
    mutable_error()->::google::rpc::Status::MergeFrom(from.error());
  }
}

void ThumbnailResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sagittarius.media.v1.ThumbnailResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThumbnailResponse::CopyFrom(const ThumbnailResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sagittarius.media.v1.ThumbnailResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThumbnailResponse::IsInitialized() const {
  return true;
}

void ThumbnailResponse::Swap(ThumbnailResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ThumbnailResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void ThumbnailResponse::UnsafeArenaSwap(ThumbnailResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ThumbnailResponse::InternalSwap(ThumbnailResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&thumbnails_)->InternalSwap(CastToBase(&other->thumbnails_));
  swap(error_, other->error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ThumbnailResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateThumbnailRequest::InitAsDefaultInstance() {
}
class UpdateThumbnailRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateThumbnailRequest::kMediaHashFieldNumber;
const int UpdateThumbnailRequest::kThumbnailsFieldNumber;
const int UpdateThumbnailRequest::kTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateThumbnailRequest::UpdateThumbnailRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sagittarius.media.v1.UpdateThumbnailRequest)
}
UpdateThumbnailRequest::UpdateThumbnailRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  thumbnails_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sagittarius.media.v1.UpdateThumbnailRequest)
}
UpdateThumbnailRequest::UpdateThumbnailRequest(const UpdateThumbnailRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      thumbnails_(from.thumbnails_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  media_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.media_hash().size() > 0) {
    media_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.media_hash(),
      GetArenaNoVirtual());
  }
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.token().size() > 0) {
    token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.token(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:sagittarius.media.v1.UpdateThumbnailRequest)
}

void UpdateThumbnailRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateThumbnailRequest_media_2fv1_2fmedia_2eproto.base);
  media_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

UpdateThumbnailRequest::~UpdateThumbnailRequest() {
  // @@protoc_insertion_point(destructor:sagittarius.media.v1.UpdateThumbnailRequest)
  SharedDtor();
}

void UpdateThumbnailRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  media_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UpdateThumbnailRequest::ArenaDtor(void* object) {
  UpdateThumbnailRequest* _this = reinterpret_cast< UpdateThumbnailRequest* >(object);
  (void)_this;
}
void UpdateThumbnailRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateThumbnailRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateThumbnailRequest& UpdateThumbnailRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateThumbnailRequest_media_2fv1_2fmedia_2eproto.base);
  return *internal_default_instance();
}


void UpdateThumbnailRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sagittarius.media.v1.UpdateThumbnailRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  thumbnails_.Clear();
  media_hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UpdateThumbnailRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string media_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_media_hash(), ptr, ctx, "sagittarius.media.v1.UpdateThumbnailRequest.media_hash");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .sagittarius.media.v1.Thumbnail thumbnails = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_thumbnails(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // string token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_token(), ptr, ctx, "sagittarius.media.v1.UpdateThumbnailRequest.token");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UpdateThumbnailRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sagittarius.media.v1.UpdateThumbnailRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string media_hash = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_media_hash()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->media_hash().data(), static_cast<int>(this->media_hash().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "sagittarius.media.v1.UpdateThumbnailRequest.media_hash"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sagittarius.media.v1.Thumbnail thumbnails = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_thumbnails()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string token = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), static_cast<int>(this->token().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "sagittarius.media.v1.UpdateThumbnailRequest.token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sagittarius.media.v1.UpdateThumbnailRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sagittarius.media.v1.UpdateThumbnailRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UpdateThumbnailRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sagittarius.media.v1.UpdateThumbnailRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string media_hash = 1;
  if (this->media_hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->media_hash().data(), static_cast<int>(this->media_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sagittarius.media.v1.UpdateThumbnailRequest.media_hash");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->media_hash(), output);
  }

  // repeated .sagittarius.media.v1.Thumbnail thumbnails = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->thumbnails_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->thumbnails(static_cast<int>(i)),
      output);
  }

  // string token = 3;
  if (this->token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sagittarius.media.v1.UpdateThumbnailRequest.token");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sagittarius.media.v1.UpdateThumbnailRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateThumbnailRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sagittarius.media.v1.UpdateThumbnailRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string media_hash = 1;
  if (this->media_hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->media_hash().data(), static_cast<int>(this->media_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sagittarius.media.v1.UpdateThumbnailRequest.media_hash");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->media_hash(), target);
  }

  // repeated .sagittarius.media.v1.Thumbnail thumbnails = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->thumbnails_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->thumbnails(static_cast<int>(i)), target);
  }

  // string token = 3;
  if (this->token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), static_cast<int>(this->token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sagittarius.media.v1.UpdateThumbnailRequest.token");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sagittarius.media.v1.UpdateThumbnailRequest)
  return target;
}

size_t UpdateThumbnailRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sagittarius.media.v1.UpdateThumbnailRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sagittarius.media.v1.Thumbnail thumbnails = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->thumbnails_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->thumbnails(static_cast<int>(i)));
    }
  }

  // string media_hash = 1;
  if (this->media_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->media_hash());
  }

  // string token = 3;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->token());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateThumbnailRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sagittarius.media.v1.UpdateThumbnailRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateThumbnailRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateThumbnailRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sagittarius.media.v1.UpdateThumbnailRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sagittarius.media.v1.UpdateThumbnailRequest)
    MergeFrom(*source);
  }
}

void UpdateThumbnailRequest::MergeFrom(const UpdateThumbnailRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sagittarius.media.v1.UpdateThumbnailRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  thumbnails_.MergeFrom(from.thumbnails_);
  if (from.media_hash().size() > 0) {
    set_media_hash(from.media_hash());
  }
  if (from.token().size() > 0) {
    set_token(from.token());
  }
}

void UpdateThumbnailRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sagittarius.media.v1.UpdateThumbnailRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateThumbnailRequest::CopyFrom(const UpdateThumbnailRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sagittarius.media.v1.UpdateThumbnailRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateThumbnailRequest::IsInitialized() const {
  return true;
}

void UpdateThumbnailRequest::Swap(UpdateThumbnailRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UpdateThumbnailRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == nullptr) {
      delete temp;
    }
  }
}
void UpdateThumbnailRequest::UnsafeArenaSwap(UpdateThumbnailRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UpdateThumbnailRequest::InternalSwap(UpdateThumbnailRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&thumbnails_)->InternalSwap(CastToBase(&other->thumbnails_));
  media_hash_.Swap(&other->media_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateThumbnailRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace media
}  // namespace sagittarius
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sagittarius::media::v1::Info_TrackInfo* Arena::CreateMaybeMessage< ::sagittarius::media::v1::Info_TrackInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sagittarius::media::v1::Info_TrackInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::sagittarius::media::v1::Info* Arena::CreateMaybeMessage< ::sagittarius::media::v1::Info >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sagittarius::media::v1::Info >(arena);
}
template<> PROTOBUF_NOINLINE ::sagittarius::media::v1::GetInfoRequest* Arena::CreateMaybeMessage< ::sagittarius::media::v1::GetInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sagittarius::media::v1::GetInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sagittarius::media::v1::UpdateInfoRequest* Arena::CreateMaybeMessage< ::sagittarius::media::v1::UpdateInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sagittarius::media::v1::UpdateInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sagittarius::media::v1::ThumbnailTimeRangesRequest* Arena::CreateMaybeMessage< ::sagittarius::media::v1::ThumbnailTimeRangesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sagittarius::media::v1::ThumbnailTimeRangesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sagittarius::media::v1::TimeRange* Arena::CreateMaybeMessage< ::sagittarius::media::v1::TimeRange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sagittarius::media::v1::TimeRange >(arena);
}
template<> PROTOBUF_NOINLINE ::sagittarius::media::v1::ThumbnailTimeRangesResponse* Arena::CreateMaybeMessage< ::sagittarius::media::v1::ThumbnailTimeRangesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sagittarius::media::v1::ThumbnailTimeRangesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sagittarius::media::v1::ThumbnailRequest* Arena::CreateMaybeMessage< ::sagittarius::media::v1::ThumbnailRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sagittarius::media::v1::ThumbnailRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sagittarius::media::v1::Thumbnail* Arena::CreateMaybeMessage< ::sagittarius::media::v1::Thumbnail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sagittarius::media::v1::Thumbnail >(arena);
}
template<> PROTOBUF_NOINLINE ::sagittarius::media::v1::ThumbnailResponse* Arena::CreateMaybeMessage< ::sagittarius::media::v1::ThumbnailResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sagittarius::media::v1::ThumbnailResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::sagittarius::media::v1::UpdateThumbnailRequest* Arena::CreateMaybeMessage< ::sagittarius::media::v1::UpdateThumbnailRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sagittarius::media::v1::UpdateThumbnailRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
