// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: media/v1/media.proto

#include "media/v1/media.pb.h"
#include "media/v1/media.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace sagittarius {
namespace media {
namespace v1 {

static const char* Media_method_names[] = {
  "/sagittarius.media.v1.Media/GetInfo",
  "/sagittarius.media.v1.Media/UpdateInfo",
  "/sagittarius.media.v1.Media/GetThumbnailTimeRanges",
  "/sagittarius.media.v1.Media/GetThumbnail",
  "/sagittarius.media.v1.Media/UpdateThumbnail",
};

std::unique_ptr< Media::Stub> Media::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Media::Stub> stub(new Media::Stub(channel));
  return stub;
}

Media::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetInfo_(Media_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateInfo_(Media_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetThumbnailTimeRanges_(Media_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetThumbnail_(Media_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateThumbnail_(Media_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Media::Stub::GetInfo(::grpc::ClientContext* context, const ::sagittarius::media::v1::GetInfoRequest& request, ::sagittarius::media::v1::Info* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetInfo_, context, request, response);
}

void Media::Stub::experimental_async::GetInfo(::grpc::ClientContext* context, const ::sagittarius::media::v1::GetInfoRequest* request, ::sagittarius::media::v1::Info* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetInfo_, context, request, response, std::move(f));
}

void Media::Stub::experimental_async::GetInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sagittarius::media::v1::Info* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetInfo_, context, request, response, std::move(f));
}

void Media::Stub::experimental_async::GetInfo(::grpc::ClientContext* context, const ::sagittarius::media::v1::GetInfoRequest* request, ::sagittarius::media::v1::Info* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetInfo_, context, request, response, reactor);
}

void Media::Stub::experimental_async::GetInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sagittarius::media::v1::Info* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sagittarius::media::v1::Info>* Media::Stub::AsyncGetInfoRaw(::grpc::ClientContext* context, const ::sagittarius::media::v1::GetInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::sagittarius::media::v1::Info>::Create(channel_.get(), cq, rpcmethod_GetInfo_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::sagittarius::media::v1::Info>* Media::Stub::PrepareAsyncGetInfoRaw(::grpc::ClientContext* context, const ::sagittarius::media::v1::GetInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::sagittarius::media::v1::Info>::Create(channel_.get(), cq, rpcmethod_GetInfo_, context, request, false);
}

::grpc::Status Media::Stub::UpdateInfo(::grpc::ClientContext* context, const ::sagittarius::media::v1::UpdateInfoRequest& request, ::sagittarius::media::v1::Info* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateInfo_, context, request, response);
}

void Media::Stub::experimental_async::UpdateInfo(::grpc::ClientContext* context, const ::sagittarius::media::v1::UpdateInfoRequest* request, ::sagittarius::media::v1::Info* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateInfo_, context, request, response, std::move(f));
}

void Media::Stub::experimental_async::UpdateInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sagittarius::media::v1::Info* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateInfo_, context, request, response, std::move(f));
}

void Media::Stub::experimental_async::UpdateInfo(::grpc::ClientContext* context, const ::sagittarius::media::v1::UpdateInfoRequest* request, ::sagittarius::media::v1::Info* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdateInfo_, context, request, response, reactor);
}

void Media::Stub::experimental_async::UpdateInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sagittarius::media::v1::Info* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdateInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sagittarius::media::v1::Info>* Media::Stub::AsyncUpdateInfoRaw(::grpc::ClientContext* context, const ::sagittarius::media::v1::UpdateInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::sagittarius::media::v1::Info>::Create(channel_.get(), cq, rpcmethod_UpdateInfo_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::sagittarius::media::v1::Info>* Media::Stub::PrepareAsyncUpdateInfoRaw(::grpc::ClientContext* context, const ::sagittarius::media::v1::UpdateInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::sagittarius::media::v1::Info>::Create(channel_.get(), cq, rpcmethod_UpdateInfo_, context, request, false);
}

::grpc::Status Media::Stub::GetThumbnailTimeRanges(::grpc::ClientContext* context, const ::sagittarius::media::v1::ThumbnailTimeRangesRequest& request, ::sagittarius::media::v1::ThumbnailTimeRangesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetThumbnailTimeRanges_, context, request, response);
}

void Media::Stub::experimental_async::GetThumbnailTimeRanges(::grpc::ClientContext* context, const ::sagittarius::media::v1::ThumbnailTimeRangesRequest* request, ::sagittarius::media::v1::ThumbnailTimeRangesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetThumbnailTimeRanges_, context, request, response, std::move(f));
}

void Media::Stub::experimental_async::GetThumbnailTimeRanges(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sagittarius::media::v1::ThumbnailTimeRangesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetThumbnailTimeRanges_, context, request, response, std::move(f));
}

void Media::Stub::experimental_async::GetThumbnailTimeRanges(::grpc::ClientContext* context, const ::sagittarius::media::v1::ThumbnailTimeRangesRequest* request, ::sagittarius::media::v1::ThumbnailTimeRangesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetThumbnailTimeRanges_, context, request, response, reactor);
}

void Media::Stub::experimental_async::GetThumbnailTimeRanges(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sagittarius::media::v1::ThumbnailTimeRangesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetThumbnailTimeRanges_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sagittarius::media::v1::ThumbnailTimeRangesResponse>* Media::Stub::AsyncGetThumbnailTimeRangesRaw(::grpc::ClientContext* context, const ::sagittarius::media::v1::ThumbnailTimeRangesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::sagittarius::media::v1::ThumbnailTimeRangesResponse>::Create(channel_.get(), cq, rpcmethod_GetThumbnailTimeRanges_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::sagittarius::media::v1::ThumbnailTimeRangesResponse>* Media::Stub::PrepareAsyncGetThumbnailTimeRangesRaw(::grpc::ClientContext* context, const ::sagittarius::media::v1::ThumbnailTimeRangesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::sagittarius::media::v1::ThumbnailTimeRangesResponse>::Create(channel_.get(), cq, rpcmethod_GetThumbnailTimeRanges_, context, request, false);
}

::grpc::Status Media::Stub::GetThumbnail(::grpc::ClientContext* context, const ::sagittarius::media::v1::ThumbnailRequest& request, ::sagittarius::media::v1::ThumbnailResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetThumbnail_, context, request, response);
}

void Media::Stub::experimental_async::GetThumbnail(::grpc::ClientContext* context, const ::sagittarius::media::v1::ThumbnailRequest* request, ::sagittarius::media::v1::ThumbnailResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetThumbnail_, context, request, response, std::move(f));
}

void Media::Stub::experimental_async::GetThumbnail(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sagittarius::media::v1::ThumbnailResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetThumbnail_, context, request, response, std::move(f));
}

void Media::Stub::experimental_async::GetThumbnail(::grpc::ClientContext* context, const ::sagittarius::media::v1::ThumbnailRequest* request, ::sagittarius::media::v1::ThumbnailResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetThumbnail_, context, request, response, reactor);
}

void Media::Stub::experimental_async::GetThumbnail(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sagittarius::media::v1::ThumbnailResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetThumbnail_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::sagittarius::media::v1::ThumbnailResponse>* Media::Stub::AsyncGetThumbnailRaw(::grpc::ClientContext* context, const ::sagittarius::media::v1::ThumbnailRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::sagittarius::media::v1::ThumbnailResponse>::Create(channel_.get(), cq, rpcmethod_GetThumbnail_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::sagittarius::media::v1::ThumbnailResponse>* Media::Stub::PrepareAsyncGetThumbnailRaw(::grpc::ClientContext* context, const ::sagittarius::media::v1::ThumbnailRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::sagittarius::media::v1::ThumbnailResponse>::Create(channel_.get(), cq, rpcmethod_GetThumbnail_, context, request, false);
}

::grpc::Status Media::Stub::UpdateThumbnail(::grpc::ClientContext* context, const ::sagittarius::media::v1::UpdateThumbnailRequest& request, ::google::rpc::Status* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateThumbnail_, context, request, response);
}

void Media::Stub::experimental_async::UpdateThumbnail(::grpc::ClientContext* context, const ::sagittarius::media::v1::UpdateThumbnailRequest* request, ::google::rpc::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateThumbnail_, context, request, response, std::move(f));
}

void Media::Stub::experimental_async::UpdateThumbnail(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::rpc::Status* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateThumbnail_, context, request, response, std::move(f));
}

void Media::Stub::experimental_async::UpdateThumbnail(::grpc::ClientContext* context, const ::sagittarius::media::v1::UpdateThumbnailRequest* request, ::google::rpc::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdateThumbnail_, context, request, response, reactor);
}

void Media::Stub::experimental_async::UpdateThumbnail(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::rpc::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdateThumbnail_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::rpc::Status>* Media::Stub::AsyncUpdateThumbnailRaw(::grpc::ClientContext* context, const ::sagittarius::media::v1::UpdateThumbnailRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::rpc::Status>::Create(channel_.get(), cq, rpcmethod_UpdateThumbnail_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::rpc::Status>* Media::Stub::PrepareAsyncUpdateThumbnailRaw(::grpc::ClientContext* context, const ::sagittarius::media::v1::UpdateThumbnailRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::rpc::Status>::Create(channel_.get(), cq, rpcmethod_UpdateThumbnail_, context, request, false);
}

Media::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Media_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Media::Service, ::sagittarius::media::v1::GetInfoRequest, ::sagittarius::media::v1::Info>(
          std::mem_fn(&Media::Service::GetInfo), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Media_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Media::Service, ::sagittarius::media::v1::UpdateInfoRequest, ::sagittarius::media::v1::Info>(
          std::mem_fn(&Media::Service::UpdateInfo), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Media_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Media::Service, ::sagittarius::media::v1::ThumbnailTimeRangesRequest, ::sagittarius::media::v1::ThumbnailTimeRangesResponse>(
          std::mem_fn(&Media::Service::GetThumbnailTimeRanges), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Media_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Media::Service, ::sagittarius::media::v1::ThumbnailRequest, ::sagittarius::media::v1::ThumbnailResponse>(
          std::mem_fn(&Media::Service::GetThumbnail), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Media_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Media::Service, ::sagittarius::media::v1::UpdateThumbnailRequest, ::google::rpc::Status>(
          std::mem_fn(&Media::Service::UpdateThumbnail), this)));
}

Media::Service::~Service() {
}

::grpc::Status Media::Service::GetInfo(::grpc::ServerContext* context, const ::sagittarius::media::v1::GetInfoRequest* request, ::sagittarius::media::v1::Info* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Media::Service::UpdateInfo(::grpc::ServerContext* context, const ::sagittarius::media::v1::UpdateInfoRequest* request, ::sagittarius::media::v1::Info* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Media::Service::GetThumbnailTimeRanges(::grpc::ServerContext* context, const ::sagittarius::media::v1::ThumbnailTimeRangesRequest* request, ::sagittarius::media::v1::ThumbnailTimeRangesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Media::Service::GetThumbnail(::grpc::ServerContext* context, const ::sagittarius::media::v1::ThumbnailRequest* request, ::sagittarius::media::v1::ThumbnailResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Media::Service::UpdateThumbnail(::grpc::ServerContext* context, const ::sagittarius::media::v1::UpdateThumbnailRequest* request, ::google::rpc::Status* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace sagittarius
}  // namespace media
}  // namespace v1

