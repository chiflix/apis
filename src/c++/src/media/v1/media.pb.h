// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: media/v1/media.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_media_2fv1_2fmedia_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_media_2fv1_2fmedia_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/rpc/status.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_media_2fv1_2fmedia_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_media_2fv1_2fmedia_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_media_2fv1_2fmedia_2eproto;
namespace sagittarius {
namespace media {
namespace v1 {
class GetInfoRequest;
class GetInfoRequestDefaultTypeInternal;
extern GetInfoRequestDefaultTypeInternal _GetInfoRequest_default_instance_;
class Info;
class InfoDefaultTypeInternal;
extern InfoDefaultTypeInternal _Info_default_instance_;
class Info_TrackInfo;
class Info_TrackInfoDefaultTypeInternal;
extern Info_TrackInfoDefaultTypeInternal _Info_TrackInfo_default_instance_;
class Thumbnail;
class ThumbnailDefaultTypeInternal;
extern ThumbnailDefaultTypeInternal _Thumbnail_default_instance_;
class ThumbnailRequest;
class ThumbnailRequestDefaultTypeInternal;
extern ThumbnailRequestDefaultTypeInternal _ThumbnailRequest_default_instance_;
class ThumbnailResponse;
class ThumbnailResponseDefaultTypeInternal;
extern ThumbnailResponseDefaultTypeInternal _ThumbnailResponse_default_instance_;
class ThumbnailTimeRangesRequest;
class ThumbnailTimeRangesRequestDefaultTypeInternal;
extern ThumbnailTimeRangesRequestDefaultTypeInternal _ThumbnailTimeRangesRequest_default_instance_;
class ThumbnailTimeRangesResponse;
class ThumbnailTimeRangesResponseDefaultTypeInternal;
extern ThumbnailTimeRangesResponseDefaultTypeInternal _ThumbnailTimeRangesResponse_default_instance_;
class TimeRange;
class TimeRangeDefaultTypeInternal;
extern TimeRangeDefaultTypeInternal _TimeRange_default_instance_;
class UpdateInfoRequest;
class UpdateInfoRequestDefaultTypeInternal;
extern UpdateInfoRequestDefaultTypeInternal _UpdateInfoRequest_default_instance_;
class UpdateThumbnailRequest;
class UpdateThumbnailRequestDefaultTypeInternal;
extern UpdateThumbnailRequestDefaultTypeInternal _UpdateThumbnailRequest_default_instance_;
}  // namespace v1
}  // namespace media
}  // namespace sagittarius
PROTOBUF_NAMESPACE_OPEN
template<> ::sagittarius::media::v1::GetInfoRequest* Arena::CreateMaybeMessage<::sagittarius::media::v1::GetInfoRequest>(Arena*);
template<> ::sagittarius::media::v1::Info* Arena::CreateMaybeMessage<::sagittarius::media::v1::Info>(Arena*);
template<> ::sagittarius::media::v1::Info_TrackInfo* Arena::CreateMaybeMessage<::sagittarius::media::v1::Info_TrackInfo>(Arena*);
template<> ::sagittarius::media::v1::Thumbnail* Arena::CreateMaybeMessage<::sagittarius::media::v1::Thumbnail>(Arena*);
template<> ::sagittarius::media::v1::ThumbnailRequest* Arena::CreateMaybeMessage<::sagittarius::media::v1::ThumbnailRequest>(Arena*);
template<> ::sagittarius::media::v1::ThumbnailResponse* Arena::CreateMaybeMessage<::sagittarius::media::v1::ThumbnailResponse>(Arena*);
template<> ::sagittarius::media::v1::ThumbnailTimeRangesRequest* Arena::CreateMaybeMessage<::sagittarius::media::v1::ThumbnailTimeRangesRequest>(Arena*);
template<> ::sagittarius::media::v1::ThumbnailTimeRangesResponse* Arena::CreateMaybeMessage<::sagittarius::media::v1::ThumbnailTimeRangesResponse>(Arena*);
template<> ::sagittarius::media::v1::TimeRange* Arena::CreateMaybeMessage<::sagittarius::media::v1::TimeRange>(Arena*);
template<> ::sagittarius::media::v1::UpdateInfoRequest* Arena::CreateMaybeMessage<::sagittarius::media::v1::UpdateInfoRequest>(Arena*);
template<> ::sagittarius::media::v1::UpdateThumbnailRequest* Arena::CreateMaybeMessage<::sagittarius::media::v1::UpdateThumbnailRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sagittarius {
namespace media {
namespace v1 {

enum Info_TrackInfo_Type : int {
  Info_TrackInfo_Type_VIDEO = 0,
  Info_TrackInfo_Type_AUDIO = 1,
  Info_TrackInfo_Type_TEXT = 2,
  Info_TrackInfo_Type_OTHER = 3,
  Info_TrackInfo_Type_Info_TrackInfo_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Info_TrackInfo_Type_Info_TrackInfo_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Info_TrackInfo_Type_IsValid(int value);
constexpr Info_TrackInfo_Type Info_TrackInfo_Type_Type_MIN = Info_TrackInfo_Type_VIDEO;
constexpr Info_TrackInfo_Type Info_TrackInfo_Type_Type_MAX = Info_TrackInfo_Type_OTHER;
constexpr int Info_TrackInfo_Type_Type_ARRAYSIZE = Info_TrackInfo_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Info_TrackInfo_Type_descriptor();
template<typename T>
inline const std::string& Info_TrackInfo_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Info_TrackInfo_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Info_TrackInfo_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Info_TrackInfo_Type_descriptor(), enum_t_value);
}
inline bool Info_TrackInfo_Type_Parse(
    const std::string& name, Info_TrackInfo_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Info_TrackInfo_Type>(
    Info_TrackInfo_Type_descriptor(), name, value);
}
// ===================================================================

class Info_TrackInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sagittarius.media.v1.Info.TrackInfo) */ {
 public:
  Info_TrackInfo();
  virtual ~Info_TrackInfo();

  Info_TrackInfo(const Info_TrackInfo& from);
  Info_TrackInfo(Info_TrackInfo&& from) noexcept
    : Info_TrackInfo() {
    *this = ::std::move(from);
  }

  inline Info_TrackInfo& operator=(const Info_TrackInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline Info_TrackInfo& operator=(Info_TrackInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Info_TrackInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Info_TrackInfo* internal_default_instance() {
    return reinterpret_cast<const Info_TrackInfo*>(
               &_Info_TrackInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void UnsafeArenaSwap(Info_TrackInfo* other);
  void Swap(Info_TrackInfo* other);
  friend void swap(Info_TrackInfo& a, Info_TrackInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Info_TrackInfo* New() const final {
    return CreateMaybeMessage<Info_TrackInfo>(nullptr);
  }

  Info_TrackInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Info_TrackInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Info_TrackInfo& from);
  void MergeFrom(const Info_TrackInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Info_TrackInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sagittarius.media.v1.Info.TrackInfo";
  }
  protected:
  explicit Info_TrackInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_media_2fv1_2fmedia_2eproto);
    return ::descriptor_table_media_2fv1_2fmedia_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Info_TrackInfo_Type Type;
  static constexpr Type VIDEO =
    Info_TrackInfo_Type_VIDEO;
  static constexpr Type AUDIO =
    Info_TrackInfo_Type_AUDIO;
  static constexpr Type TEXT =
    Info_TrackInfo_Type_TEXT;
  static constexpr Type OTHER =
    Info_TrackInfo_Type_OTHER;
  static inline bool Type_IsValid(int value) {
    return Info_TrackInfo_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Info_TrackInfo_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Info_TrackInfo_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Info_TrackInfo_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return Info_TrackInfo_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Info_TrackInfo_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return Info_TrackInfo_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .sagittarius.media.v1.Info.TrackInfo.Type types = 1;
  void clear_types();
  static const int kTypesFieldNumber = 1;
  ::sagittarius::media::v1::Info_TrackInfo_Type types() const;
  void set_types(::sagittarius::media::v1::Info_TrackInfo_Type value);

  // @@protoc_insertion_point(class_scope:sagittarius.media.v1.Info.TrackInfo)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int types_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_media_2fv1_2fmedia_2eproto;
};
// -------------------------------------------------------------------

class Info :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sagittarius.media.v1.Info) */ {
 public:
  Info();
  virtual ~Info();

  Info(const Info& from);
  Info(Info&& from) noexcept
    : Info() {
    *this = ::std::move(from);
  }

  inline Info& operator=(const Info& from) {
    CopyFrom(from);
    return *this;
  }
  inline Info& operator=(Info&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Info& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Info* internal_default_instance() {
    return reinterpret_cast<const Info*>(
               &_Info_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void UnsafeArenaSwap(Info* other);
  void Swap(Info* other);
  friend void swap(Info& a, Info& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Info* New() const final {
    return CreateMaybeMessage<Info>(nullptr);
  }

  Info* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Info>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Info& from);
  void MergeFrom(const Info& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Info* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sagittarius.media.v1.Info";
  }
  protected:
  explicit Info(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_media_2fv1_2fmedia_2eproto);
    return ::descriptor_table_media_2fv1_2fmedia_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Info_TrackInfo TrackInfo;

  // accessors -------------------------------------------------------

  // repeated .sagittarius.media.v1.Info.TrackInfo tracks = 2;
  int tracks_size() const;
  void clear_tracks();
  static const int kTracksFieldNumber = 2;
  ::sagittarius::media::v1::Info_TrackInfo* mutable_tracks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sagittarius::media::v1::Info_TrackInfo >*
      mutable_tracks();
  const ::sagittarius::media::v1::Info_TrackInfo& tracks(int index) const;
  ::sagittarius::media::v1::Info_TrackInfo* add_tracks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sagittarius::media::v1::Info_TrackInfo >&
      tracks() const;

  // string media_hash = 1;
  void clear_media_hash();
  static const int kMediaHashFieldNumber = 1;
  const std::string& media_hash() const;
  void set_media_hash(const std::string& value);
  void set_media_hash(std::string&& value);
  void set_media_hash(const char* value);
  void set_media_hash(const char* value, size_t size);
  std::string* mutable_media_hash();
  std::string* release_media_hash();
  void set_allocated_media_hash(std::string* media_hash);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_media_hash();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_media_hash(
      std::string* media_hash);

  // @@protoc_insertion_point(class_scope:sagittarius.media.v1.Info)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sagittarius::media::v1::Info_TrackInfo > tracks_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr media_hash_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_media_2fv1_2fmedia_2eproto;
};
// -------------------------------------------------------------------

class GetInfoRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sagittarius.media.v1.GetInfoRequest) */ {
 public:
  GetInfoRequest();
  virtual ~GetInfoRequest();

  GetInfoRequest(const GetInfoRequest& from);
  GetInfoRequest(GetInfoRequest&& from) noexcept
    : GetInfoRequest() {
    *this = ::std::move(from);
  }

  inline GetInfoRequest& operator=(const GetInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetInfoRequest& operator=(GetInfoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetInfoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetInfoRequest* internal_default_instance() {
    return reinterpret_cast<const GetInfoRequest*>(
               &_GetInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void UnsafeArenaSwap(GetInfoRequest* other);
  void Swap(GetInfoRequest* other);
  friend void swap(GetInfoRequest& a, GetInfoRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetInfoRequest* New() const final {
    return CreateMaybeMessage<GetInfoRequest>(nullptr);
  }

  GetInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetInfoRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetInfoRequest& from);
  void MergeFrom(const GetInfoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetInfoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sagittarius.media.v1.GetInfoRequest";
  }
  protected:
  explicit GetInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_media_2fv1_2fmedia_2eproto);
    return ::descriptor_table_media_2fv1_2fmedia_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string media_hash = 1;
  void clear_media_hash();
  static const int kMediaHashFieldNumber = 1;
  const std::string& media_hash() const;
  void set_media_hash(const std::string& value);
  void set_media_hash(std::string&& value);
  void set_media_hash(const char* value);
  void set_media_hash(const char* value, size_t size);
  std::string* mutable_media_hash();
  std::string* release_media_hash();
  void set_allocated_media_hash(std::string* media_hash);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_media_hash();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_media_hash(
      std::string* media_hash);

  // @@protoc_insertion_point(class_scope:sagittarius.media.v1.GetInfoRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr media_hash_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_media_2fv1_2fmedia_2eproto;
};
// -------------------------------------------------------------------

class UpdateInfoRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sagittarius.media.v1.UpdateInfoRequest) */ {
 public:
  UpdateInfoRequest();
  virtual ~UpdateInfoRequest();

  UpdateInfoRequest(const UpdateInfoRequest& from);
  UpdateInfoRequest(UpdateInfoRequest&& from) noexcept
    : UpdateInfoRequest() {
    *this = ::std::move(from);
  }

  inline UpdateInfoRequest& operator=(const UpdateInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateInfoRequest& operator=(UpdateInfoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateInfoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateInfoRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateInfoRequest*>(
               &_UpdateInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void UnsafeArenaSwap(UpdateInfoRequest* other);
  void Swap(UpdateInfoRequest* other);
  friend void swap(UpdateInfoRequest& a, UpdateInfoRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateInfoRequest* New() const final {
    return CreateMaybeMessage<UpdateInfoRequest>(nullptr);
  }

  UpdateInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateInfoRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateInfoRequest& from);
  void MergeFrom(const UpdateInfoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateInfoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sagittarius.media.v1.UpdateInfoRequest";
  }
  protected:
  explicit UpdateInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_media_2fv1_2fmedia_2eproto);
    return ::descriptor_table_media_2fv1_2fmedia_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string media_hash = 1;
  void clear_media_hash();
  static const int kMediaHashFieldNumber = 1;
  const std::string& media_hash() const;
  void set_media_hash(const std::string& value);
  void set_media_hash(std::string&& value);
  void set_media_hash(const char* value);
  void set_media_hash(const char* value, size_t size);
  std::string* mutable_media_hash();
  std::string* release_media_hash();
  void set_allocated_media_hash(std::string* media_hash);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_media_hash();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_media_hash(
      std::string* media_hash);

  // .sagittarius.media.v1.Info info = 2;
  bool has_info() const;
  void clear_info();
  static const int kInfoFieldNumber = 2;
  const ::sagittarius::media::v1::Info& info() const;
  ::sagittarius::media::v1::Info* release_info();
  ::sagittarius::media::v1::Info* mutable_info();
  void set_allocated_info(::sagittarius::media::v1::Info* info);
  void unsafe_arena_set_allocated_info(
      ::sagittarius::media::v1::Info* info);
  ::sagittarius::media::v1::Info* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:sagittarius.media.v1.UpdateInfoRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr media_hash_;
  ::sagittarius::media::v1::Info* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_media_2fv1_2fmedia_2eproto;
};
// -------------------------------------------------------------------

class ThumbnailTimeRangesRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sagittarius.media.v1.ThumbnailTimeRangesRequest) */ {
 public:
  ThumbnailTimeRangesRequest();
  virtual ~ThumbnailTimeRangesRequest();

  ThumbnailTimeRangesRequest(const ThumbnailTimeRangesRequest& from);
  ThumbnailTimeRangesRequest(ThumbnailTimeRangesRequest&& from) noexcept
    : ThumbnailTimeRangesRequest() {
    *this = ::std::move(from);
  }

  inline ThumbnailTimeRangesRequest& operator=(const ThumbnailTimeRangesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ThumbnailTimeRangesRequest& operator=(ThumbnailTimeRangesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ThumbnailTimeRangesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ThumbnailTimeRangesRequest* internal_default_instance() {
    return reinterpret_cast<const ThumbnailTimeRangesRequest*>(
               &_ThumbnailTimeRangesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void UnsafeArenaSwap(ThumbnailTimeRangesRequest* other);
  void Swap(ThumbnailTimeRangesRequest* other);
  friend void swap(ThumbnailTimeRangesRequest& a, ThumbnailTimeRangesRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ThumbnailTimeRangesRequest* New() const final {
    return CreateMaybeMessage<ThumbnailTimeRangesRequest>(nullptr);
  }

  ThumbnailTimeRangesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ThumbnailTimeRangesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ThumbnailTimeRangesRequest& from);
  void MergeFrom(const ThumbnailTimeRangesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ThumbnailTimeRangesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sagittarius.media.v1.ThumbnailTimeRangesRequest";
  }
  protected:
  explicit ThumbnailTimeRangesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_media_2fv1_2fmedia_2eproto);
    return ::descriptor_table_media_2fv1_2fmedia_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string media_hash = 1;
  void clear_media_hash();
  static const int kMediaHashFieldNumber = 1;
  const std::string& media_hash() const;
  void set_media_hash(const std::string& value);
  void set_media_hash(std::string&& value);
  void set_media_hash(const char* value);
  void set_media_hash(const char* value, size_t size);
  std::string* mutable_media_hash();
  std::string* release_media_hash();
  void set_allocated_media_hash(std::string* media_hash);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_media_hash();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_media_hash(
      std::string* media_hash);

  // double media_length = 2;
  void clear_media_length();
  static const int kMediaLengthFieldNumber = 2;
  double media_length() const;
  void set_media_length(double value);

  // @@protoc_insertion_point(class_scope:sagittarius.media.v1.ThumbnailTimeRangesRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr media_hash_;
  double media_length_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_media_2fv1_2fmedia_2eproto;
};
// -------------------------------------------------------------------

class TimeRange :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sagittarius.media.v1.TimeRange) */ {
 public:
  TimeRange();
  virtual ~TimeRange();

  TimeRange(const TimeRange& from);
  TimeRange(TimeRange&& from) noexcept
    : TimeRange() {
    *this = ::std::move(from);
  }

  inline TimeRange& operator=(const TimeRange& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimeRange& operator=(TimeRange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TimeRange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TimeRange* internal_default_instance() {
    return reinterpret_cast<const TimeRange*>(
               &_TimeRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void UnsafeArenaSwap(TimeRange* other);
  void Swap(TimeRange* other);
  friend void swap(TimeRange& a, TimeRange& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TimeRange* New() const final {
    return CreateMaybeMessage<TimeRange>(nullptr);
  }

  TimeRange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TimeRange>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TimeRange& from);
  void MergeFrom(const TimeRange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimeRange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sagittarius.media.v1.TimeRange";
  }
  protected:
  explicit TimeRange(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_media_2fv1_2fmedia_2eproto);
    return ::descriptor_table_media_2fv1_2fmedia_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double begin = 1;
  void clear_begin();
  static const int kBeginFieldNumber = 1;
  double begin() const;
  void set_begin(double value);

  // double end = 2;
  void clear_end();
  static const int kEndFieldNumber = 2;
  double end() const;
  void set_end(double value);

  // double interval = 3;
  void clear_interval();
  static const int kIntervalFieldNumber = 3;
  double interval() const;
  void set_interval(double value);

  // @@protoc_insertion_point(class_scope:sagittarius.media.v1.TimeRange)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double begin_;
  double end_;
  double interval_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_media_2fv1_2fmedia_2eproto;
};
// -------------------------------------------------------------------

class ThumbnailTimeRangesResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sagittarius.media.v1.ThumbnailTimeRangesResponse) */ {
 public:
  ThumbnailTimeRangesResponse();
  virtual ~ThumbnailTimeRangesResponse();

  ThumbnailTimeRangesResponse(const ThumbnailTimeRangesResponse& from);
  ThumbnailTimeRangesResponse(ThumbnailTimeRangesResponse&& from) noexcept
    : ThumbnailTimeRangesResponse() {
    *this = ::std::move(from);
  }

  inline ThumbnailTimeRangesResponse& operator=(const ThumbnailTimeRangesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ThumbnailTimeRangesResponse& operator=(ThumbnailTimeRangesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ThumbnailTimeRangesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ThumbnailTimeRangesResponse* internal_default_instance() {
    return reinterpret_cast<const ThumbnailTimeRangesResponse*>(
               &_ThumbnailTimeRangesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void UnsafeArenaSwap(ThumbnailTimeRangesResponse* other);
  void Swap(ThumbnailTimeRangesResponse* other);
  friend void swap(ThumbnailTimeRangesResponse& a, ThumbnailTimeRangesResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ThumbnailTimeRangesResponse* New() const final {
    return CreateMaybeMessage<ThumbnailTimeRangesResponse>(nullptr);
  }

  ThumbnailTimeRangesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ThumbnailTimeRangesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ThumbnailTimeRangesResponse& from);
  void MergeFrom(const ThumbnailTimeRangesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ThumbnailTimeRangesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sagittarius.media.v1.ThumbnailTimeRangesResponse";
  }
  protected:
  explicit ThumbnailTimeRangesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_media_2fv1_2fmedia_2eproto);
    return ::descriptor_table_media_2fv1_2fmedia_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .sagittarius.media.v1.TimeRange availables = 3;
  int availables_size() const;
  void clear_availables();
  static const int kAvailablesFieldNumber = 3;
  ::sagittarius::media::v1::TimeRange* mutable_availables(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sagittarius::media::v1::TimeRange >*
      mutable_availables();
  const ::sagittarius::media::v1::TimeRange& availables(int index) const;
  ::sagittarius::media::v1::TimeRange* add_availables();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sagittarius::media::v1::TimeRange >&
      availables() const;

  // repeated .sagittarius.media.v1.TimeRange missings = 4;
  int missings_size() const;
  void clear_missings();
  static const int kMissingsFieldNumber = 4;
  ::sagittarius::media::v1::TimeRange* mutable_missings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sagittarius::media::v1::TimeRange >*
      mutable_missings();
  const ::sagittarius::media::v1::TimeRange& missings(int index) const;
  ::sagittarius::media::v1::TimeRange* add_missings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sagittarius::media::v1::TimeRange >&
      missings() const;

  // string media_hash = 2;
  void clear_media_hash();
  static const int kMediaHashFieldNumber = 2;
  const std::string& media_hash() const;
  void set_media_hash(const std::string& value);
  void set_media_hash(std::string&& value);
  void set_media_hash(const char* value);
  void set_media_hash(const char* value, size_t size);
  std::string* mutable_media_hash();
  std::string* release_media_hash();
  void set_allocated_media_hash(std::string* media_hash);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_media_hash();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_media_hash(
      std::string* media_hash);

  // string token = 5;
  void clear_token();
  static const int kTokenFieldNumber = 5;
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_token();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_token(
      std::string* token);

  // .google.rpc.Status error = 1;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  const ::google::rpc::Status& error() const;
  ::google::rpc::Status* release_error();
  ::google::rpc::Status* mutable_error();
  void set_allocated_error(::google::rpc::Status* error);
  void unsafe_arena_set_allocated_error(
      ::google::rpc::Status* error);
  ::google::rpc::Status* unsafe_arena_release_error();

  // @@protoc_insertion_point(class_scope:sagittarius.media.v1.ThumbnailTimeRangesResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sagittarius::media::v1::TimeRange > availables_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sagittarius::media::v1::TimeRange > missings_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr media_hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::google::rpc::Status* error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_media_2fv1_2fmedia_2eproto;
};
// -------------------------------------------------------------------

class ThumbnailRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sagittarius.media.v1.ThumbnailRequest) */ {
 public:
  ThumbnailRequest();
  virtual ~ThumbnailRequest();

  ThumbnailRequest(const ThumbnailRequest& from);
  ThumbnailRequest(ThumbnailRequest&& from) noexcept
    : ThumbnailRequest() {
    *this = ::std::move(from);
  }

  inline ThumbnailRequest& operator=(const ThumbnailRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ThumbnailRequest& operator=(ThumbnailRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ThumbnailRequest& default_instance();

  enum TimeCase {
    kRange = 2,
    kTimestamp = 3,
    TIME_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ThumbnailRequest* internal_default_instance() {
    return reinterpret_cast<const ThumbnailRequest*>(
               &_ThumbnailRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void UnsafeArenaSwap(ThumbnailRequest* other);
  void Swap(ThumbnailRequest* other);
  friend void swap(ThumbnailRequest& a, ThumbnailRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ThumbnailRequest* New() const final {
    return CreateMaybeMessage<ThumbnailRequest>(nullptr);
  }

  ThumbnailRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ThumbnailRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ThumbnailRequest& from);
  void MergeFrom(const ThumbnailRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ThumbnailRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sagittarius.media.v1.ThumbnailRequest";
  }
  protected:
  explicit ThumbnailRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_media_2fv1_2fmedia_2eproto);
    return ::descriptor_table_media_2fv1_2fmedia_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string media_hash = 1;
  void clear_media_hash();
  static const int kMediaHashFieldNumber = 1;
  const std::string& media_hash() const;
  void set_media_hash(const std::string& value);
  void set_media_hash(std::string&& value);
  void set_media_hash(const char* value);
  void set_media_hash(const char* value, size_t size);
  std::string* mutable_media_hash();
  std::string* release_media_hash();
  void set_allocated_media_hash(std::string* media_hash);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_media_hash();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_media_hash(
      std::string* media_hash);

  // string token = 4;
  void clear_token();
  static const int kTokenFieldNumber = 4;
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_token();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_token(
      std::string* token);

  // .sagittarius.media.v1.TimeRange range = 2;
  bool has_range() const;
  void clear_range();
  static const int kRangeFieldNumber = 2;
  const ::sagittarius::media::v1::TimeRange& range() const;
  ::sagittarius::media::v1::TimeRange* release_range();
  ::sagittarius::media::v1::TimeRange* mutable_range();
  void set_allocated_range(::sagittarius::media::v1::TimeRange* range);
  void unsafe_arena_set_allocated_range(
      ::sagittarius::media::v1::TimeRange* range);
  ::sagittarius::media::v1::TimeRange* unsafe_arena_release_range();

  // double timestamp = 3;
  private:
  bool has_timestamp() const;
  public:
  void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  double timestamp() const;
  void set_timestamp(double value);

  void clear_time();
  TimeCase time_case() const;
  // @@protoc_insertion_point(class_scope:sagittarius.media.v1.ThumbnailRequest)
 private:
  class HasBitSetters;
  void set_has_range();
  void set_has_timestamp();

  inline bool has_time() const;
  inline void clear_has_time();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr media_hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  union TimeUnion {
    TimeUnion() {}
    ::sagittarius::media::v1::TimeRange* range_;
    double timestamp_;
  } time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_media_2fv1_2fmedia_2eproto;
};
// -------------------------------------------------------------------

class Thumbnail :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sagittarius.media.v1.Thumbnail) */ {
 public:
  Thumbnail();
  virtual ~Thumbnail();

  Thumbnail(const Thumbnail& from);
  Thumbnail(Thumbnail&& from) noexcept
    : Thumbnail() {
    *this = ::std::move(from);
  }

  inline Thumbnail& operator=(const Thumbnail& from) {
    CopyFrom(from);
    return *this;
  }
  inline Thumbnail& operator=(Thumbnail&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Thumbnail& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Thumbnail* internal_default_instance() {
    return reinterpret_cast<const Thumbnail*>(
               &_Thumbnail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void UnsafeArenaSwap(Thumbnail* other);
  void Swap(Thumbnail* other);
  friend void swap(Thumbnail& a, Thumbnail& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Thumbnail* New() const final {
    return CreateMaybeMessage<Thumbnail>(nullptr);
  }

  Thumbnail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Thumbnail>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Thumbnail& from);
  void MergeFrom(const Thumbnail& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Thumbnail* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sagittarius.media.v1.Thumbnail";
  }
  protected:
  explicit Thumbnail(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_media_2fv1_2fmedia_2eproto);
    return ::descriptor_table_media_2fv1_2fmedia_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ext = 2;
  void clear_ext();
  static const int kExtFieldNumber = 2;
  const std::string& ext() const;
  void set_ext(const std::string& value);
  void set_ext(std::string&& value);
  void set_ext(const char* value);
  void set_ext(const char* value, size_t size);
  std::string* mutable_ext();
  std::string* release_ext();
  void set_allocated_ext(std::string* ext);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ext();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ext(
      std::string* ext);

  // bytes payload = 3;
  void clear_payload();
  static const int kPayloadFieldNumber = 3;
  const std::string& payload() const;
  void set_payload(const std::string& value);
  void set_payload(std::string&& value);
  void set_payload(const char* value);
  void set_payload(const void* value, size_t size);
  std::string* mutable_payload();
  std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_payload();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_payload(
      std::string* payload);

  // double timestamp = 1;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  double timestamp() const;
  void set_timestamp(double value);

  // @@protoc_insertion_point(class_scope:sagittarius.media.v1.Thumbnail)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ext_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  double timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_media_2fv1_2fmedia_2eproto;
};
// -------------------------------------------------------------------

class ThumbnailResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sagittarius.media.v1.ThumbnailResponse) */ {
 public:
  ThumbnailResponse();
  virtual ~ThumbnailResponse();

  ThumbnailResponse(const ThumbnailResponse& from);
  ThumbnailResponse(ThumbnailResponse&& from) noexcept
    : ThumbnailResponse() {
    *this = ::std::move(from);
  }

  inline ThumbnailResponse& operator=(const ThumbnailResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ThumbnailResponse& operator=(ThumbnailResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ThumbnailResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ThumbnailResponse* internal_default_instance() {
    return reinterpret_cast<const ThumbnailResponse*>(
               &_ThumbnailResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void UnsafeArenaSwap(ThumbnailResponse* other);
  void Swap(ThumbnailResponse* other);
  friend void swap(ThumbnailResponse& a, ThumbnailResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ThumbnailResponse* New() const final {
    return CreateMaybeMessage<ThumbnailResponse>(nullptr);
  }

  ThumbnailResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ThumbnailResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ThumbnailResponse& from);
  void MergeFrom(const ThumbnailResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ThumbnailResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sagittarius.media.v1.ThumbnailResponse";
  }
  protected:
  explicit ThumbnailResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_media_2fv1_2fmedia_2eproto);
    return ::descriptor_table_media_2fv1_2fmedia_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .sagittarius.media.v1.Thumbnail thumbnails = 2;
  int thumbnails_size() const;
  void clear_thumbnails();
  static const int kThumbnailsFieldNumber = 2;
  ::sagittarius::media::v1::Thumbnail* mutable_thumbnails(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sagittarius::media::v1::Thumbnail >*
      mutable_thumbnails();
  const ::sagittarius::media::v1::Thumbnail& thumbnails(int index) const;
  ::sagittarius::media::v1::Thumbnail* add_thumbnails();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sagittarius::media::v1::Thumbnail >&
      thumbnails() const;

  // .google.rpc.Status error = 1;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 1;
  const ::google::rpc::Status& error() const;
  ::google::rpc::Status* release_error();
  ::google::rpc::Status* mutable_error();
  void set_allocated_error(::google::rpc::Status* error);
  void unsafe_arena_set_allocated_error(
      ::google::rpc::Status* error);
  ::google::rpc::Status* unsafe_arena_release_error();

  // @@protoc_insertion_point(class_scope:sagittarius.media.v1.ThumbnailResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sagittarius::media::v1::Thumbnail > thumbnails_;
  ::google::rpc::Status* error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_media_2fv1_2fmedia_2eproto;
};
// -------------------------------------------------------------------

class UpdateThumbnailRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sagittarius.media.v1.UpdateThumbnailRequest) */ {
 public:
  UpdateThumbnailRequest();
  virtual ~UpdateThumbnailRequest();

  UpdateThumbnailRequest(const UpdateThumbnailRequest& from);
  UpdateThumbnailRequest(UpdateThumbnailRequest&& from) noexcept
    : UpdateThumbnailRequest() {
    *this = ::std::move(from);
  }

  inline UpdateThumbnailRequest& operator=(const UpdateThumbnailRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateThumbnailRequest& operator=(UpdateThumbnailRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateThumbnailRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateThumbnailRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateThumbnailRequest*>(
               &_UpdateThumbnailRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void UnsafeArenaSwap(UpdateThumbnailRequest* other);
  void Swap(UpdateThumbnailRequest* other);
  friend void swap(UpdateThumbnailRequest& a, UpdateThumbnailRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateThumbnailRequest* New() const final {
    return CreateMaybeMessage<UpdateThumbnailRequest>(nullptr);
  }

  UpdateThumbnailRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateThumbnailRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateThumbnailRequest& from);
  void MergeFrom(const UpdateThumbnailRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateThumbnailRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sagittarius.media.v1.UpdateThumbnailRequest";
  }
  protected:
  explicit UpdateThumbnailRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_media_2fv1_2fmedia_2eproto);
    return ::descriptor_table_media_2fv1_2fmedia_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .sagittarius.media.v1.Thumbnail thumbnails = 2;
  int thumbnails_size() const;
  void clear_thumbnails();
  static const int kThumbnailsFieldNumber = 2;
  ::sagittarius::media::v1::Thumbnail* mutable_thumbnails(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sagittarius::media::v1::Thumbnail >*
      mutable_thumbnails();
  const ::sagittarius::media::v1::Thumbnail& thumbnails(int index) const;
  ::sagittarius::media::v1::Thumbnail* add_thumbnails();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sagittarius::media::v1::Thumbnail >&
      thumbnails() const;

  // string media_hash = 1;
  void clear_media_hash();
  static const int kMediaHashFieldNumber = 1;
  const std::string& media_hash() const;
  void set_media_hash(const std::string& value);
  void set_media_hash(std::string&& value);
  void set_media_hash(const char* value);
  void set_media_hash(const char* value, size_t size);
  std::string* mutable_media_hash();
  std::string* release_media_hash();
  void set_allocated_media_hash(std::string* media_hash);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_media_hash();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_media_hash(
      std::string* media_hash);

  // string token = 3;
  void clear_token();
  static const int kTokenFieldNumber = 3;
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_token();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_token(
      std::string* token);

  // @@protoc_insertion_point(class_scope:sagittarius.media.v1.UpdateThumbnailRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sagittarius::media::v1::Thumbnail > thumbnails_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr media_hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_media_2fv1_2fmedia_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Info_TrackInfo

// .sagittarius.media.v1.Info.TrackInfo.Type types = 1;
inline void Info_TrackInfo::clear_types() {
  types_ = 0;
}
inline ::sagittarius::media::v1::Info_TrackInfo_Type Info_TrackInfo::types() const {
  // @@protoc_insertion_point(field_get:sagittarius.media.v1.Info.TrackInfo.types)
  return static_cast< ::sagittarius::media::v1::Info_TrackInfo_Type >(types_);
}
inline void Info_TrackInfo::set_types(::sagittarius::media::v1::Info_TrackInfo_Type value) {
  
  types_ = value;
  // @@protoc_insertion_point(field_set:sagittarius.media.v1.Info.TrackInfo.types)
}

// -------------------------------------------------------------------

// Info

// string media_hash = 1;
inline void Info::clear_media_hash() {
  media_hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& Info::media_hash() const {
  // @@protoc_insertion_point(field_get:sagittarius.media.v1.Info.media_hash)
  return media_hash_.Get();
}
inline void Info::set_media_hash(const std::string& value) {
  
  media_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:sagittarius.media.v1.Info.media_hash)
}
inline void Info::set_media_hash(std::string&& value) {
  
  media_hash_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:sagittarius.media.v1.Info.media_hash)
}
inline void Info::set_media_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  media_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:sagittarius.media.v1.Info.media_hash)
}
inline void Info::set_media_hash(const char* value,
    size_t size) {
  
  media_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:sagittarius.media.v1.Info.media_hash)
}
inline std::string* Info::mutable_media_hash() {
  
  // @@protoc_insertion_point(field_mutable:sagittarius.media.v1.Info.media_hash)
  return media_hash_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* Info::release_media_hash() {
  // @@protoc_insertion_point(field_release:sagittarius.media.v1.Info.media_hash)
  
  return media_hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Info::set_allocated_media_hash(std::string* media_hash) {
  if (media_hash != nullptr) {
    
  } else {
    
  }
  media_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), media_hash,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:sagittarius.media.v1.Info.media_hash)
}
inline std::string* Info::unsafe_arena_release_media_hash() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sagittarius.media.v1.Info.media_hash)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return media_hash_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Info::unsafe_arena_set_allocated_media_hash(
    std::string* media_hash) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (media_hash != nullptr) {
    
  } else {
    
  }
  media_hash_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      media_hash, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sagittarius.media.v1.Info.media_hash)
}

// repeated .sagittarius.media.v1.Info.TrackInfo tracks = 2;
inline int Info::tracks_size() const {
  return tracks_.size();
}
inline void Info::clear_tracks() {
  tracks_.Clear();
}
inline ::sagittarius::media::v1::Info_TrackInfo* Info::mutable_tracks(int index) {
  // @@protoc_insertion_point(field_mutable:sagittarius.media.v1.Info.tracks)
  return tracks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sagittarius::media::v1::Info_TrackInfo >*
Info::mutable_tracks() {
  // @@protoc_insertion_point(field_mutable_list:sagittarius.media.v1.Info.tracks)
  return &tracks_;
}
inline const ::sagittarius::media::v1::Info_TrackInfo& Info::tracks(int index) const {
  // @@protoc_insertion_point(field_get:sagittarius.media.v1.Info.tracks)
  return tracks_.Get(index);
}
inline ::sagittarius::media::v1::Info_TrackInfo* Info::add_tracks() {
  // @@protoc_insertion_point(field_add:sagittarius.media.v1.Info.tracks)
  return tracks_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sagittarius::media::v1::Info_TrackInfo >&
Info::tracks() const {
  // @@protoc_insertion_point(field_list:sagittarius.media.v1.Info.tracks)
  return tracks_;
}

// -------------------------------------------------------------------

// GetInfoRequest

// string media_hash = 1;
inline void GetInfoRequest::clear_media_hash() {
  media_hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& GetInfoRequest::media_hash() const {
  // @@protoc_insertion_point(field_get:sagittarius.media.v1.GetInfoRequest.media_hash)
  return media_hash_.Get();
}
inline void GetInfoRequest::set_media_hash(const std::string& value) {
  
  media_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:sagittarius.media.v1.GetInfoRequest.media_hash)
}
inline void GetInfoRequest::set_media_hash(std::string&& value) {
  
  media_hash_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:sagittarius.media.v1.GetInfoRequest.media_hash)
}
inline void GetInfoRequest::set_media_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  media_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:sagittarius.media.v1.GetInfoRequest.media_hash)
}
inline void GetInfoRequest::set_media_hash(const char* value,
    size_t size) {
  
  media_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:sagittarius.media.v1.GetInfoRequest.media_hash)
}
inline std::string* GetInfoRequest::mutable_media_hash() {
  
  // @@protoc_insertion_point(field_mutable:sagittarius.media.v1.GetInfoRequest.media_hash)
  return media_hash_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* GetInfoRequest::release_media_hash() {
  // @@protoc_insertion_point(field_release:sagittarius.media.v1.GetInfoRequest.media_hash)
  
  return media_hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void GetInfoRequest::set_allocated_media_hash(std::string* media_hash) {
  if (media_hash != nullptr) {
    
  } else {
    
  }
  media_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), media_hash,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:sagittarius.media.v1.GetInfoRequest.media_hash)
}
inline std::string* GetInfoRequest::unsafe_arena_release_media_hash() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sagittarius.media.v1.GetInfoRequest.media_hash)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return media_hash_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GetInfoRequest::unsafe_arena_set_allocated_media_hash(
    std::string* media_hash) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (media_hash != nullptr) {
    
  } else {
    
  }
  media_hash_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      media_hash, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sagittarius.media.v1.GetInfoRequest.media_hash)
}

// -------------------------------------------------------------------

// UpdateInfoRequest

// string media_hash = 1;
inline void UpdateInfoRequest::clear_media_hash() {
  media_hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& UpdateInfoRequest::media_hash() const {
  // @@protoc_insertion_point(field_get:sagittarius.media.v1.UpdateInfoRequest.media_hash)
  return media_hash_.Get();
}
inline void UpdateInfoRequest::set_media_hash(const std::string& value) {
  
  media_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:sagittarius.media.v1.UpdateInfoRequest.media_hash)
}
inline void UpdateInfoRequest::set_media_hash(std::string&& value) {
  
  media_hash_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:sagittarius.media.v1.UpdateInfoRequest.media_hash)
}
inline void UpdateInfoRequest::set_media_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  media_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:sagittarius.media.v1.UpdateInfoRequest.media_hash)
}
inline void UpdateInfoRequest::set_media_hash(const char* value,
    size_t size) {
  
  media_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:sagittarius.media.v1.UpdateInfoRequest.media_hash)
}
inline std::string* UpdateInfoRequest::mutable_media_hash() {
  
  // @@protoc_insertion_point(field_mutable:sagittarius.media.v1.UpdateInfoRequest.media_hash)
  return media_hash_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* UpdateInfoRequest::release_media_hash() {
  // @@protoc_insertion_point(field_release:sagittarius.media.v1.UpdateInfoRequest.media_hash)
  
  return media_hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UpdateInfoRequest::set_allocated_media_hash(std::string* media_hash) {
  if (media_hash != nullptr) {
    
  } else {
    
  }
  media_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), media_hash,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:sagittarius.media.v1.UpdateInfoRequest.media_hash)
}
inline std::string* UpdateInfoRequest::unsafe_arena_release_media_hash() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sagittarius.media.v1.UpdateInfoRequest.media_hash)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return media_hash_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UpdateInfoRequest::unsafe_arena_set_allocated_media_hash(
    std::string* media_hash) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (media_hash != nullptr) {
    
  } else {
    
  }
  media_hash_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      media_hash, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sagittarius.media.v1.UpdateInfoRequest.media_hash)
}

// .sagittarius.media.v1.Info info = 2;
inline bool UpdateInfoRequest::has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline void UpdateInfoRequest::clear_info() {
  if (GetArenaNoVirtual() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::sagittarius::media::v1::Info& UpdateInfoRequest::info() const {
  const ::sagittarius::media::v1::Info* p = info_;
  // @@protoc_insertion_point(field_get:sagittarius.media.v1.UpdateInfoRequest.info)
  return p != nullptr ? *p : *reinterpret_cast<const ::sagittarius::media::v1::Info*>(
      &::sagittarius::media::v1::_Info_default_instance_);
}
inline ::sagittarius::media::v1::Info* UpdateInfoRequest::release_info() {
  // @@protoc_insertion_point(field_release:sagittarius.media.v1.UpdateInfoRequest.info)
  
  ::sagittarius::media::v1::Info* temp = info_;
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  info_ = nullptr;
  return temp;
}
inline ::sagittarius::media::v1::Info* UpdateInfoRequest::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sagittarius.media.v1.UpdateInfoRequest.info)
  
  ::sagittarius::media::v1::Info* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::sagittarius::media::v1::Info* UpdateInfoRequest::mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::sagittarius::media::v1::Info>(GetArenaNoVirtual());
    info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sagittarius.media.v1.UpdateInfoRequest.info)
  return info_;
}
inline void UpdateInfoRequest::set_allocated_info(::sagittarius::media::v1::Info* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:sagittarius.media.v1.UpdateInfoRequest.info)
}

// -------------------------------------------------------------------

// ThumbnailTimeRangesRequest

// string media_hash = 1;
inline void ThumbnailTimeRangesRequest::clear_media_hash() {
  media_hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& ThumbnailTimeRangesRequest::media_hash() const {
  // @@protoc_insertion_point(field_get:sagittarius.media.v1.ThumbnailTimeRangesRequest.media_hash)
  return media_hash_.Get();
}
inline void ThumbnailTimeRangesRequest::set_media_hash(const std::string& value) {
  
  media_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:sagittarius.media.v1.ThumbnailTimeRangesRequest.media_hash)
}
inline void ThumbnailTimeRangesRequest::set_media_hash(std::string&& value) {
  
  media_hash_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:sagittarius.media.v1.ThumbnailTimeRangesRequest.media_hash)
}
inline void ThumbnailTimeRangesRequest::set_media_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  media_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:sagittarius.media.v1.ThumbnailTimeRangesRequest.media_hash)
}
inline void ThumbnailTimeRangesRequest::set_media_hash(const char* value,
    size_t size) {
  
  media_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:sagittarius.media.v1.ThumbnailTimeRangesRequest.media_hash)
}
inline std::string* ThumbnailTimeRangesRequest::mutable_media_hash() {
  
  // @@protoc_insertion_point(field_mutable:sagittarius.media.v1.ThumbnailTimeRangesRequest.media_hash)
  return media_hash_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* ThumbnailTimeRangesRequest::release_media_hash() {
  // @@protoc_insertion_point(field_release:sagittarius.media.v1.ThumbnailTimeRangesRequest.media_hash)
  
  return media_hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ThumbnailTimeRangesRequest::set_allocated_media_hash(std::string* media_hash) {
  if (media_hash != nullptr) {
    
  } else {
    
  }
  media_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), media_hash,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:sagittarius.media.v1.ThumbnailTimeRangesRequest.media_hash)
}
inline std::string* ThumbnailTimeRangesRequest::unsafe_arena_release_media_hash() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sagittarius.media.v1.ThumbnailTimeRangesRequest.media_hash)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return media_hash_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ThumbnailTimeRangesRequest::unsafe_arena_set_allocated_media_hash(
    std::string* media_hash) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (media_hash != nullptr) {
    
  } else {
    
  }
  media_hash_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      media_hash, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sagittarius.media.v1.ThumbnailTimeRangesRequest.media_hash)
}

// double media_length = 2;
inline void ThumbnailTimeRangesRequest::clear_media_length() {
  media_length_ = 0;
}
inline double ThumbnailTimeRangesRequest::media_length() const {
  // @@protoc_insertion_point(field_get:sagittarius.media.v1.ThumbnailTimeRangesRequest.media_length)
  return media_length_;
}
inline void ThumbnailTimeRangesRequest::set_media_length(double value) {
  
  media_length_ = value;
  // @@protoc_insertion_point(field_set:sagittarius.media.v1.ThumbnailTimeRangesRequest.media_length)
}

// -------------------------------------------------------------------

// TimeRange

// double begin = 1;
inline void TimeRange::clear_begin() {
  begin_ = 0;
}
inline double TimeRange::begin() const {
  // @@protoc_insertion_point(field_get:sagittarius.media.v1.TimeRange.begin)
  return begin_;
}
inline void TimeRange::set_begin(double value) {
  
  begin_ = value;
  // @@protoc_insertion_point(field_set:sagittarius.media.v1.TimeRange.begin)
}

// double end = 2;
inline void TimeRange::clear_end() {
  end_ = 0;
}
inline double TimeRange::end() const {
  // @@protoc_insertion_point(field_get:sagittarius.media.v1.TimeRange.end)
  return end_;
}
inline void TimeRange::set_end(double value) {
  
  end_ = value;
  // @@protoc_insertion_point(field_set:sagittarius.media.v1.TimeRange.end)
}

// double interval = 3;
inline void TimeRange::clear_interval() {
  interval_ = 0;
}
inline double TimeRange::interval() const {
  // @@protoc_insertion_point(field_get:sagittarius.media.v1.TimeRange.interval)
  return interval_;
}
inline void TimeRange::set_interval(double value) {
  
  interval_ = value;
  // @@protoc_insertion_point(field_set:sagittarius.media.v1.TimeRange.interval)
}

// -------------------------------------------------------------------

// ThumbnailTimeRangesResponse

// .google.rpc.Status error = 1;
inline bool ThumbnailTimeRangesResponse::has_error() const {
  return this != internal_default_instance() && error_ != nullptr;
}
inline const ::google::rpc::Status& ThumbnailTimeRangesResponse::error() const {
  const ::google::rpc::Status* p = error_;
  // @@protoc_insertion_point(field_get:sagittarius.media.v1.ThumbnailTimeRangesResponse.error)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::rpc::Status*>(
      &::google::rpc::_Status_default_instance_);
}
inline ::google::rpc::Status* ThumbnailTimeRangesResponse::release_error() {
  // @@protoc_insertion_point(field_release:sagittarius.media.v1.ThumbnailTimeRangesResponse.error)
  
  ::google::rpc::Status* temp = error_;
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  error_ = nullptr;
  return temp;
}
inline ::google::rpc::Status* ThumbnailTimeRangesResponse::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sagittarius.media.v1.ThumbnailTimeRangesResponse.error)
  
  ::google::rpc::Status* temp = error_;
  error_ = nullptr;
  return temp;
}
inline ::google::rpc::Status* ThumbnailTimeRangesResponse::mutable_error() {
  
  if (error_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::rpc::Status>(GetArenaNoVirtual());
    error_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sagittarius.media.v1.ThumbnailTimeRangesResponse.error)
  return error_;
}
inline void ThumbnailTimeRangesResponse::set_allocated_error(::google::rpc::Status* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_);
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:sagittarius.media.v1.ThumbnailTimeRangesResponse.error)
}

// string media_hash = 2;
inline void ThumbnailTimeRangesResponse::clear_media_hash() {
  media_hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& ThumbnailTimeRangesResponse::media_hash() const {
  // @@protoc_insertion_point(field_get:sagittarius.media.v1.ThumbnailTimeRangesResponse.media_hash)
  return media_hash_.Get();
}
inline void ThumbnailTimeRangesResponse::set_media_hash(const std::string& value) {
  
  media_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:sagittarius.media.v1.ThumbnailTimeRangesResponse.media_hash)
}
inline void ThumbnailTimeRangesResponse::set_media_hash(std::string&& value) {
  
  media_hash_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:sagittarius.media.v1.ThumbnailTimeRangesResponse.media_hash)
}
inline void ThumbnailTimeRangesResponse::set_media_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  media_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:sagittarius.media.v1.ThumbnailTimeRangesResponse.media_hash)
}
inline void ThumbnailTimeRangesResponse::set_media_hash(const char* value,
    size_t size) {
  
  media_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:sagittarius.media.v1.ThumbnailTimeRangesResponse.media_hash)
}
inline std::string* ThumbnailTimeRangesResponse::mutable_media_hash() {
  
  // @@protoc_insertion_point(field_mutable:sagittarius.media.v1.ThumbnailTimeRangesResponse.media_hash)
  return media_hash_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* ThumbnailTimeRangesResponse::release_media_hash() {
  // @@protoc_insertion_point(field_release:sagittarius.media.v1.ThumbnailTimeRangesResponse.media_hash)
  
  return media_hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ThumbnailTimeRangesResponse::set_allocated_media_hash(std::string* media_hash) {
  if (media_hash != nullptr) {
    
  } else {
    
  }
  media_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), media_hash,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:sagittarius.media.v1.ThumbnailTimeRangesResponse.media_hash)
}
inline std::string* ThumbnailTimeRangesResponse::unsafe_arena_release_media_hash() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sagittarius.media.v1.ThumbnailTimeRangesResponse.media_hash)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return media_hash_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ThumbnailTimeRangesResponse::unsafe_arena_set_allocated_media_hash(
    std::string* media_hash) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (media_hash != nullptr) {
    
  } else {
    
  }
  media_hash_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      media_hash, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sagittarius.media.v1.ThumbnailTimeRangesResponse.media_hash)
}

// repeated .sagittarius.media.v1.TimeRange availables = 3;
inline int ThumbnailTimeRangesResponse::availables_size() const {
  return availables_.size();
}
inline void ThumbnailTimeRangesResponse::clear_availables() {
  availables_.Clear();
}
inline ::sagittarius::media::v1::TimeRange* ThumbnailTimeRangesResponse::mutable_availables(int index) {
  // @@protoc_insertion_point(field_mutable:sagittarius.media.v1.ThumbnailTimeRangesResponse.availables)
  return availables_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sagittarius::media::v1::TimeRange >*
ThumbnailTimeRangesResponse::mutable_availables() {
  // @@protoc_insertion_point(field_mutable_list:sagittarius.media.v1.ThumbnailTimeRangesResponse.availables)
  return &availables_;
}
inline const ::sagittarius::media::v1::TimeRange& ThumbnailTimeRangesResponse::availables(int index) const {
  // @@protoc_insertion_point(field_get:sagittarius.media.v1.ThumbnailTimeRangesResponse.availables)
  return availables_.Get(index);
}
inline ::sagittarius::media::v1::TimeRange* ThumbnailTimeRangesResponse::add_availables() {
  // @@protoc_insertion_point(field_add:sagittarius.media.v1.ThumbnailTimeRangesResponse.availables)
  return availables_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sagittarius::media::v1::TimeRange >&
ThumbnailTimeRangesResponse::availables() const {
  // @@protoc_insertion_point(field_list:sagittarius.media.v1.ThumbnailTimeRangesResponse.availables)
  return availables_;
}

// repeated .sagittarius.media.v1.TimeRange missings = 4;
inline int ThumbnailTimeRangesResponse::missings_size() const {
  return missings_.size();
}
inline void ThumbnailTimeRangesResponse::clear_missings() {
  missings_.Clear();
}
inline ::sagittarius::media::v1::TimeRange* ThumbnailTimeRangesResponse::mutable_missings(int index) {
  // @@protoc_insertion_point(field_mutable:sagittarius.media.v1.ThumbnailTimeRangesResponse.missings)
  return missings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sagittarius::media::v1::TimeRange >*
ThumbnailTimeRangesResponse::mutable_missings() {
  // @@protoc_insertion_point(field_mutable_list:sagittarius.media.v1.ThumbnailTimeRangesResponse.missings)
  return &missings_;
}
inline const ::sagittarius::media::v1::TimeRange& ThumbnailTimeRangesResponse::missings(int index) const {
  // @@protoc_insertion_point(field_get:sagittarius.media.v1.ThumbnailTimeRangesResponse.missings)
  return missings_.Get(index);
}
inline ::sagittarius::media::v1::TimeRange* ThumbnailTimeRangesResponse::add_missings() {
  // @@protoc_insertion_point(field_add:sagittarius.media.v1.ThumbnailTimeRangesResponse.missings)
  return missings_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sagittarius::media::v1::TimeRange >&
ThumbnailTimeRangesResponse::missings() const {
  // @@protoc_insertion_point(field_list:sagittarius.media.v1.ThumbnailTimeRangesResponse.missings)
  return missings_;
}

// string token = 5;
inline void ThumbnailTimeRangesResponse::clear_token() {
  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& ThumbnailTimeRangesResponse::token() const {
  // @@protoc_insertion_point(field_get:sagittarius.media.v1.ThumbnailTimeRangesResponse.token)
  return token_.Get();
}
inline void ThumbnailTimeRangesResponse::set_token(const std::string& value) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:sagittarius.media.v1.ThumbnailTimeRangesResponse.token)
}
inline void ThumbnailTimeRangesResponse::set_token(std::string&& value) {
  
  token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:sagittarius.media.v1.ThumbnailTimeRangesResponse.token)
}
inline void ThumbnailTimeRangesResponse::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:sagittarius.media.v1.ThumbnailTimeRangesResponse.token)
}
inline void ThumbnailTimeRangesResponse::set_token(const char* value,
    size_t size) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:sagittarius.media.v1.ThumbnailTimeRangesResponse.token)
}
inline std::string* ThumbnailTimeRangesResponse::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:sagittarius.media.v1.ThumbnailTimeRangesResponse.token)
  return token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* ThumbnailTimeRangesResponse::release_token() {
  // @@protoc_insertion_point(field_release:sagittarius.media.v1.ThumbnailTimeRangesResponse.token)
  
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ThumbnailTimeRangesResponse::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:sagittarius.media.v1.ThumbnailTimeRangesResponse.token)
}
inline std::string* ThumbnailTimeRangesResponse::unsafe_arena_release_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sagittarius.media.v1.ThumbnailTimeRangesResponse.token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return token_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ThumbnailTimeRangesResponse::unsafe_arena_set_allocated_token(
    std::string* token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (token != nullptr) {
    
  } else {
    
  }
  token_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sagittarius.media.v1.ThumbnailTimeRangesResponse.token)
}

// -------------------------------------------------------------------

// ThumbnailRequest

// string media_hash = 1;
inline void ThumbnailRequest::clear_media_hash() {
  media_hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& ThumbnailRequest::media_hash() const {
  // @@protoc_insertion_point(field_get:sagittarius.media.v1.ThumbnailRequest.media_hash)
  return media_hash_.Get();
}
inline void ThumbnailRequest::set_media_hash(const std::string& value) {
  
  media_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:sagittarius.media.v1.ThumbnailRequest.media_hash)
}
inline void ThumbnailRequest::set_media_hash(std::string&& value) {
  
  media_hash_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:sagittarius.media.v1.ThumbnailRequest.media_hash)
}
inline void ThumbnailRequest::set_media_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  media_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:sagittarius.media.v1.ThumbnailRequest.media_hash)
}
inline void ThumbnailRequest::set_media_hash(const char* value,
    size_t size) {
  
  media_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:sagittarius.media.v1.ThumbnailRequest.media_hash)
}
inline std::string* ThumbnailRequest::mutable_media_hash() {
  
  // @@protoc_insertion_point(field_mutable:sagittarius.media.v1.ThumbnailRequest.media_hash)
  return media_hash_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* ThumbnailRequest::release_media_hash() {
  // @@protoc_insertion_point(field_release:sagittarius.media.v1.ThumbnailRequest.media_hash)
  
  return media_hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ThumbnailRequest::set_allocated_media_hash(std::string* media_hash) {
  if (media_hash != nullptr) {
    
  } else {
    
  }
  media_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), media_hash,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:sagittarius.media.v1.ThumbnailRequest.media_hash)
}
inline std::string* ThumbnailRequest::unsafe_arena_release_media_hash() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sagittarius.media.v1.ThumbnailRequest.media_hash)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return media_hash_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ThumbnailRequest::unsafe_arena_set_allocated_media_hash(
    std::string* media_hash) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (media_hash != nullptr) {
    
  } else {
    
  }
  media_hash_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      media_hash, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sagittarius.media.v1.ThumbnailRequest.media_hash)
}

// .sagittarius.media.v1.TimeRange range = 2;
inline bool ThumbnailRequest::has_range() const {
  return time_case() == kRange;
}
inline void ThumbnailRequest::set_has_range() {
  _oneof_case_[0] = kRange;
}
inline void ThumbnailRequest::clear_range() {
  if (has_range()) {
    if (GetArenaNoVirtual() == nullptr) {
      delete time_.range_;
    }
    clear_has_time();
  }
}
inline ::sagittarius::media::v1::TimeRange* ThumbnailRequest::release_range() {
  // @@protoc_insertion_point(field_release:sagittarius.media.v1.ThumbnailRequest.range)
  if (has_range()) {
    clear_has_time();
      ::sagittarius::media::v1::TimeRange* temp = time_.range_;
    if (GetArenaNoVirtual() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    time_.range_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::sagittarius::media::v1::TimeRange& ThumbnailRequest::range() const {
  // @@protoc_insertion_point(field_get:sagittarius.media.v1.ThumbnailRequest.range)
  return has_range()
      ? *time_.range_
      : *reinterpret_cast< ::sagittarius::media::v1::TimeRange*>(&::sagittarius::media::v1::_TimeRange_default_instance_);
}
inline ::sagittarius::media::v1::TimeRange* ThumbnailRequest::unsafe_arena_release_range() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sagittarius.media.v1.ThumbnailRequest.range)
  if (has_range()) {
    clear_has_time();
    ::sagittarius::media::v1::TimeRange* temp = time_.range_;
    time_.range_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ThumbnailRequest::unsafe_arena_set_allocated_range(::sagittarius::media::v1::TimeRange* range) {
  clear_time();
  if (range) {
    set_has_range();
    time_.range_ = range;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sagittarius.media.v1.ThumbnailRequest.range)
}
inline ::sagittarius::media::v1::TimeRange* ThumbnailRequest::mutable_range() {
  if (!has_range()) {
    clear_time();
    set_has_range();
    time_.range_ = CreateMaybeMessage< ::sagittarius::media::v1::TimeRange >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:sagittarius.media.v1.ThumbnailRequest.range)
  return time_.range_;
}

// double timestamp = 3;
inline bool ThumbnailRequest::has_timestamp() const {
  return time_case() == kTimestamp;
}
inline void ThumbnailRequest::set_has_timestamp() {
  _oneof_case_[0] = kTimestamp;
}
inline void ThumbnailRequest::clear_timestamp() {
  if (has_timestamp()) {
    time_.timestamp_ = 0;
    clear_has_time();
  }
}
inline double ThumbnailRequest::timestamp() const {
  // @@protoc_insertion_point(field_get:sagittarius.media.v1.ThumbnailRequest.timestamp)
  if (has_timestamp()) {
    return time_.timestamp_;
  }
  return 0;
}
inline void ThumbnailRequest::set_timestamp(double value) {
  if (!has_timestamp()) {
    clear_time();
    set_has_timestamp();
  }
  time_.timestamp_ = value;
  // @@protoc_insertion_point(field_set:sagittarius.media.v1.ThumbnailRequest.timestamp)
}

// string token = 4;
inline void ThumbnailRequest::clear_token() {
  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& ThumbnailRequest::token() const {
  // @@protoc_insertion_point(field_get:sagittarius.media.v1.ThumbnailRequest.token)
  return token_.Get();
}
inline void ThumbnailRequest::set_token(const std::string& value) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:sagittarius.media.v1.ThumbnailRequest.token)
}
inline void ThumbnailRequest::set_token(std::string&& value) {
  
  token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:sagittarius.media.v1.ThumbnailRequest.token)
}
inline void ThumbnailRequest::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:sagittarius.media.v1.ThumbnailRequest.token)
}
inline void ThumbnailRequest::set_token(const char* value,
    size_t size) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:sagittarius.media.v1.ThumbnailRequest.token)
}
inline std::string* ThumbnailRequest::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:sagittarius.media.v1.ThumbnailRequest.token)
  return token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* ThumbnailRequest::release_token() {
  // @@protoc_insertion_point(field_release:sagittarius.media.v1.ThumbnailRequest.token)
  
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ThumbnailRequest::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:sagittarius.media.v1.ThumbnailRequest.token)
}
inline std::string* ThumbnailRequest::unsafe_arena_release_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sagittarius.media.v1.ThumbnailRequest.token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return token_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ThumbnailRequest::unsafe_arena_set_allocated_token(
    std::string* token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (token != nullptr) {
    
  } else {
    
  }
  token_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sagittarius.media.v1.ThumbnailRequest.token)
}

inline bool ThumbnailRequest::has_time() const {
  return time_case() != TIME_NOT_SET;
}
inline void ThumbnailRequest::clear_has_time() {
  _oneof_case_[0] = TIME_NOT_SET;
}
inline ThumbnailRequest::TimeCase ThumbnailRequest::time_case() const {
  return ThumbnailRequest::TimeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Thumbnail

// double timestamp = 1;
inline void Thumbnail::clear_timestamp() {
  timestamp_ = 0;
}
inline double Thumbnail::timestamp() const {
  // @@protoc_insertion_point(field_get:sagittarius.media.v1.Thumbnail.timestamp)
  return timestamp_;
}
inline void Thumbnail::set_timestamp(double value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:sagittarius.media.v1.Thumbnail.timestamp)
}

// string ext = 2;
inline void Thumbnail::clear_ext() {
  ext_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& Thumbnail::ext() const {
  // @@protoc_insertion_point(field_get:sagittarius.media.v1.Thumbnail.ext)
  return ext_.Get();
}
inline void Thumbnail::set_ext(const std::string& value) {
  
  ext_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:sagittarius.media.v1.Thumbnail.ext)
}
inline void Thumbnail::set_ext(std::string&& value) {
  
  ext_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:sagittarius.media.v1.Thumbnail.ext)
}
inline void Thumbnail::set_ext(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ext_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:sagittarius.media.v1.Thumbnail.ext)
}
inline void Thumbnail::set_ext(const char* value,
    size_t size) {
  
  ext_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:sagittarius.media.v1.Thumbnail.ext)
}
inline std::string* Thumbnail::mutable_ext() {
  
  // @@protoc_insertion_point(field_mutable:sagittarius.media.v1.Thumbnail.ext)
  return ext_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* Thumbnail::release_ext() {
  // @@protoc_insertion_point(field_release:sagittarius.media.v1.Thumbnail.ext)
  
  return ext_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Thumbnail::set_allocated_ext(std::string* ext) {
  if (ext != nullptr) {
    
  } else {
    
  }
  ext_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ext,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:sagittarius.media.v1.Thumbnail.ext)
}
inline std::string* Thumbnail::unsafe_arena_release_ext() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sagittarius.media.v1.Thumbnail.ext)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return ext_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Thumbnail::unsafe_arena_set_allocated_ext(
    std::string* ext) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (ext != nullptr) {
    
  } else {
    
  }
  ext_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ext, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sagittarius.media.v1.Thumbnail.ext)
}

// bytes payload = 3;
inline void Thumbnail::clear_payload() {
  payload_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& Thumbnail::payload() const {
  // @@protoc_insertion_point(field_get:sagittarius.media.v1.Thumbnail.payload)
  return payload_.Get();
}
inline void Thumbnail::set_payload(const std::string& value) {
  
  payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:sagittarius.media.v1.Thumbnail.payload)
}
inline void Thumbnail::set_payload(std::string&& value) {
  
  payload_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:sagittarius.media.v1.Thumbnail.payload)
}
inline void Thumbnail::set_payload(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:sagittarius.media.v1.Thumbnail.payload)
}
inline void Thumbnail::set_payload(const void* value,
    size_t size) {
  
  payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:sagittarius.media.v1.Thumbnail.payload)
}
inline std::string* Thumbnail::mutable_payload() {
  
  // @@protoc_insertion_point(field_mutable:sagittarius.media.v1.Thumbnail.payload)
  return payload_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* Thumbnail::release_payload() {
  // @@protoc_insertion_point(field_release:sagittarius.media.v1.Thumbnail.payload)
  
  return payload_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Thumbnail::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    
  } else {
    
  }
  payload_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:sagittarius.media.v1.Thumbnail.payload)
}
inline std::string* Thumbnail::unsafe_arena_release_payload() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sagittarius.media.v1.Thumbnail.payload)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return payload_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Thumbnail::unsafe_arena_set_allocated_payload(
    std::string* payload) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (payload != nullptr) {
    
  } else {
    
  }
  payload_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      payload, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sagittarius.media.v1.Thumbnail.payload)
}

// -------------------------------------------------------------------

// ThumbnailResponse

// .google.rpc.Status error = 1;
inline bool ThumbnailResponse::has_error() const {
  return this != internal_default_instance() && error_ != nullptr;
}
inline const ::google::rpc::Status& ThumbnailResponse::error() const {
  const ::google::rpc::Status* p = error_;
  // @@protoc_insertion_point(field_get:sagittarius.media.v1.ThumbnailResponse.error)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::rpc::Status*>(
      &::google::rpc::_Status_default_instance_);
}
inline ::google::rpc::Status* ThumbnailResponse::release_error() {
  // @@protoc_insertion_point(field_release:sagittarius.media.v1.ThumbnailResponse.error)
  
  ::google::rpc::Status* temp = error_;
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  error_ = nullptr;
  return temp;
}
inline ::google::rpc::Status* ThumbnailResponse::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sagittarius.media.v1.ThumbnailResponse.error)
  
  ::google::rpc::Status* temp = error_;
  error_ = nullptr;
  return temp;
}
inline ::google::rpc::Status* ThumbnailResponse::mutable_error() {
  
  if (error_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::rpc::Status>(GetArenaNoVirtual());
    error_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sagittarius.media.v1.ThumbnailResponse.error)
  return error_;
}
inline void ThumbnailResponse::set_allocated_error(::google::rpc::Status* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_);
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    
  } else {
    
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:sagittarius.media.v1.ThumbnailResponse.error)
}

// repeated .sagittarius.media.v1.Thumbnail thumbnails = 2;
inline int ThumbnailResponse::thumbnails_size() const {
  return thumbnails_.size();
}
inline void ThumbnailResponse::clear_thumbnails() {
  thumbnails_.Clear();
}
inline ::sagittarius::media::v1::Thumbnail* ThumbnailResponse::mutable_thumbnails(int index) {
  // @@protoc_insertion_point(field_mutable:sagittarius.media.v1.ThumbnailResponse.thumbnails)
  return thumbnails_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sagittarius::media::v1::Thumbnail >*
ThumbnailResponse::mutable_thumbnails() {
  // @@protoc_insertion_point(field_mutable_list:sagittarius.media.v1.ThumbnailResponse.thumbnails)
  return &thumbnails_;
}
inline const ::sagittarius::media::v1::Thumbnail& ThumbnailResponse::thumbnails(int index) const {
  // @@protoc_insertion_point(field_get:sagittarius.media.v1.ThumbnailResponse.thumbnails)
  return thumbnails_.Get(index);
}
inline ::sagittarius::media::v1::Thumbnail* ThumbnailResponse::add_thumbnails() {
  // @@protoc_insertion_point(field_add:sagittarius.media.v1.ThumbnailResponse.thumbnails)
  return thumbnails_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sagittarius::media::v1::Thumbnail >&
ThumbnailResponse::thumbnails() const {
  // @@protoc_insertion_point(field_list:sagittarius.media.v1.ThumbnailResponse.thumbnails)
  return thumbnails_;
}

// -------------------------------------------------------------------

// UpdateThumbnailRequest

// string media_hash = 1;
inline void UpdateThumbnailRequest::clear_media_hash() {
  media_hash_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& UpdateThumbnailRequest::media_hash() const {
  // @@protoc_insertion_point(field_get:sagittarius.media.v1.UpdateThumbnailRequest.media_hash)
  return media_hash_.Get();
}
inline void UpdateThumbnailRequest::set_media_hash(const std::string& value) {
  
  media_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:sagittarius.media.v1.UpdateThumbnailRequest.media_hash)
}
inline void UpdateThumbnailRequest::set_media_hash(std::string&& value) {
  
  media_hash_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:sagittarius.media.v1.UpdateThumbnailRequest.media_hash)
}
inline void UpdateThumbnailRequest::set_media_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  media_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:sagittarius.media.v1.UpdateThumbnailRequest.media_hash)
}
inline void UpdateThumbnailRequest::set_media_hash(const char* value,
    size_t size) {
  
  media_hash_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:sagittarius.media.v1.UpdateThumbnailRequest.media_hash)
}
inline std::string* UpdateThumbnailRequest::mutable_media_hash() {
  
  // @@protoc_insertion_point(field_mutable:sagittarius.media.v1.UpdateThumbnailRequest.media_hash)
  return media_hash_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* UpdateThumbnailRequest::release_media_hash() {
  // @@protoc_insertion_point(field_release:sagittarius.media.v1.UpdateThumbnailRequest.media_hash)
  
  return media_hash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UpdateThumbnailRequest::set_allocated_media_hash(std::string* media_hash) {
  if (media_hash != nullptr) {
    
  } else {
    
  }
  media_hash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), media_hash,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:sagittarius.media.v1.UpdateThumbnailRequest.media_hash)
}
inline std::string* UpdateThumbnailRequest::unsafe_arena_release_media_hash() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sagittarius.media.v1.UpdateThumbnailRequest.media_hash)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return media_hash_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UpdateThumbnailRequest::unsafe_arena_set_allocated_media_hash(
    std::string* media_hash) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (media_hash != nullptr) {
    
  } else {
    
  }
  media_hash_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      media_hash, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sagittarius.media.v1.UpdateThumbnailRequest.media_hash)
}

// repeated .sagittarius.media.v1.Thumbnail thumbnails = 2;
inline int UpdateThumbnailRequest::thumbnails_size() const {
  return thumbnails_.size();
}
inline void UpdateThumbnailRequest::clear_thumbnails() {
  thumbnails_.Clear();
}
inline ::sagittarius::media::v1::Thumbnail* UpdateThumbnailRequest::mutable_thumbnails(int index) {
  // @@protoc_insertion_point(field_mutable:sagittarius.media.v1.UpdateThumbnailRequest.thumbnails)
  return thumbnails_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sagittarius::media::v1::Thumbnail >*
UpdateThumbnailRequest::mutable_thumbnails() {
  // @@protoc_insertion_point(field_mutable_list:sagittarius.media.v1.UpdateThumbnailRequest.thumbnails)
  return &thumbnails_;
}
inline const ::sagittarius::media::v1::Thumbnail& UpdateThumbnailRequest::thumbnails(int index) const {
  // @@protoc_insertion_point(field_get:sagittarius.media.v1.UpdateThumbnailRequest.thumbnails)
  return thumbnails_.Get(index);
}
inline ::sagittarius::media::v1::Thumbnail* UpdateThumbnailRequest::add_thumbnails() {
  // @@protoc_insertion_point(field_add:sagittarius.media.v1.UpdateThumbnailRequest.thumbnails)
  return thumbnails_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sagittarius::media::v1::Thumbnail >&
UpdateThumbnailRequest::thumbnails() const {
  // @@protoc_insertion_point(field_list:sagittarius.media.v1.UpdateThumbnailRequest.thumbnails)
  return thumbnails_;
}

// string token = 3;
inline void UpdateThumbnailRequest::clear_token() {
  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& UpdateThumbnailRequest::token() const {
  // @@protoc_insertion_point(field_get:sagittarius.media.v1.UpdateThumbnailRequest.token)
  return token_.Get();
}
inline void UpdateThumbnailRequest::set_token(const std::string& value) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:sagittarius.media.v1.UpdateThumbnailRequest.token)
}
inline void UpdateThumbnailRequest::set_token(std::string&& value) {
  
  token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:sagittarius.media.v1.UpdateThumbnailRequest.token)
}
inline void UpdateThumbnailRequest::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:sagittarius.media.v1.UpdateThumbnailRequest.token)
}
inline void UpdateThumbnailRequest::set_token(const char* value,
    size_t size) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:sagittarius.media.v1.UpdateThumbnailRequest.token)
}
inline std::string* UpdateThumbnailRequest::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:sagittarius.media.v1.UpdateThumbnailRequest.token)
  return token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* UpdateThumbnailRequest::release_token() {
  // @@protoc_insertion_point(field_release:sagittarius.media.v1.UpdateThumbnailRequest.token)
  
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UpdateThumbnailRequest::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:sagittarius.media.v1.UpdateThumbnailRequest.token)
}
inline std::string* UpdateThumbnailRequest::unsafe_arena_release_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:sagittarius.media.v1.UpdateThumbnailRequest.token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return token_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UpdateThumbnailRequest::unsafe_arena_set_allocated_token(
    std::string* token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (token != nullptr) {
    
  } else {
    
  }
  token_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sagittarius.media.v1.UpdateThumbnailRequest.token)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace media
}  // namespace sagittarius

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::sagittarius::media::v1::Info_TrackInfo_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sagittarius::media::v1::Info_TrackInfo_Type>() {
  return ::sagittarius::media::v1::Info_TrackInfo_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_media_2fv1_2fmedia_2eproto
