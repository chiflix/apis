// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: media/v1/media.proto
// Original file comments:
// Copyright 2018 Sagittarius LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_media_2fv1_2fmedia_2eproto__INCLUDED
#define GRPC_media_2fv1_2fmedia_2eproto__INCLUDED

#include "media/v1/media.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class CompletionQueue;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc

namespace sagittarius {
namespace media {
namespace v1 {

// Service that implements Sagittarius Media API
class Media final {
 public:
  static constexpr char const* service_full_name() {
    return "sagittarius.media.v1.Media";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    //
    virtual ::grpc::Status GetInfo(::grpc::ClientContext* context, const ::sagittarius::media::v1::GetInfoRequest& request, ::sagittarius::media::v1::Info* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sagittarius::media::v1::Info>> AsyncGetInfo(::grpc::ClientContext* context, const ::sagittarius::media::v1::GetInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sagittarius::media::v1::Info>>(AsyncGetInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sagittarius::media::v1::Info>> PrepareAsyncGetInfo(::grpc::ClientContext* context, const ::sagittarius::media::v1::GetInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sagittarius::media::v1::Info>>(PrepareAsyncGetInfoRaw(context, request, cq));
    }
    //
    virtual ::grpc::Status UpdateInfo(::grpc::ClientContext* context, const ::sagittarius::media::v1::UpdateInfoRequest& request, ::sagittarius::media::v1::Info* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sagittarius::media::v1::Info>> AsyncUpdateInfo(::grpc::ClientContext* context, const ::sagittarius::media::v1::UpdateInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sagittarius::media::v1::Info>>(AsyncUpdateInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sagittarius::media::v1::Info>> PrepareAsyncUpdateInfo(::grpc::ClientContext* context, const ::sagittarius::media::v1::UpdateInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sagittarius::media::v1::Info>>(PrepareAsyncUpdateInfoRaw(context, request, cq));
    }
    // Query obtainable thumbnails time range and unavailable ones by media identity
    virtual ::grpc::Status GetThumbnailTimeRanges(::grpc::ClientContext* context, const ::sagittarius::media::v1::ThumbnailTimeRangesRequest& request, ::sagittarius::media::v1::ThumbnailTimeRangesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sagittarius::media::v1::ThumbnailTimeRangesResponse>> AsyncGetThumbnailTimeRanges(::grpc::ClientContext* context, const ::sagittarius::media::v1::ThumbnailTimeRangesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sagittarius::media::v1::ThumbnailTimeRangesResponse>>(AsyncGetThumbnailTimeRangesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sagittarius::media::v1::ThumbnailTimeRangesResponse>> PrepareAsyncGetThumbnailTimeRanges(::grpc::ClientContext* context, const ::sagittarius::media::v1::ThumbnailTimeRangesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sagittarius::media::v1::ThumbnailTimeRangesResponse>>(PrepareAsyncGetThumbnailTimeRangesRaw(context, request, cq));
    }
    // Get thumbnail by timestamps
    virtual ::grpc::Status GetThumbnail(::grpc::ClientContext* context, const ::sagittarius::media::v1::ThumbnailRequest& request, ::sagittarius::media::v1::ThumbnailResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sagittarius::media::v1::ThumbnailResponse>> AsyncGetThumbnail(::grpc::ClientContext* context, const ::sagittarius::media::v1::ThumbnailRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sagittarius::media::v1::ThumbnailResponse>>(AsyncGetThumbnailRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sagittarius::media::v1::ThumbnailResponse>> PrepareAsyncGetThumbnail(::grpc::ClientContext* context, const ::sagittarius::media::v1::ThumbnailRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sagittarius::media::v1::ThumbnailResponse>>(PrepareAsyncGetThumbnailRaw(context, request, cq));
    }
    // Update thumbnail by timestamps
    virtual ::grpc::Status UpdateThumbnail(::grpc::ClientContext* context, const ::sagittarius::media::v1::UpdateThumbnailRequest& request, ::google::rpc::Status* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::rpc::Status>> AsyncUpdateThumbnail(::grpc::ClientContext* context, const ::sagittarius::media::v1::UpdateThumbnailRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::rpc::Status>>(AsyncUpdateThumbnailRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::rpc::Status>> PrepareAsyncUpdateThumbnail(::grpc::ClientContext* context, const ::sagittarius::media::v1::UpdateThumbnailRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::rpc::Status>>(PrepareAsyncUpdateThumbnailRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      //
      virtual void GetInfo(::grpc::ClientContext* context, const ::sagittarius::media::v1::GetInfoRequest* request, ::sagittarius::media::v1::Info* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sagittarius::media::v1::Info* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetInfo(::grpc::ClientContext* context, const ::sagittarius::media::v1::GetInfoRequest* request, ::sagittarius::media::v1::Info* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sagittarius::media::v1::Info* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      //
      virtual void UpdateInfo(::grpc::ClientContext* context, const ::sagittarius::media::v1::UpdateInfoRequest* request, ::sagittarius::media::v1::Info* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sagittarius::media::v1::Info* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateInfo(::grpc::ClientContext* context, const ::sagittarius::media::v1::UpdateInfoRequest* request, ::sagittarius::media::v1::Info* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void UpdateInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sagittarius::media::v1::Info* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Query obtainable thumbnails time range and unavailable ones by media identity
      virtual void GetThumbnailTimeRanges(::grpc::ClientContext* context, const ::sagittarius::media::v1::ThumbnailTimeRangesRequest* request, ::sagittarius::media::v1::ThumbnailTimeRangesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetThumbnailTimeRanges(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sagittarius::media::v1::ThumbnailTimeRangesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetThumbnailTimeRanges(::grpc::ClientContext* context, const ::sagittarius::media::v1::ThumbnailTimeRangesRequest* request, ::sagittarius::media::v1::ThumbnailTimeRangesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetThumbnailTimeRanges(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sagittarius::media::v1::ThumbnailTimeRangesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Get thumbnail by timestamps
      virtual void GetThumbnail(::grpc::ClientContext* context, const ::sagittarius::media::v1::ThumbnailRequest* request, ::sagittarius::media::v1::ThumbnailResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetThumbnail(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sagittarius::media::v1::ThumbnailResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetThumbnail(::grpc::ClientContext* context, const ::sagittarius::media::v1::ThumbnailRequest* request, ::sagittarius::media::v1::ThumbnailResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetThumbnail(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sagittarius::media::v1::ThumbnailResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Update thumbnail by timestamps
      virtual void UpdateThumbnail(::grpc::ClientContext* context, const ::sagittarius::media::v1::UpdateThumbnailRequest* request, ::google::rpc::Status* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateThumbnail(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::rpc::Status* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateThumbnail(::grpc::ClientContext* context, const ::sagittarius::media::v1::UpdateThumbnailRequest* request, ::google::rpc::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void UpdateThumbnail(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::rpc::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sagittarius::media::v1::Info>* AsyncGetInfoRaw(::grpc::ClientContext* context, const ::sagittarius::media::v1::GetInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sagittarius::media::v1::Info>* PrepareAsyncGetInfoRaw(::grpc::ClientContext* context, const ::sagittarius::media::v1::GetInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sagittarius::media::v1::Info>* AsyncUpdateInfoRaw(::grpc::ClientContext* context, const ::sagittarius::media::v1::UpdateInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sagittarius::media::v1::Info>* PrepareAsyncUpdateInfoRaw(::grpc::ClientContext* context, const ::sagittarius::media::v1::UpdateInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sagittarius::media::v1::ThumbnailTimeRangesResponse>* AsyncGetThumbnailTimeRangesRaw(::grpc::ClientContext* context, const ::sagittarius::media::v1::ThumbnailTimeRangesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sagittarius::media::v1::ThumbnailTimeRangesResponse>* PrepareAsyncGetThumbnailTimeRangesRaw(::grpc::ClientContext* context, const ::sagittarius::media::v1::ThumbnailTimeRangesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sagittarius::media::v1::ThumbnailResponse>* AsyncGetThumbnailRaw(::grpc::ClientContext* context, const ::sagittarius::media::v1::ThumbnailRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sagittarius::media::v1::ThumbnailResponse>* PrepareAsyncGetThumbnailRaw(::grpc::ClientContext* context, const ::sagittarius::media::v1::ThumbnailRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::rpc::Status>* AsyncUpdateThumbnailRaw(::grpc::ClientContext* context, const ::sagittarius::media::v1::UpdateThumbnailRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::rpc::Status>* PrepareAsyncUpdateThumbnailRaw(::grpc::ClientContext* context, const ::sagittarius::media::v1::UpdateThumbnailRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status GetInfo(::grpc::ClientContext* context, const ::sagittarius::media::v1::GetInfoRequest& request, ::sagittarius::media::v1::Info* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sagittarius::media::v1::Info>> AsyncGetInfo(::grpc::ClientContext* context, const ::sagittarius::media::v1::GetInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sagittarius::media::v1::Info>>(AsyncGetInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sagittarius::media::v1::Info>> PrepareAsyncGetInfo(::grpc::ClientContext* context, const ::sagittarius::media::v1::GetInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sagittarius::media::v1::Info>>(PrepareAsyncGetInfoRaw(context, request, cq));
    }
    ::grpc::Status UpdateInfo(::grpc::ClientContext* context, const ::sagittarius::media::v1::UpdateInfoRequest& request, ::sagittarius::media::v1::Info* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sagittarius::media::v1::Info>> AsyncUpdateInfo(::grpc::ClientContext* context, const ::sagittarius::media::v1::UpdateInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sagittarius::media::v1::Info>>(AsyncUpdateInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sagittarius::media::v1::Info>> PrepareAsyncUpdateInfo(::grpc::ClientContext* context, const ::sagittarius::media::v1::UpdateInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sagittarius::media::v1::Info>>(PrepareAsyncUpdateInfoRaw(context, request, cq));
    }
    ::grpc::Status GetThumbnailTimeRanges(::grpc::ClientContext* context, const ::sagittarius::media::v1::ThumbnailTimeRangesRequest& request, ::sagittarius::media::v1::ThumbnailTimeRangesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sagittarius::media::v1::ThumbnailTimeRangesResponse>> AsyncGetThumbnailTimeRanges(::grpc::ClientContext* context, const ::sagittarius::media::v1::ThumbnailTimeRangesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sagittarius::media::v1::ThumbnailTimeRangesResponse>>(AsyncGetThumbnailTimeRangesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sagittarius::media::v1::ThumbnailTimeRangesResponse>> PrepareAsyncGetThumbnailTimeRanges(::grpc::ClientContext* context, const ::sagittarius::media::v1::ThumbnailTimeRangesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sagittarius::media::v1::ThumbnailTimeRangesResponse>>(PrepareAsyncGetThumbnailTimeRangesRaw(context, request, cq));
    }
    ::grpc::Status GetThumbnail(::grpc::ClientContext* context, const ::sagittarius::media::v1::ThumbnailRequest& request, ::sagittarius::media::v1::ThumbnailResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sagittarius::media::v1::ThumbnailResponse>> AsyncGetThumbnail(::grpc::ClientContext* context, const ::sagittarius::media::v1::ThumbnailRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sagittarius::media::v1::ThumbnailResponse>>(AsyncGetThumbnailRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sagittarius::media::v1::ThumbnailResponse>> PrepareAsyncGetThumbnail(::grpc::ClientContext* context, const ::sagittarius::media::v1::ThumbnailRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sagittarius::media::v1::ThumbnailResponse>>(PrepareAsyncGetThumbnailRaw(context, request, cq));
    }
    ::grpc::Status UpdateThumbnail(::grpc::ClientContext* context, const ::sagittarius::media::v1::UpdateThumbnailRequest& request, ::google::rpc::Status* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::rpc::Status>> AsyncUpdateThumbnail(::grpc::ClientContext* context, const ::sagittarius::media::v1::UpdateThumbnailRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::rpc::Status>>(AsyncUpdateThumbnailRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::rpc::Status>> PrepareAsyncUpdateThumbnail(::grpc::ClientContext* context, const ::sagittarius::media::v1::UpdateThumbnailRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::rpc::Status>>(PrepareAsyncUpdateThumbnailRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void GetInfo(::grpc::ClientContext* context, const ::sagittarius::media::v1::GetInfoRequest* request, ::sagittarius::media::v1::Info* response, std::function<void(::grpc::Status)>) override;
      void GetInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sagittarius::media::v1::Info* response, std::function<void(::grpc::Status)>) override;
      void GetInfo(::grpc::ClientContext* context, const ::sagittarius::media::v1::GetInfoRequest* request, ::sagittarius::media::v1::Info* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sagittarius::media::v1::Info* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void UpdateInfo(::grpc::ClientContext* context, const ::sagittarius::media::v1::UpdateInfoRequest* request, ::sagittarius::media::v1::Info* response, std::function<void(::grpc::Status)>) override;
      void UpdateInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sagittarius::media::v1::Info* response, std::function<void(::grpc::Status)>) override;
      void UpdateInfo(::grpc::ClientContext* context, const ::sagittarius::media::v1::UpdateInfoRequest* request, ::sagittarius::media::v1::Info* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void UpdateInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sagittarius::media::v1::Info* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetThumbnailTimeRanges(::grpc::ClientContext* context, const ::sagittarius::media::v1::ThumbnailTimeRangesRequest* request, ::sagittarius::media::v1::ThumbnailTimeRangesResponse* response, std::function<void(::grpc::Status)>) override;
      void GetThumbnailTimeRanges(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sagittarius::media::v1::ThumbnailTimeRangesResponse* response, std::function<void(::grpc::Status)>) override;
      void GetThumbnailTimeRanges(::grpc::ClientContext* context, const ::sagittarius::media::v1::ThumbnailTimeRangesRequest* request, ::sagittarius::media::v1::ThumbnailTimeRangesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetThumbnailTimeRanges(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sagittarius::media::v1::ThumbnailTimeRangesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetThumbnail(::grpc::ClientContext* context, const ::sagittarius::media::v1::ThumbnailRequest* request, ::sagittarius::media::v1::ThumbnailResponse* response, std::function<void(::grpc::Status)>) override;
      void GetThumbnail(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sagittarius::media::v1::ThumbnailResponse* response, std::function<void(::grpc::Status)>) override;
      void GetThumbnail(::grpc::ClientContext* context, const ::sagittarius::media::v1::ThumbnailRequest* request, ::sagittarius::media::v1::ThumbnailResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetThumbnail(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sagittarius::media::v1::ThumbnailResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void UpdateThumbnail(::grpc::ClientContext* context, const ::sagittarius::media::v1::UpdateThumbnailRequest* request, ::google::rpc::Status* response, std::function<void(::grpc::Status)>) override;
      void UpdateThumbnail(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::rpc::Status* response, std::function<void(::grpc::Status)>) override;
      void UpdateThumbnail(::grpc::ClientContext* context, const ::sagittarius::media::v1::UpdateThumbnailRequest* request, ::google::rpc::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void UpdateThumbnail(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::rpc::Status* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::sagittarius::media::v1::Info>* AsyncGetInfoRaw(::grpc::ClientContext* context, const ::sagittarius::media::v1::GetInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sagittarius::media::v1::Info>* PrepareAsyncGetInfoRaw(::grpc::ClientContext* context, const ::sagittarius::media::v1::GetInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sagittarius::media::v1::Info>* AsyncUpdateInfoRaw(::grpc::ClientContext* context, const ::sagittarius::media::v1::UpdateInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sagittarius::media::v1::Info>* PrepareAsyncUpdateInfoRaw(::grpc::ClientContext* context, const ::sagittarius::media::v1::UpdateInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sagittarius::media::v1::ThumbnailTimeRangesResponse>* AsyncGetThumbnailTimeRangesRaw(::grpc::ClientContext* context, const ::sagittarius::media::v1::ThumbnailTimeRangesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sagittarius::media::v1::ThumbnailTimeRangesResponse>* PrepareAsyncGetThumbnailTimeRangesRaw(::grpc::ClientContext* context, const ::sagittarius::media::v1::ThumbnailTimeRangesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sagittarius::media::v1::ThumbnailResponse>* AsyncGetThumbnailRaw(::grpc::ClientContext* context, const ::sagittarius::media::v1::ThumbnailRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sagittarius::media::v1::ThumbnailResponse>* PrepareAsyncGetThumbnailRaw(::grpc::ClientContext* context, const ::sagittarius::media::v1::ThumbnailRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::rpc::Status>* AsyncUpdateThumbnailRaw(::grpc::ClientContext* context, const ::sagittarius::media::v1::UpdateThumbnailRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::rpc::Status>* PrepareAsyncUpdateThumbnailRaw(::grpc::ClientContext* context, const ::sagittarius::media::v1::UpdateThumbnailRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_GetThumbnailTimeRanges_;
    const ::grpc::internal::RpcMethod rpcmethod_GetThumbnail_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateThumbnail_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    //
    virtual ::grpc::Status GetInfo(::grpc::ServerContext* context, const ::sagittarius::media::v1::GetInfoRequest* request, ::sagittarius::media::v1::Info* response);
    //
    virtual ::grpc::Status UpdateInfo(::grpc::ServerContext* context, const ::sagittarius::media::v1::UpdateInfoRequest* request, ::sagittarius::media::v1::Info* response);
    // Query obtainable thumbnails time range and unavailable ones by media identity
    virtual ::grpc::Status GetThumbnailTimeRanges(::grpc::ServerContext* context, const ::sagittarius::media::v1::ThumbnailTimeRangesRequest* request, ::sagittarius::media::v1::ThumbnailTimeRangesResponse* response);
    // Get thumbnail by timestamps
    virtual ::grpc::Status GetThumbnail(::grpc::ServerContext* context, const ::sagittarius::media::v1::ThumbnailRequest* request, ::sagittarius::media::v1::ThumbnailResponse* response);
    // Update thumbnail by timestamps
    virtual ::grpc::Status UpdateThumbnail(::grpc::ServerContext* context, const ::sagittarius::media::v1::UpdateThumbnailRequest* request, ::google::rpc::Status* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetInfo() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInfo(::grpc::ServerContext* /*context*/, const ::sagittarius::media::v1::GetInfoRequest* /*request*/, ::sagittarius::media::v1::Info* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetInfo(::grpc::ServerContext* context, ::sagittarius::media::v1::GetInfoRequest* request, ::grpc::ServerAsyncResponseWriter< ::sagittarius::media::v1::Info>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateInfo() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_UpdateInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateInfo(::grpc::ServerContext* /*context*/, const ::sagittarius::media::v1::UpdateInfoRequest* /*request*/, ::sagittarius::media::v1::Info* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateInfo(::grpc::ServerContext* context, ::sagittarius::media::v1::UpdateInfoRequest* request, ::grpc::ServerAsyncResponseWriter< ::sagittarius::media::v1::Info>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetThumbnailTimeRanges : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetThumbnailTimeRanges() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetThumbnailTimeRanges() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetThumbnailTimeRanges(::grpc::ServerContext* /*context*/, const ::sagittarius::media::v1::ThumbnailTimeRangesRequest* /*request*/, ::sagittarius::media::v1::ThumbnailTimeRangesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetThumbnailTimeRanges(::grpc::ServerContext* context, ::sagittarius::media::v1::ThumbnailTimeRangesRequest* request, ::grpc::ServerAsyncResponseWriter< ::sagittarius::media::v1::ThumbnailTimeRangesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetThumbnail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetThumbnail() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetThumbnail() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetThumbnail(::grpc::ServerContext* /*context*/, const ::sagittarius::media::v1::ThumbnailRequest* /*request*/, ::sagittarius::media::v1::ThumbnailResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetThumbnail(::grpc::ServerContext* context, ::sagittarius::media::v1::ThumbnailRequest* request, ::grpc::ServerAsyncResponseWriter< ::sagittarius::media::v1::ThumbnailResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateThumbnail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateThumbnail() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_UpdateThumbnail() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateThumbnail(::grpc::ServerContext* /*context*/, const ::sagittarius::media::v1::UpdateThumbnailRequest* /*request*/, ::google::rpc::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateThumbnail(::grpc::ServerContext* context, ::sagittarius::media::v1::UpdateThumbnailRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::rpc::Status>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetInfo<WithAsyncMethod_UpdateInfo<WithAsyncMethod_GetThumbnailTimeRanges<WithAsyncMethod_GetThumbnail<WithAsyncMethod_UpdateThumbnail<Service > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetInfo() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::sagittarius::media::v1::GetInfoRequest, ::sagittarius::media::v1::Info>(
          [this](::grpc::ServerContext* context,
                 const ::sagittarius::media::v1::GetInfoRequest* request,
                 ::sagittarius::media::v1::Info* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetInfo(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GetInfo(
        ::grpc::experimental::MessageAllocator< ::sagittarius::media::v1::GetInfoRequest, ::sagittarius::media::v1::Info>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::sagittarius::media::v1::GetInfoRequest, ::sagittarius::media::v1::Info>*>(
          ::grpc::Service::experimental().GetHandler(0))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInfo(::grpc::ServerContext* /*context*/, const ::sagittarius::media::v1::GetInfoRequest* /*request*/, ::sagittarius::media::v1::Info* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetInfo(::grpc::ServerContext* /*context*/, const ::sagittarius::media::v1::GetInfoRequest* /*request*/, ::sagittarius::media::v1::Info* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UpdateInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_UpdateInfo() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::sagittarius::media::v1::UpdateInfoRequest, ::sagittarius::media::v1::Info>(
          [this](::grpc::ServerContext* context,
                 const ::sagittarius::media::v1::UpdateInfoRequest* request,
                 ::sagittarius::media::v1::Info* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->UpdateInfo(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_UpdateInfo(
        ::grpc::experimental::MessageAllocator< ::sagittarius::media::v1::UpdateInfoRequest, ::sagittarius::media::v1::Info>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::sagittarius::media::v1::UpdateInfoRequest, ::sagittarius::media::v1::Info>*>(
          ::grpc::Service::experimental().GetHandler(1))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_UpdateInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateInfo(::grpc::ServerContext* /*context*/, const ::sagittarius::media::v1::UpdateInfoRequest* /*request*/, ::sagittarius::media::v1::Info* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void UpdateInfo(::grpc::ServerContext* /*context*/, const ::sagittarius::media::v1::UpdateInfoRequest* /*request*/, ::sagittarius::media::v1::Info* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetThumbnailTimeRanges : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetThumbnailTimeRanges() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::sagittarius::media::v1::ThumbnailTimeRangesRequest, ::sagittarius::media::v1::ThumbnailTimeRangesResponse>(
          [this](::grpc::ServerContext* context,
                 const ::sagittarius::media::v1::ThumbnailTimeRangesRequest* request,
                 ::sagittarius::media::v1::ThumbnailTimeRangesResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetThumbnailTimeRanges(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GetThumbnailTimeRanges(
        ::grpc::experimental::MessageAllocator< ::sagittarius::media::v1::ThumbnailTimeRangesRequest, ::sagittarius::media::v1::ThumbnailTimeRangesResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::sagittarius::media::v1::ThumbnailTimeRangesRequest, ::sagittarius::media::v1::ThumbnailTimeRangesResponse>*>(
          ::grpc::Service::experimental().GetHandler(2))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetThumbnailTimeRanges() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetThumbnailTimeRanges(::grpc::ServerContext* /*context*/, const ::sagittarius::media::v1::ThumbnailTimeRangesRequest* /*request*/, ::sagittarius::media::v1::ThumbnailTimeRangesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetThumbnailTimeRanges(::grpc::ServerContext* /*context*/, const ::sagittarius::media::v1::ThumbnailTimeRangesRequest* /*request*/, ::sagittarius::media::v1::ThumbnailTimeRangesResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetThumbnail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetThumbnail() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::sagittarius::media::v1::ThumbnailRequest, ::sagittarius::media::v1::ThumbnailResponse>(
          [this](::grpc::ServerContext* context,
                 const ::sagittarius::media::v1::ThumbnailRequest* request,
                 ::sagittarius::media::v1::ThumbnailResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetThumbnail(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GetThumbnail(
        ::grpc::experimental::MessageAllocator< ::sagittarius::media::v1::ThumbnailRequest, ::sagittarius::media::v1::ThumbnailResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::sagittarius::media::v1::ThumbnailRequest, ::sagittarius::media::v1::ThumbnailResponse>*>(
          ::grpc::Service::experimental().GetHandler(3))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetThumbnail() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetThumbnail(::grpc::ServerContext* /*context*/, const ::sagittarius::media::v1::ThumbnailRequest* /*request*/, ::sagittarius::media::v1::ThumbnailResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetThumbnail(::grpc::ServerContext* /*context*/, const ::sagittarius::media::v1::ThumbnailRequest* /*request*/, ::sagittarius::media::v1::ThumbnailResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UpdateThumbnail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_UpdateThumbnail() {
      ::grpc::Service::experimental().MarkMethodCallback(4,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::sagittarius::media::v1::UpdateThumbnailRequest, ::google::rpc::Status>(
          [this](::grpc::ServerContext* context,
                 const ::sagittarius::media::v1::UpdateThumbnailRequest* request,
                 ::google::rpc::Status* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->UpdateThumbnail(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_UpdateThumbnail(
        ::grpc::experimental::MessageAllocator< ::sagittarius::media::v1::UpdateThumbnailRequest, ::google::rpc::Status>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::sagittarius::media::v1::UpdateThumbnailRequest, ::google::rpc::Status>*>(
          ::grpc::Service::experimental().GetHandler(4))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_UpdateThumbnail() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateThumbnail(::grpc::ServerContext* /*context*/, const ::sagittarius::media::v1::UpdateThumbnailRequest* /*request*/, ::google::rpc::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void UpdateThumbnail(::grpc::ServerContext* /*context*/, const ::sagittarius::media::v1::UpdateThumbnailRequest* /*request*/, ::google::rpc::Status* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_GetInfo<ExperimentalWithCallbackMethod_UpdateInfo<ExperimentalWithCallbackMethod_GetThumbnailTimeRanges<ExperimentalWithCallbackMethod_GetThumbnail<ExperimentalWithCallbackMethod_UpdateThumbnail<Service > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetInfo() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInfo(::grpc::ServerContext* /*context*/, const ::sagittarius::media::v1::GetInfoRequest* /*request*/, ::sagittarius::media::v1::Info* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateInfo() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_UpdateInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateInfo(::grpc::ServerContext* /*context*/, const ::sagittarius::media::v1::UpdateInfoRequest* /*request*/, ::sagittarius::media::v1::Info* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetThumbnailTimeRanges : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetThumbnailTimeRanges() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetThumbnailTimeRanges() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetThumbnailTimeRanges(::grpc::ServerContext* /*context*/, const ::sagittarius::media::v1::ThumbnailTimeRangesRequest* /*request*/, ::sagittarius::media::v1::ThumbnailTimeRangesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetThumbnail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetThumbnail() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetThumbnail() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetThumbnail(::grpc::ServerContext* /*context*/, const ::sagittarius::media::v1::ThumbnailRequest* /*request*/, ::sagittarius::media::v1::ThumbnailResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateThumbnail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateThumbnail() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_UpdateThumbnail() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateThumbnail(::grpc::ServerContext* /*context*/, const ::sagittarius::media::v1::UpdateThumbnailRequest* /*request*/, ::google::rpc::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetInfo() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInfo(::grpc::ServerContext* /*context*/, const ::sagittarius::media::v1::GetInfoRequest* /*request*/, ::sagittarius::media::v1::Info* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateInfo() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_UpdateInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateInfo(::grpc::ServerContext* /*context*/, const ::sagittarius::media::v1::UpdateInfoRequest* /*request*/, ::sagittarius::media::v1::Info* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetThumbnailTimeRanges : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetThumbnailTimeRanges() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetThumbnailTimeRanges() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetThumbnailTimeRanges(::grpc::ServerContext* /*context*/, const ::sagittarius::media::v1::ThumbnailTimeRangesRequest* /*request*/, ::sagittarius::media::v1::ThumbnailTimeRangesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetThumbnailTimeRanges(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetThumbnail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetThumbnail() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetThumbnail() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetThumbnail(::grpc::ServerContext* /*context*/, const ::sagittarius::media::v1::ThumbnailRequest* /*request*/, ::sagittarius::media::v1::ThumbnailResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetThumbnail(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateThumbnail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateThumbnail() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_UpdateThumbnail() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateThumbnail(::grpc::ServerContext* /*context*/, const ::sagittarius::media::v1::UpdateThumbnailRequest* /*request*/, ::google::rpc::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateThumbnail(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetInfo() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetInfo(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetInfo(::grpc::ServerContext* /*context*/, const ::sagittarius::media::v1::GetInfoRequest* /*request*/, ::sagittarius::media::v1::Info* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetInfo(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UpdateInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_UpdateInfo() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->UpdateInfo(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_UpdateInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateInfo(::grpc::ServerContext* /*context*/, const ::sagittarius::media::v1::UpdateInfoRequest* /*request*/, ::sagittarius::media::v1::Info* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void UpdateInfo(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetThumbnailTimeRanges : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetThumbnailTimeRanges() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetThumbnailTimeRanges(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetThumbnailTimeRanges() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetThumbnailTimeRanges(::grpc::ServerContext* /*context*/, const ::sagittarius::media::v1::ThumbnailTimeRangesRequest* /*request*/, ::sagittarius::media::v1::ThumbnailTimeRangesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetThumbnailTimeRanges(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetThumbnail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetThumbnail() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetThumbnail(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetThumbnail() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetThumbnail(::grpc::ServerContext* /*context*/, const ::sagittarius::media::v1::ThumbnailRequest* /*request*/, ::sagittarius::media::v1::ThumbnailResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetThumbnail(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UpdateThumbnail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_UpdateThumbnail() {
      ::grpc::Service::experimental().MarkMethodRawCallback(4,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->UpdateThumbnail(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_UpdateThumbnail() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateThumbnail(::grpc::ServerContext* /*context*/, const ::sagittarius::media::v1::UpdateThumbnailRequest* /*request*/, ::google::rpc::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void UpdateThumbnail(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetInfo() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::sagittarius::media::v1::GetInfoRequest, ::sagittarius::media::v1::Info>(std::bind(&WithStreamedUnaryMethod_GetInfo<BaseClass>::StreamedGetInfo, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetInfo(::grpc::ServerContext* /*context*/, const ::sagittarius::media::v1::GetInfoRequest* /*request*/, ::sagittarius::media::v1::Info* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sagittarius::media::v1::GetInfoRequest,::sagittarius::media::v1::Info>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateInfo() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::sagittarius::media::v1::UpdateInfoRequest, ::sagittarius::media::v1::Info>(std::bind(&WithStreamedUnaryMethod_UpdateInfo<BaseClass>::StreamedUpdateInfo, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdateInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateInfo(::grpc::ServerContext* /*context*/, const ::sagittarius::media::v1::UpdateInfoRequest* /*request*/, ::sagittarius::media::v1::Info* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sagittarius::media::v1::UpdateInfoRequest,::sagittarius::media::v1::Info>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetThumbnailTimeRanges : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetThumbnailTimeRanges() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::sagittarius::media::v1::ThumbnailTimeRangesRequest, ::sagittarius::media::v1::ThumbnailTimeRangesResponse>(std::bind(&WithStreamedUnaryMethod_GetThumbnailTimeRanges<BaseClass>::StreamedGetThumbnailTimeRanges, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetThumbnailTimeRanges() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetThumbnailTimeRanges(::grpc::ServerContext* /*context*/, const ::sagittarius::media::v1::ThumbnailTimeRangesRequest* /*request*/, ::sagittarius::media::v1::ThumbnailTimeRangesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetThumbnailTimeRanges(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sagittarius::media::v1::ThumbnailTimeRangesRequest,::sagittarius::media::v1::ThumbnailTimeRangesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetThumbnail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetThumbnail() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::sagittarius::media::v1::ThumbnailRequest, ::sagittarius::media::v1::ThumbnailResponse>(std::bind(&WithStreamedUnaryMethod_GetThumbnail<BaseClass>::StreamedGetThumbnail, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetThumbnail() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetThumbnail(::grpc::ServerContext* /*context*/, const ::sagittarius::media::v1::ThumbnailRequest* /*request*/, ::sagittarius::media::v1::ThumbnailResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetThumbnail(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sagittarius::media::v1::ThumbnailRequest,::sagittarius::media::v1::ThumbnailResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateThumbnail : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateThumbnail() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::sagittarius::media::v1::UpdateThumbnailRequest, ::google::rpc::Status>(std::bind(&WithStreamedUnaryMethod_UpdateThumbnail<BaseClass>::StreamedUpdateThumbnail, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdateThumbnail() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateThumbnail(::grpc::ServerContext* /*context*/, const ::sagittarius::media::v1::UpdateThumbnailRequest* /*request*/, ::google::rpc::Status* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateThumbnail(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sagittarius::media::v1::UpdateThumbnailRequest,::google::rpc::Status>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetInfo<WithStreamedUnaryMethod_UpdateInfo<WithStreamedUnaryMethod_GetThumbnailTimeRanges<WithStreamedUnaryMethod_GetThumbnail<WithStreamedUnaryMethod_UpdateThumbnail<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetInfo<WithStreamedUnaryMethod_UpdateInfo<WithStreamedUnaryMethod_GetThumbnailTimeRanges<WithStreamedUnaryMethod_GetThumbnail<WithStreamedUnaryMethod_UpdateThumbnail<Service > > > > > StreamedService;
};

}  // namespace v1
}  // namespace media
}  // namespace sagittarius


#endif  // GRPC_media_2fv1_2fmedia_2eproto__INCLUDED
