// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/quota.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fquota_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fquota_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fapi_2fquota_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fapi_2fquota_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fapi_2fquota_2eproto;
namespace google {
namespace api {
class MetricRule;
class MetricRuleDefaultTypeInternal;
extern MetricRuleDefaultTypeInternal _MetricRule_default_instance_;
class MetricRule_MetricCostsEntry_DoNotUse;
class MetricRule_MetricCostsEntry_DoNotUseDefaultTypeInternal;
extern MetricRule_MetricCostsEntry_DoNotUseDefaultTypeInternal _MetricRule_MetricCostsEntry_DoNotUse_default_instance_;
class Quota;
class QuotaDefaultTypeInternal;
extern QuotaDefaultTypeInternal _Quota_default_instance_;
class QuotaLimit;
class QuotaLimitDefaultTypeInternal;
extern QuotaLimitDefaultTypeInternal _QuotaLimit_default_instance_;
class QuotaLimit_ValuesEntry_DoNotUse;
class QuotaLimit_ValuesEntry_DoNotUseDefaultTypeInternal;
extern QuotaLimit_ValuesEntry_DoNotUseDefaultTypeInternal _QuotaLimit_ValuesEntry_DoNotUse_default_instance_;
}  // namespace api
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::api::MetricRule* Arena::CreateMaybeMessage<::google::api::MetricRule>(Arena*);
template<> ::google::api::MetricRule_MetricCostsEntry_DoNotUse* Arena::CreateMaybeMessage<::google::api::MetricRule_MetricCostsEntry_DoNotUse>(Arena*);
template<> ::google::api::Quota* Arena::CreateMaybeMessage<::google::api::Quota>(Arena*);
template<> ::google::api::QuotaLimit* Arena::CreateMaybeMessage<::google::api::QuotaLimit>(Arena*);
template<> ::google::api::QuotaLimit_ValuesEntry_DoNotUse* Arena::CreateMaybeMessage<::google::api::QuotaLimit_ValuesEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace api {

// ===================================================================

class Quota :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.Quota) */ {
 public:
  Quota();
  virtual ~Quota();

  Quota(const Quota& from);
  Quota(Quota&& from) noexcept
    : Quota() {
    *this = ::std::move(from);
  }

  inline Quota& operator=(const Quota& from) {
    CopyFrom(from);
    return *this;
  }
  inline Quota& operator=(Quota&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Quota& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Quota* internal_default_instance() {
    return reinterpret_cast<const Quota*>(
               &_Quota_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Quota* other);
  friend void swap(Quota& a, Quota& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Quota* New() const final {
    return CreateMaybeMessage<Quota>(nullptr);
  }

  Quota* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Quota>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Quota& from);
  void MergeFrom(const Quota& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Quota* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.Quota";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fapi_2fquota_2eproto);
    return ::descriptor_table_google_2fapi_2fquota_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.api.QuotaLimit limits = 3;
  int limits_size() const;
  void clear_limits();
  static const int kLimitsFieldNumber = 3;
  ::google::api::QuotaLimit* mutable_limits(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::QuotaLimit >*
      mutable_limits();
  const ::google::api::QuotaLimit& limits(int index) const;
  ::google::api::QuotaLimit* add_limits();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::QuotaLimit >&
      limits() const;

  // repeated .google.api.MetricRule metric_rules = 4;
  int metric_rules_size() const;
  void clear_metric_rules();
  static const int kMetricRulesFieldNumber = 4;
  ::google::api::MetricRule* mutable_metric_rules(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::MetricRule >*
      mutable_metric_rules();
  const ::google::api::MetricRule& metric_rules(int index) const;
  ::google::api::MetricRule* add_metric_rules();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::MetricRule >&
      metric_rules() const;

  // @@protoc_insertion_point(class_scope:google.api.Quota)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::QuotaLimit > limits_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::MetricRule > metric_rules_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fapi_2fquota_2eproto;
};
// -------------------------------------------------------------------

class MetricRule_MetricCostsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MetricRule_MetricCostsEntry_DoNotUse, 
    std::string, ::PROTOBUF_NAMESPACE_ID::int64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MetricRule_MetricCostsEntry_DoNotUse, 
    std::string, ::PROTOBUF_NAMESPACE_ID::int64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    0 > SuperType;
  MetricRule_MetricCostsEntry_DoNotUse();
  MetricRule_MetricCostsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const MetricRule_MetricCostsEntry_DoNotUse& other);
  static const MetricRule_MetricCostsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const MetricRule_MetricCostsEntry_DoNotUse*>(&_MetricRule_MetricCostsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.api.MetricRule.MetricCostsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fapi_2fquota_2eproto);
    return ::descriptor_table_google_2fapi_2fquota_2eproto.file_level_metadata[1];
  }

  public:
};

// -------------------------------------------------------------------

class MetricRule :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.MetricRule) */ {
 public:
  MetricRule();
  virtual ~MetricRule();

  MetricRule(const MetricRule& from);
  MetricRule(MetricRule&& from) noexcept
    : MetricRule() {
    *this = ::std::move(from);
  }

  inline MetricRule& operator=(const MetricRule& from) {
    CopyFrom(from);
    return *this;
  }
  inline MetricRule& operator=(MetricRule&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MetricRule& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MetricRule* internal_default_instance() {
    return reinterpret_cast<const MetricRule*>(
               &_MetricRule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(MetricRule* other);
  friend void swap(MetricRule& a, MetricRule& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MetricRule* New() const final {
    return CreateMaybeMessage<MetricRule>(nullptr);
  }

  MetricRule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MetricRule>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MetricRule& from);
  void MergeFrom(const MetricRule& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MetricRule* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.MetricRule";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fapi_2fquota_2eproto);
    return ::descriptor_table_google_2fapi_2fquota_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, int64> metric_costs = 2;
  int metric_costs_size() const;
  void clear_metric_costs();
  static const int kMetricCostsFieldNumber = 2;
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >&
      metric_costs() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_metric_costs();

  // string selector = 1;
  void clear_selector();
  static const int kSelectorFieldNumber = 1;
  const std::string& selector() const;
  void set_selector(const std::string& value);
  void set_selector(std::string&& value);
  void set_selector(const char* value);
  void set_selector(const char* value, size_t size);
  std::string* mutable_selector();
  std::string* release_selector();
  void set_allocated_selector(std::string* selector);

  // @@protoc_insertion_point(class_scope:google.api.MetricRule)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      MetricRule_MetricCostsEntry_DoNotUse,
      std::string, ::PROTOBUF_NAMESPACE_ID::int64,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
      0 > metric_costs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr selector_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fapi_2fquota_2eproto;
};
// -------------------------------------------------------------------

class QuotaLimit_ValuesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<QuotaLimit_ValuesEntry_DoNotUse, 
    std::string, ::PROTOBUF_NAMESPACE_ID::int64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<QuotaLimit_ValuesEntry_DoNotUse, 
    std::string, ::PROTOBUF_NAMESPACE_ID::int64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    0 > SuperType;
  QuotaLimit_ValuesEntry_DoNotUse();
  QuotaLimit_ValuesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const QuotaLimit_ValuesEntry_DoNotUse& other);
  static const QuotaLimit_ValuesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const QuotaLimit_ValuesEntry_DoNotUse*>(&_QuotaLimit_ValuesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.api.QuotaLimit.ValuesEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fapi_2fquota_2eproto);
    return ::descriptor_table_google_2fapi_2fquota_2eproto.file_level_metadata[3];
  }

  public:
};

// -------------------------------------------------------------------

class QuotaLimit :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.QuotaLimit) */ {
 public:
  QuotaLimit();
  virtual ~QuotaLimit();

  QuotaLimit(const QuotaLimit& from);
  QuotaLimit(QuotaLimit&& from) noexcept
    : QuotaLimit() {
    *this = ::std::move(from);
  }

  inline QuotaLimit& operator=(const QuotaLimit& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuotaLimit& operator=(QuotaLimit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QuotaLimit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QuotaLimit* internal_default_instance() {
    return reinterpret_cast<const QuotaLimit*>(
               &_QuotaLimit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(QuotaLimit* other);
  friend void swap(QuotaLimit& a, QuotaLimit& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QuotaLimit* New() const final {
    return CreateMaybeMessage<QuotaLimit>(nullptr);
  }

  QuotaLimit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QuotaLimit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QuotaLimit& from);
  void MergeFrom(const QuotaLimit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QuotaLimit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.QuotaLimit";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fapi_2fquota_2eproto);
    return ::descriptor_table_google_2fapi_2fquota_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, int64> values = 10;
  int values_size() const;
  void clear_values();
  static const int kValuesFieldNumber = 10;
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_values();

  // string description = 2;
  void clear_description();
  static const int kDescriptionFieldNumber = 2;
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);

  // string duration = 5;
  void clear_duration();
  static const int kDurationFieldNumber = 5;
  const std::string& duration() const;
  void set_duration(const std::string& value);
  void set_duration(std::string&& value);
  void set_duration(const char* value);
  void set_duration(const char* value, size_t size);
  std::string* mutable_duration();
  std::string* release_duration();
  void set_allocated_duration(std::string* duration);

  // string name = 6;
  void clear_name();
  static const int kNameFieldNumber = 6;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // string metric = 8;
  void clear_metric();
  static const int kMetricFieldNumber = 8;
  const std::string& metric() const;
  void set_metric(const std::string& value);
  void set_metric(std::string&& value);
  void set_metric(const char* value);
  void set_metric(const char* value, size_t size);
  std::string* mutable_metric();
  std::string* release_metric();
  void set_allocated_metric(std::string* metric);

  // string unit = 9;
  void clear_unit();
  static const int kUnitFieldNumber = 9;
  const std::string& unit() const;
  void set_unit(const std::string& value);
  void set_unit(std::string&& value);
  void set_unit(const char* value);
  void set_unit(const char* value, size_t size);
  std::string* mutable_unit();
  std::string* release_unit();
  void set_allocated_unit(std::string* unit);

  // string display_name = 12;
  void clear_display_name();
  static const int kDisplayNameFieldNumber = 12;
  const std::string& display_name() const;
  void set_display_name(const std::string& value);
  void set_display_name(std::string&& value);
  void set_display_name(const char* value);
  void set_display_name(const char* value, size_t size);
  std::string* mutable_display_name();
  std::string* release_display_name();
  void set_allocated_display_name(std::string* display_name);

  // int64 default_limit = 3;
  void clear_default_limit();
  static const int kDefaultLimitFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int64 default_limit() const;
  void set_default_limit(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 max_limit = 4;
  void clear_max_limit();
  static const int kMaxLimitFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::int64 max_limit() const;
  void set_max_limit(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 free_tier = 7;
  void clear_free_tier();
  static const int kFreeTierFieldNumber = 7;
  ::PROTOBUF_NAMESPACE_ID::int64 free_tier() const;
  void set_free_tier(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:google.api.QuotaLimit)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      QuotaLimit_ValuesEntry_DoNotUse,
      std::string, ::PROTOBUF_NAMESPACE_ID::int64,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
      0 > values_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr duration_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metric_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unit_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_name_;
  ::PROTOBUF_NAMESPACE_ID::int64 default_limit_;
  ::PROTOBUF_NAMESPACE_ID::int64 max_limit_;
  ::PROTOBUF_NAMESPACE_ID::int64 free_tier_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fapi_2fquota_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Quota

// repeated .google.api.QuotaLimit limits = 3;
inline int Quota::limits_size() const {
  return limits_.size();
}
inline void Quota::clear_limits() {
  limits_.Clear();
}
inline ::google::api::QuotaLimit* Quota::mutable_limits(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.Quota.limits)
  return limits_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::QuotaLimit >*
Quota::mutable_limits() {
  // @@protoc_insertion_point(field_mutable_list:google.api.Quota.limits)
  return &limits_;
}
inline const ::google::api::QuotaLimit& Quota::limits(int index) const {
  // @@protoc_insertion_point(field_get:google.api.Quota.limits)
  return limits_.Get(index);
}
inline ::google::api::QuotaLimit* Quota::add_limits() {
  // @@protoc_insertion_point(field_add:google.api.Quota.limits)
  return limits_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::QuotaLimit >&
Quota::limits() const {
  // @@protoc_insertion_point(field_list:google.api.Quota.limits)
  return limits_;
}

// repeated .google.api.MetricRule metric_rules = 4;
inline int Quota::metric_rules_size() const {
  return metric_rules_.size();
}
inline void Quota::clear_metric_rules() {
  metric_rules_.Clear();
}
inline ::google::api::MetricRule* Quota::mutable_metric_rules(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.Quota.metric_rules)
  return metric_rules_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::MetricRule >*
Quota::mutable_metric_rules() {
  // @@protoc_insertion_point(field_mutable_list:google.api.Quota.metric_rules)
  return &metric_rules_;
}
inline const ::google::api::MetricRule& Quota::metric_rules(int index) const {
  // @@protoc_insertion_point(field_get:google.api.Quota.metric_rules)
  return metric_rules_.Get(index);
}
inline ::google::api::MetricRule* Quota::add_metric_rules() {
  // @@protoc_insertion_point(field_add:google.api.Quota.metric_rules)
  return metric_rules_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::MetricRule >&
Quota::metric_rules() const {
  // @@protoc_insertion_point(field_list:google.api.Quota.metric_rules)
  return metric_rules_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// MetricRule

// string selector = 1;
inline void MetricRule::clear_selector() {
  selector_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MetricRule::selector() const {
  // @@protoc_insertion_point(field_get:google.api.MetricRule.selector)
  return selector_.GetNoArena();
}
inline void MetricRule::set_selector(const std::string& value) {
  
  selector_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.MetricRule.selector)
}
inline void MetricRule::set_selector(std::string&& value) {
  
  selector_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.api.MetricRule.selector)
}
inline void MetricRule::set_selector(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  selector_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.MetricRule.selector)
}
inline void MetricRule::set_selector(const char* value, size_t size) {
  
  selector_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.MetricRule.selector)
}
inline std::string* MetricRule::mutable_selector() {
  
  // @@protoc_insertion_point(field_mutable:google.api.MetricRule.selector)
  return selector_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MetricRule::release_selector() {
  // @@protoc_insertion_point(field_release:google.api.MetricRule.selector)
  
  return selector_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MetricRule::set_allocated_selector(std::string* selector) {
  if (selector != nullptr) {
    
  } else {
    
  }
  selector_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), selector);
  // @@protoc_insertion_point(field_set_allocated:google.api.MetricRule.selector)
}

// map<string, int64> metric_costs = 2;
inline int MetricRule::metric_costs_size() const {
  return metric_costs_.size();
}
inline void MetricRule::clear_metric_costs() {
  metric_costs_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >&
MetricRule::metric_costs() const {
  // @@protoc_insertion_point(field_map:google.api.MetricRule.metric_costs)
  return metric_costs_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >*
MetricRule::mutable_metric_costs() {
  // @@protoc_insertion_point(field_mutable_map:google.api.MetricRule.metric_costs)
  return metric_costs_.MutableMap();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// QuotaLimit

// string name = 6;
inline void QuotaLimit::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& QuotaLimit::name() const {
  // @@protoc_insertion_point(field_get:google.api.QuotaLimit.name)
  return name_.GetNoArena();
}
inline void QuotaLimit::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.QuotaLimit.name)
}
inline void QuotaLimit::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.api.QuotaLimit.name)
}
inline void QuotaLimit::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.QuotaLimit.name)
}
inline void QuotaLimit::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.QuotaLimit.name)
}
inline std::string* QuotaLimit::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.api.QuotaLimit.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* QuotaLimit::release_name() {
  // @@protoc_insertion_point(field_release:google.api.QuotaLimit.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void QuotaLimit::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.api.QuotaLimit.name)
}

// string description = 2;
inline void QuotaLimit::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& QuotaLimit::description() const {
  // @@protoc_insertion_point(field_get:google.api.QuotaLimit.description)
  return description_.GetNoArena();
}
inline void QuotaLimit::set_description(const std::string& value) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.QuotaLimit.description)
}
inline void QuotaLimit::set_description(std::string&& value) {
  
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.api.QuotaLimit.description)
}
inline void QuotaLimit::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.QuotaLimit.description)
}
inline void QuotaLimit::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.QuotaLimit.description)
}
inline std::string* QuotaLimit::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:google.api.QuotaLimit.description)
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* QuotaLimit::release_description() {
  // @@protoc_insertion_point(field_release:google.api.QuotaLimit.description)
  
  return description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void QuotaLimit::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:google.api.QuotaLimit.description)
}

// int64 default_limit = 3;
inline void QuotaLimit::clear_default_limit() {
  default_limit_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 QuotaLimit::default_limit() const {
  // @@protoc_insertion_point(field_get:google.api.QuotaLimit.default_limit)
  return default_limit_;
}
inline void QuotaLimit::set_default_limit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  default_limit_ = value;
  // @@protoc_insertion_point(field_set:google.api.QuotaLimit.default_limit)
}

// int64 max_limit = 4;
inline void QuotaLimit::clear_max_limit() {
  max_limit_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 QuotaLimit::max_limit() const {
  // @@protoc_insertion_point(field_get:google.api.QuotaLimit.max_limit)
  return max_limit_;
}
inline void QuotaLimit::set_max_limit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  max_limit_ = value;
  // @@protoc_insertion_point(field_set:google.api.QuotaLimit.max_limit)
}

// int64 free_tier = 7;
inline void QuotaLimit::clear_free_tier() {
  free_tier_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 QuotaLimit::free_tier() const {
  // @@protoc_insertion_point(field_get:google.api.QuotaLimit.free_tier)
  return free_tier_;
}
inline void QuotaLimit::set_free_tier(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  free_tier_ = value;
  // @@protoc_insertion_point(field_set:google.api.QuotaLimit.free_tier)
}

// string duration = 5;
inline void QuotaLimit::clear_duration() {
  duration_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& QuotaLimit::duration() const {
  // @@protoc_insertion_point(field_get:google.api.QuotaLimit.duration)
  return duration_.GetNoArena();
}
inline void QuotaLimit::set_duration(const std::string& value) {
  
  duration_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.QuotaLimit.duration)
}
inline void QuotaLimit::set_duration(std::string&& value) {
  
  duration_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.api.QuotaLimit.duration)
}
inline void QuotaLimit::set_duration(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  duration_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.QuotaLimit.duration)
}
inline void QuotaLimit::set_duration(const char* value, size_t size) {
  
  duration_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.QuotaLimit.duration)
}
inline std::string* QuotaLimit::mutable_duration() {
  
  // @@protoc_insertion_point(field_mutable:google.api.QuotaLimit.duration)
  return duration_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* QuotaLimit::release_duration() {
  // @@protoc_insertion_point(field_release:google.api.QuotaLimit.duration)
  
  return duration_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void QuotaLimit::set_allocated_duration(std::string* duration) {
  if (duration != nullptr) {
    
  } else {
    
  }
  duration_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), duration);
  // @@protoc_insertion_point(field_set_allocated:google.api.QuotaLimit.duration)
}

// string metric = 8;
inline void QuotaLimit::clear_metric() {
  metric_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& QuotaLimit::metric() const {
  // @@protoc_insertion_point(field_get:google.api.QuotaLimit.metric)
  return metric_.GetNoArena();
}
inline void QuotaLimit::set_metric(const std::string& value) {
  
  metric_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.QuotaLimit.metric)
}
inline void QuotaLimit::set_metric(std::string&& value) {
  
  metric_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.api.QuotaLimit.metric)
}
inline void QuotaLimit::set_metric(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  metric_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.QuotaLimit.metric)
}
inline void QuotaLimit::set_metric(const char* value, size_t size) {
  
  metric_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.QuotaLimit.metric)
}
inline std::string* QuotaLimit::mutable_metric() {
  
  // @@protoc_insertion_point(field_mutable:google.api.QuotaLimit.metric)
  return metric_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* QuotaLimit::release_metric() {
  // @@protoc_insertion_point(field_release:google.api.QuotaLimit.metric)
  
  return metric_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void QuotaLimit::set_allocated_metric(std::string* metric) {
  if (metric != nullptr) {
    
  } else {
    
  }
  metric_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), metric);
  // @@protoc_insertion_point(field_set_allocated:google.api.QuotaLimit.metric)
}

// string unit = 9;
inline void QuotaLimit::clear_unit() {
  unit_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& QuotaLimit::unit() const {
  // @@protoc_insertion_point(field_get:google.api.QuotaLimit.unit)
  return unit_.GetNoArena();
}
inline void QuotaLimit::set_unit(const std::string& value) {
  
  unit_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.QuotaLimit.unit)
}
inline void QuotaLimit::set_unit(std::string&& value) {
  
  unit_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.api.QuotaLimit.unit)
}
inline void QuotaLimit::set_unit(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  unit_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.QuotaLimit.unit)
}
inline void QuotaLimit::set_unit(const char* value, size_t size) {
  
  unit_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.QuotaLimit.unit)
}
inline std::string* QuotaLimit::mutable_unit() {
  
  // @@protoc_insertion_point(field_mutable:google.api.QuotaLimit.unit)
  return unit_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* QuotaLimit::release_unit() {
  // @@protoc_insertion_point(field_release:google.api.QuotaLimit.unit)
  
  return unit_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void QuotaLimit::set_allocated_unit(std::string* unit) {
  if (unit != nullptr) {
    
  } else {
    
  }
  unit_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), unit);
  // @@protoc_insertion_point(field_set_allocated:google.api.QuotaLimit.unit)
}

// map<string, int64> values = 10;
inline int QuotaLimit::values_size() const {
  return values_.size();
}
inline void QuotaLimit::clear_values() {
  values_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >&
QuotaLimit::values() const {
  // @@protoc_insertion_point(field_map:google.api.QuotaLimit.values)
  return values_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >*
QuotaLimit::mutable_values() {
  // @@protoc_insertion_point(field_mutable_map:google.api.QuotaLimit.values)
  return values_.MutableMap();
}

// string display_name = 12;
inline void QuotaLimit::clear_display_name() {
  display_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& QuotaLimit::display_name() const {
  // @@protoc_insertion_point(field_get:google.api.QuotaLimit.display_name)
  return display_name_.GetNoArena();
}
inline void QuotaLimit::set_display_name(const std::string& value) {
  
  display_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.QuotaLimit.display_name)
}
inline void QuotaLimit::set_display_name(std::string&& value) {
  
  display_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.api.QuotaLimit.display_name)
}
inline void QuotaLimit::set_display_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  display_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.QuotaLimit.display_name)
}
inline void QuotaLimit::set_display_name(const char* value, size_t size) {
  
  display_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.QuotaLimit.display_name)
}
inline std::string* QuotaLimit::mutable_display_name() {
  
  // @@protoc_insertion_point(field_mutable:google.api.QuotaLimit.display_name)
  return display_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* QuotaLimit::release_display_name() {
  // @@protoc_insertion_point(field_release:google.api.QuotaLimit.display_name)
  
  return display_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void QuotaLimit::set_allocated_display_name(std::string* display_name) {
  if (display_name != nullptr) {
    
  } else {
    
  }
  display_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), display_name);
  // @@protoc_insertion_point(field_set_allocated:google.api.QuotaLimit.display_name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace api
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fquota_2eproto
