// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/metric.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fmetric_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fmetric_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/label.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fapi_2fmetric_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fapi_2fmetric_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fapi_2fmetric_2eproto;
namespace google {
namespace api {
class Metric;
class MetricDefaultTypeInternal;
extern MetricDefaultTypeInternal _Metric_default_instance_;
class MetricDescriptor;
class MetricDescriptorDefaultTypeInternal;
extern MetricDescriptorDefaultTypeInternal _MetricDescriptor_default_instance_;
class Metric_LabelsEntry_DoNotUse;
class Metric_LabelsEntry_DoNotUseDefaultTypeInternal;
extern Metric_LabelsEntry_DoNotUseDefaultTypeInternal _Metric_LabelsEntry_DoNotUse_default_instance_;
}  // namespace api
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::api::Metric* Arena::CreateMaybeMessage<::google::api::Metric>(Arena*);
template<> ::google::api::MetricDescriptor* Arena::CreateMaybeMessage<::google::api::MetricDescriptor>(Arena*);
template<> ::google::api::Metric_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage<::google::api::Metric_LabelsEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace api {

enum MetricDescriptor_MetricKind : int {
  MetricDescriptor_MetricKind_METRIC_KIND_UNSPECIFIED = 0,
  MetricDescriptor_MetricKind_GAUGE = 1,
  MetricDescriptor_MetricKind_DELTA = 2,
  MetricDescriptor_MetricKind_CUMULATIVE = 3,
  MetricDescriptor_MetricKind_MetricDescriptor_MetricKind_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MetricDescriptor_MetricKind_MetricDescriptor_MetricKind_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MetricDescriptor_MetricKind_IsValid(int value);
constexpr MetricDescriptor_MetricKind MetricDescriptor_MetricKind_MetricKind_MIN = MetricDescriptor_MetricKind_METRIC_KIND_UNSPECIFIED;
constexpr MetricDescriptor_MetricKind MetricDescriptor_MetricKind_MetricKind_MAX = MetricDescriptor_MetricKind_CUMULATIVE;
constexpr int MetricDescriptor_MetricKind_MetricKind_ARRAYSIZE = MetricDescriptor_MetricKind_MetricKind_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MetricDescriptor_MetricKind_descriptor();
template<typename T>
inline const std::string& MetricDescriptor_MetricKind_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MetricDescriptor_MetricKind>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MetricDescriptor_MetricKind_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MetricDescriptor_MetricKind_descriptor(), enum_t_value);
}
inline bool MetricDescriptor_MetricKind_Parse(
    const std::string& name, MetricDescriptor_MetricKind* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MetricDescriptor_MetricKind>(
    MetricDescriptor_MetricKind_descriptor(), name, value);
}
enum MetricDescriptor_ValueType : int {
  MetricDescriptor_ValueType_VALUE_TYPE_UNSPECIFIED = 0,
  MetricDescriptor_ValueType_BOOL = 1,
  MetricDescriptor_ValueType_INT64 = 2,
  MetricDescriptor_ValueType_DOUBLE = 3,
  MetricDescriptor_ValueType_STRING = 4,
  MetricDescriptor_ValueType_DISTRIBUTION = 5,
  MetricDescriptor_ValueType_MONEY = 6,
  MetricDescriptor_ValueType_MetricDescriptor_ValueType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MetricDescriptor_ValueType_MetricDescriptor_ValueType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MetricDescriptor_ValueType_IsValid(int value);
constexpr MetricDescriptor_ValueType MetricDescriptor_ValueType_ValueType_MIN = MetricDescriptor_ValueType_VALUE_TYPE_UNSPECIFIED;
constexpr MetricDescriptor_ValueType MetricDescriptor_ValueType_ValueType_MAX = MetricDescriptor_ValueType_MONEY;
constexpr int MetricDescriptor_ValueType_ValueType_ARRAYSIZE = MetricDescriptor_ValueType_ValueType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MetricDescriptor_ValueType_descriptor();
template<typename T>
inline const std::string& MetricDescriptor_ValueType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MetricDescriptor_ValueType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MetricDescriptor_ValueType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MetricDescriptor_ValueType_descriptor(), enum_t_value);
}
inline bool MetricDescriptor_ValueType_Parse(
    const std::string& name, MetricDescriptor_ValueType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MetricDescriptor_ValueType>(
    MetricDescriptor_ValueType_descriptor(), name, value);
}
// ===================================================================

class MetricDescriptor :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.MetricDescriptor) */ {
 public:
  MetricDescriptor();
  virtual ~MetricDescriptor();

  MetricDescriptor(const MetricDescriptor& from);
  MetricDescriptor(MetricDescriptor&& from) noexcept
    : MetricDescriptor() {
    *this = ::std::move(from);
  }

  inline MetricDescriptor& operator=(const MetricDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline MetricDescriptor& operator=(MetricDescriptor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MetricDescriptor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MetricDescriptor* internal_default_instance() {
    return reinterpret_cast<const MetricDescriptor*>(
               &_MetricDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(MetricDescriptor* other);
  friend void swap(MetricDescriptor& a, MetricDescriptor& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MetricDescriptor* New() const final {
    return CreateMaybeMessage<MetricDescriptor>(nullptr);
  }

  MetricDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MetricDescriptor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MetricDescriptor& from);
  void MergeFrom(const MetricDescriptor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MetricDescriptor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.MetricDescriptor";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fapi_2fmetric_2eproto);
    return ::descriptor_table_google_2fapi_2fmetric_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef MetricDescriptor_MetricKind MetricKind;
  static constexpr MetricKind METRIC_KIND_UNSPECIFIED =
    MetricDescriptor_MetricKind_METRIC_KIND_UNSPECIFIED;
  static constexpr MetricKind GAUGE =
    MetricDescriptor_MetricKind_GAUGE;
  static constexpr MetricKind DELTA =
    MetricDescriptor_MetricKind_DELTA;
  static constexpr MetricKind CUMULATIVE =
    MetricDescriptor_MetricKind_CUMULATIVE;
  static inline bool MetricKind_IsValid(int value) {
    return MetricDescriptor_MetricKind_IsValid(value);
  }
  static constexpr MetricKind MetricKind_MIN =
    MetricDescriptor_MetricKind_MetricKind_MIN;
  static constexpr MetricKind MetricKind_MAX =
    MetricDescriptor_MetricKind_MetricKind_MAX;
  static constexpr int MetricKind_ARRAYSIZE =
    MetricDescriptor_MetricKind_MetricKind_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MetricKind_descriptor() {
    return MetricDescriptor_MetricKind_descriptor();
  }
  template<typename T>
  static inline const std::string& MetricKind_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MetricKind>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MetricKind_Name.");
    return MetricDescriptor_MetricKind_Name(enum_t_value);
  }
  static inline bool MetricKind_Parse(const std::string& name,
      MetricKind* value) {
    return MetricDescriptor_MetricKind_Parse(name, value);
  }

  typedef MetricDescriptor_ValueType ValueType;
  static constexpr ValueType VALUE_TYPE_UNSPECIFIED =
    MetricDescriptor_ValueType_VALUE_TYPE_UNSPECIFIED;
  static constexpr ValueType BOOL =
    MetricDescriptor_ValueType_BOOL;
  static constexpr ValueType INT64 =
    MetricDescriptor_ValueType_INT64;
  static constexpr ValueType DOUBLE =
    MetricDescriptor_ValueType_DOUBLE;
  static constexpr ValueType STRING =
    MetricDescriptor_ValueType_STRING;
  static constexpr ValueType DISTRIBUTION =
    MetricDescriptor_ValueType_DISTRIBUTION;
  static constexpr ValueType MONEY =
    MetricDescriptor_ValueType_MONEY;
  static inline bool ValueType_IsValid(int value) {
    return MetricDescriptor_ValueType_IsValid(value);
  }
  static constexpr ValueType ValueType_MIN =
    MetricDescriptor_ValueType_ValueType_MIN;
  static constexpr ValueType ValueType_MAX =
    MetricDescriptor_ValueType_ValueType_MAX;
  static constexpr int ValueType_ARRAYSIZE =
    MetricDescriptor_ValueType_ValueType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ValueType_descriptor() {
    return MetricDescriptor_ValueType_descriptor();
  }
  template<typename T>
  static inline const std::string& ValueType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ValueType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ValueType_Name.");
    return MetricDescriptor_ValueType_Name(enum_t_value);
  }
  static inline bool ValueType_Parse(const std::string& name,
      ValueType* value) {
    return MetricDescriptor_ValueType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .google.api.LabelDescriptor labels = 2;
  int labels_size() const;
  void clear_labels();
  static const int kLabelsFieldNumber = 2;
  ::google::api::LabelDescriptor* mutable_labels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::LabelDescriptor >*
      mutable_labels();
  const ::google::api::LabelDescriptor& labels(int index) const;
  ::google::api::LabelDescriptor* add_labels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::LabelDescriptor >&
      labels() const;

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // string unit = 5;
  void clear_unit();
  static const int kUnitFieldNumber = 5;
  const std::string& unit() const;
  void set_unit(const std::string& value);
  void set_unit(std::string&& value);
  void set_unit(const char* value);
  void set_unit(const char* value, size_t size);
  std::string* mutable_unit();
  std::string* release_unit();
  void set_allocated_unit(std::string* unit);

  // string description = 6;
  void clear_description();
  static const int kDescriptionFieldNumber = 6;
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);

  // string display_name = 7;
  void clear_display_name();
  static const int kDisplayNameFieldNumber = 7;
  const std::string& display_name() const;
  void set_display_name(const std::string& value);
  void set_display_name(std::string&& value);
  void set_display_name(const char* value);
  void set_display_name(const char* value, size_t size);
  std::string* mutable_display_name();
  std::string* release_display_name();
  void set_allocated_display_name(std::string* display_name);

  // string type = 8;
  void clear_type();
  static const int kTypeFieldNumber = 8;
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);

  // .google.api.MetricDescriptor.MetricKind metric_kind = 3;
  void clear_metric_kind();
  static const int kMetricKindFieldNumber = 3;
  ::google::api::MetricDescriptor_MetricKind metric_kind() const;
  void set_metric_kind(::google::api::MetricDescriptor_MetricKind value);

  // .google.api.MetricDescriptor.ValueType value_type = 4;
  void clear_value_type();
  static const int kValueTypeFieldNumber = 4;
  ::google::api::MetricDescriptor_ValueType value_type() const;
  void set_value_type(::google::api::MetricDescriptor_ValueType value);

  // @@protoc_insertion_point(class_scope:google.api.MetricDescriptor)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::LabelDescriptor > labels_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unit_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  int metric_kind_;
  int value_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fapi_2fmetric_2eproto;
};
// -------------------------------------------------------------------

class Metric_LabelsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Metric_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Metric_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  Metric_LabelsEntry_DoNotUse();
  Metric_LabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Metric_LabelsEntry_DoNotUse& other);
  static const Metric_LabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Metric_LabelsEntry_DoNotUse*>(&_Metric_LabelsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.api.Metric.LabelsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.api.Metric.LabelsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fapi_2fmetric_2eproto);
    return ::descriptor_table_google_2fapi_2fmetric_2eproto.file_level_metadata[1];
  }

  public:
};

// -------------------------------------------------------------------

class Metric :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.Metric) */ {
 public:
  Metric();
  virtual ~Metric();

  Metric(const Metric& from);
  Metric(Metric&& from) noexcept
    : Metric() {
    *this = ::std::move(from);
  }

  inline Metric& operator=(const Metric& from) {
    CopyFrom(from);
    return *this;
  }
  inline Metric& operator=(Metric&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Metric& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Metric* internal_default_instance() {
    return reinterpret_cast<const Metric*>(
               &_Metric_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Metric* other);
  friend void swap(Metric& a, Metric& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Metric* New() const final {
    return CreateMaybeMessage<Metric>(nullptr);
  }

  Metric* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Metric>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Metric& from);
  void MergeFrom(const Metric& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Metric* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.Metric";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fapi_2fmetric_2eproto);
    return ::descriptor_table_google_2fapi_2fmetric_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> labels = 2;
  int labels_size() const;
  void clear_labels();
  static const int kLabelsFieldNumber = 2;
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_labels();

  // string type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);

  // @@protoc_insertion_point(class_scope:google.api.Metric)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Metric_LabelsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > labels_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fapi_2fmetric_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MetricDescriptor

// string name = 1;
inline void MetricDescriptor::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MetricDescriptor::name() const {
  // @@protoc_insertion_point(field_get:google.api.MetricDescriptor.name)
  return name_.GetNoArena();
}
inline void MetricDescriptor::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.MetricDescriptor.name)
}
inline void MetricDescriptor::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.api.MetricDescriptor.name)
}
inline void MetricDescriptor::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.MetricDescriptor.name)
}
inline void MetricDescriptor::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.MetricDescriptor.name)
}
inline std::string* MetricDescriptor::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.api.MetricDescriptor.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MetricDescriptor::release_name() {
  // @@protoc_insertion_point(field_release:google.api.MetricDescriptor.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MetricDescriptor::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.api.MetricDescriptor.name)
}

// string type = 8;
inline void MetricDescriptor::clear_type() {
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MetricDescriptor::type() const {
  // @@protoc_insertion_point(field_get:google.api.MetricDescriptor.type)
  return type_.GetNoArena();
}
inline void MetricDescriptor::set_type(const std::string& value) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.MetricDescriptor.type)
}
inline void MetricDescriptor::set_type(std::string&& value) {
  
  type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.api.MetricDescriptor.type)
}
inline void MetricDescriptor::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.MetricDescriptor.type)
}
inline void MetricDescriptor::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.MetricDescriptor.type)
}
inline std::string* MetricDescriptor::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:google.api.MetricDescriptor.type)
  return type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MetricDescriptor::release_type() {
  // @@protoc_insertion_point(field_release:google.api.MetricDescriptor.type)
  
  return type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MetricDescriptor::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:google.api.MetricDescriptor.type)
}

// repeated .google.api.LabelDescriptor labels = 2;
inline int MetricDescriptor::labels_size() const {
  return labels_.size();
}
inline ::google::api::LabelDescriptor* MetricDescriptor::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.MetricDescriptor.labels)
  return labels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::LabelDescriptor >*
MetricDescriptor::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:google.api.MetricDescriptor.labels)
  return &labels_;
}
inline const ::google::api::LabelDescriptor& MetricDescriptor::labels(int index) const {
  // @@protoc_insertion_point(field_get:google.api.MetricDescriptor.labels)
  return labels_.Get(index);
}
inline ::google::api::LabelDescriptor* MetricDescriptor::add_labels() {
  // @@protoc_insertion_point(field_add:google.api.MetricDescriptor.labels)
  return labels_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::LabelDescriptor >&
MetricDescriptor::labels() const {
  // @@protoc_insertion_point(field_list:google.api.MetricDescriptor.labels)
  return labels_;
}

// .google.api.MetricDescriptor.MetricKind metric_kind = 3;
inline void MetricDescriptor::clear_metric_kind() {
  metric_kind_ = 0;
}
inline ::google::api::MetricDescriptor_MetricKind MetricDescriptor::metric_kind() const {
  // @@protoc_insertion_point(field_get:google.api.MetricDescriptor.metric_kind)
  return static_cast< ::google::api::MetricDescriptor_MetricKind >(metric_kind_);
}
inline void MetricDescriptor::set_metric_kind(::google::api::MetricDescriptor_MetricKind value) {
  
  metric_kind_ = value;
  // @@protoc_insertion_point(field_set:google.api.MetricDescriptor.metric_kind)
}

// .google.api.MetricDescriptor.ValueType value_type = 4;
inline void MetricDescriptor::clear_value_type() {
  value_type_ = 0;
}
inline ::google::api::MetricDescriptor_ValueType MetricDescriptor::value_type() const {
  // @@protoc_insertion_point(field_get:google.api.MetricDescriptor.value_type)
  return static_cast< ::google::api::MetricDescriptor_ValueType >(value_type_);
}
inline void MetricDescriptor::set_value_type(::google::api::MetricDescriptor_ValueType value) {
  
  value_type_ = value;
  // @@protoc_insertion_point(field_set:google.api.MetricDescriptor.value_type)
}

// string unit = 5;
inline void MetricDescriptor::clear_unit() {
  unit_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MetricDescriptor::unit() const {
  // @@protoc_insertion_point(field_get:google.api.MetricDescriptor.unit)
  return unit_.GetNoArena();
}
inline void MetricDescriptor::set_unit(const std::string& value) {
  
  unit_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.MetricDescriptor.unit)
}
inline void MetricDescriptor::set_unit(std::string&& value) {
  
  unit_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.api.MetricDescriptor.unit)
}
inline void MetricDescriptor::set_unit(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  unit_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.MetricDescriptor.unit)
}
inline void MetricDescriptor::set_unit(const char* value, size_t size) {
  
  unit_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.MetricDescriptor.unit)
}
inline std::string* MetricDescriptor::mutable_unit() {
  
  // @@protoc_insertion_point(field_mutable:google.api.MetricDescriptor.unit)
  return unit_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MetricDescriptor::release_unit() {
  // @@protoc_insertion_point(field_release:google.api.MetricDescriptor.unit)
  
  return unit_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MetricDescriptor::set_allocated_unit(std::string* unit) {
  if (unit != nullptr) {
    
  } else {
    
  }
  unit_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), unit);
  // @@protoc_insertion_point(field_set_allocated:google.api.MetricDescriptor.unit)
}

// string description = 6;
inline void MetricDescriptor::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MetricDescriptor::description() const {
  // @@protoc_insertion_point(field_get:google.api.MetricDescriptor.description)
  return description_.GetNoArena();
}
inline void MetricDescriptor::set_description(const std::string& value) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.MetricDescriptor.description)
}
inline void MetricDescriptor::set_description(std::string&& value) {
  
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.api.MetricDescriptor.description)
}
inline void MetricDescriptor::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.MetricDescriptor.description)
}
inline void MetricDescriptor::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.MetricDescriptor.description)
}
inline std::string* MetricDescriptor::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:google.api.MetricDescriptor.description)
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MetricDescriptor::release_description() {
  // @@protoc_insertion_point(field_release:google.api.MetricDescriptor.description)
  
  return description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MetricDescriptor::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:google.api.MetricDescriptor.description)
}

// string display_name = 7;
inline void MetricDescriptor::clear_display_name() {
  display_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MetricDescriptor::display_name() const {
  // @@protoc_insertion_point(field_get:google.api.MetricDescriptor.display_name)
  return display_name_.GetNoArena();
}
inline void MetricDescriptor::set_display_name(const std::string& value) {
  
  display_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.MetricDescriptor.display_name)
}
inline void MetricDescriptor::set_display_name(std::string&& value) {
  
  display_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.api.MetricDescriptor.display_name)
}
inline void MetricDescriptor::set_display_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  display_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.MetricDescriptor.display_name)
}
inline void MetricDescriptor::set_display_name(const char* value, size_t size) {
  
  display_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.MetricDescriptor.display_name)
}
inline std::string* MetricDescriptor::mutable_display_name() {
  
  // @@protoc_insertion_point(field_mutable:google.api.MetricDescriptor.display_name)
  return display_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MetricDescriptor::release_display_name() {
  // @@protoc_insertion_point(field_release:google.api.MetricDescriptor.display_name)
  
  return display_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MetricDescriptor::set_allocated_display_name(std::string* display_name) {
  if (display_name != nullptr) {
    
  } else {
    
  }
  display_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), display_name);
  // @@protoc_insertion_point(field_set_allocated:google.api.MetricDescriptor.display_name)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Metric

// string type = 3;
inline void Metric::clear_type() {
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Metric::type() const {
  // @@protoc_insertion_point(field_get:google.api.Metric.type)
  return type_.GetNoArena();
}
inline void Metric::set_type(const std::string& value) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.Metric.type)
}
inline void Metric::set_type(std::string&& value) {
  
  type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.api.Metric.type)
}
inline void Metric::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.Metric.type)
}
inline void Metric::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.Metric.type)
}
inline std::string* Metric::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:google.api.Metric.type)
  return type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Metric::release_type() {
  // @@protoc_insertion_point(field_release:google.api.Metric.type)
  
  return type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Metric::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:google.api.Metric.type)
}

// map<string, string> labels = 2;
inline int Metric::labels_size() const {
  return labels_.size();
}
inline void Metric::clear_labels() {
  labels_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Metric::labels() const {
  // @@protoc_insertion_point(field_map:google.api.Metric.labels)
  return labels_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Metric::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:google.api.Metric.labels)
  return labels_.MutableMap();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace api
}  // namespace google

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::google::api::MetricDescriptor_MetricKind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::api::MetricDescriptor_MetricKind>() {
  return ::google::api::MetricDescriptor_MetricKind_descriptor();
}
template <> struct is_proto_enum< ::google::api::MetricDescriptor_ValueType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::api::MetricDescriptor_ValueType>() {
  return ::google::api::MetricDescriptor_ValueType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fmetric_2eproto
