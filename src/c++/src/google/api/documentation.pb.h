// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/documentation.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fdocumentation_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fdocumentation_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fapi_2fdocumentation_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fapi_2fdocumentation_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fapi_2fdocumentation_2eproto;
namespace google {
namespace api {
class Documentation;
class DocumentationDefaultTypeInternal;
extern DocumentationDefaultTypeInternal _Documentation_default_instance_;
class DocumentationRule;
class DocumentationRuleDefaultTypeInternal;
extern DocumentationRuleDefaultTypeInternal _DocumentationRule_default_instance_;
class Page;
class PageDefaultTypeInternal;
extern PageDefaultTypeInternal _Page_default_instance_;
}  // namespace api
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::api::Documentation* Arena::CreateMaybeMessage<::google::api::Documentation>(Arena*);
template<> ::google::api::DocumentationRule* Arena::CreateMaybeMessage<::google::api::DocumentationRule>(Arena*);
template<> ::google::api::Page* Arena::CreateMaybeMessage<::google::api::Page>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace api {

// ===================================================================

class Documentation :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.Documentation) */ {
 public:
  Documentation();
  virtual ~Documentation();

  Documentation(const Documentation& from);
  Documentation(Documentation&& from) noexcept
    : Documentation() {
    *this = ::std::move(from);
  }

  inline Documentation& operator=(const Documentation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Documentation& operator=(Documentation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Documentation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Documentation* internal_default_instance() {
    return reinterpret_cast<const Documentation*>(
               &_Documentation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Documentation* other);
  friend void swap(Documentation& a, Documentation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Documentation* New() const final {
    return CreateMaybeMessage<Documentation>(nullptr);
  }

  Documentation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Documentation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Documentation& from);
  void MergeFrom(const Documentation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Documentation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.Documentation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fapi_2fdocumentation_2eproto);
    return ::descriptor_table_google_2fapi_2fdocumentation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.api.DocumentationRule rules = 3;
  int rules_size() const;
  void clear_rules();
  static const int kRulesFieldNumber = 3;
  ::google::api::DocumentationRule* mutable_rules(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::DocumentationRule >*
      mutable_rules();
  const ::google::api::DocumentationRule& rules(int index) const;
  ::google::api::DocumentationRule* add_rules();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::DocumentationRule >&
      rules() const;

  // repeated .google.api.Page pages = 5;
  int pages_size() const;
  void clear_pages();
  static const int kPagesFieldNumber = 5;
  ::google::api::Page* mutable_pages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::Page >*
      mutable_pages();
  const ::google::api::Page& pages(int index) const;
  ::google::api::Page* add_pages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::Page >&
      pages() const;

  // string summary = 1;
  void clear_summary();
  static const int kSummaryFieldNumber = 1;
  const std::string& summary() const;
  void set_summary(const std::string& value);
  void set_summary(std::string&& value);
  void set_summary(const char* value);
  void set_summary(const char* value, size_t size);
  std::string* mutable_summary();
  std::string* release_summary();
  void set_allocated_summary(std::string* summary);

  // string overview = 2;
  void clear_overview();
  static const int kOverviewFieldNumber = 2;
  const std::string& overview() const;
  void set_overview(const std::string& value);
  void set_overview(std::string&& value);
  void set_overview(const char* value);
  void set_overview(const char* value, size_t size);
  std::string* mutable_overview();
  std::string* release_overview();
  void set_allocated_overview(std::string* overview);

  // string documentation_root_url = 4;
  void clear_documentation_root_url();
  static const int kDocumentationRootUrlFieldNumber = 4;
  const std::string& documentation_root_url() const;
  void set_documentation_root_url(const std::string& value);
  void set_documentation_root_url(std::string&& value);
  void set_documentation_root_url(const char* value);
  void set_documentation_root_url(const char* value, size_t size);
  std::string* mutable_documentation_root_url();
  std::string* release_documentation_root_url();
  void set_allocated_documentation_root_url(std::string* documentation_root_url);

  // @@protoc_insertion_point(class_scope:google.api.Documentation)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::DocumentationRule > rules_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::Page > pages_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr summary_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr overview_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr documentation_root_url_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fapi_2fdocumentation_2eproto;
};
// -------------------------------------------------------------------

class DocumentationRule :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.DocumentationRule) */ {
 public:
  DocumentationRule();
  virtual ~DocumentationRule();

  DocumentationRule(const DocumentationRule& from);
  DocumentationRule(DocumentationRule&& from) noexcept
    : DocumentationRule() {
    *this = ::std::move(from);
  }

  inline DocumentationRule& operator=(const DocumentationRule& from) {
    CopyFrom(from);
    return *this;
  }
  inline DocumentationRule& operator=(DocumentationRule&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DocumentationRule& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DocumentationRule* internal_default_instance() {
    return reinterpret_cast<const DocumentationRule*>(
               &_DocumentationRule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(DocumentationRule* other);
  friend void swap(DocumentationRule& a, DocumentationRule& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DocumentationRule* New() const final {
    return CreateMaybeMessage<DocumentationRule>(nullptr);
  }

  DocumentationRule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DocumentationRule>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DocumentationRule& from);
  void MergeFrom(const DocumentationRule& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DocumentationRule* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.DocumentationRule";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fapi_2fdocumentation_2eproto);
    return ::descriptor_table_google_2fapi_2fdocumentation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string selector = 1;
  void clear_selector();
  static const int kSelectorFieldNumber = 1;
  const std::string& selector() const;
  void set_selector(const std::string& value);
  void set_selector(std::string&& value);
  void set_selector(const char* value);
  void set_selector(const char* value, size_t size);
  std::string* mutable_selector();
  std::string* release_selector();
  void set_allocated_selector(std::string* selector);

  // string description = 2;
  void clear_description();
  static const int kDescriptionFieldNumber = 2;
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);

  // string deprecation_description = 3;
  void clear_deprecation_description();
  static const int kDeprecationDescriptionFieldNumber = 3;
  const std::string& deprecation_description() const;
  void set_deprecation_description(const std::string& value);
  void set_deprecation_description(std::string&& value);
  void set_deprecation_description(const char* value);
  void set_deprecation_description(const char* value, size_t size);
  std::string* mutable_deprecation_description();
  std::string* release_deprecation_description();
  void set_allocated_deprecation_description(std::string* deprecation_description);

  // @@protoc_insertion_point(class_scope:google.api.DocumentationRule)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr selector_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deprecation_description_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fapi_2fdocumentation_2eproto;
};
// -------------------------------------------------------------------

class Page :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.Page) */ {
 public:
  Page();
  virtual ~Page();

  Page(const Page& from);
  Page(Page&& from) noexcept
    : Page() {
    *this = ::std::move(from);
  }

  inline Page& operator=(const Page& from) {
    CopyFrom(from);
    return *this;
  }
  inline Page& operator=(Page&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Page& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Page* internal_default_instance() {
    return reinterpret_cast<const Page*>(
               &_Page_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Page* other);
  friend void swap(Page& a, Page& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Page* New() const final {
    return CreateMaybeMessage<Page>(nullptr);
  }

  Page* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Page>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Page& from);
  void MergeFrom(const Page& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Page* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.Page";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fapi_2fdocumentation_2eproto);
    return ::descriptor_table_google_2fapi_2fdocumentation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.api.Page subpages = 3;
  int subpages_size() const;
  void clear_subpages();
  static const int kSubpagesFieldNumber = 3;
  ::google::api::Page* mutable_subpages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::Page >*
      mutable_subpages();
  const ::google::api::Page& subpages(int index) const;
  ::google::api::Page* add_subpages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::Page >&
      subpages() const;

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // string content = 2;
  void clear_content();
  static const int kContentFieldNumber = 2;
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);

  // @@protoc_insertion_point(class_scope:google.api.Page)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::Page > subpages_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fapi_2fdocumentation_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Documentation

// string summary = 1;
inline void Documentation::clear_summary() {
  summary_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Documentation::summary() const {
  // @@protoc_insertion_point(field_get:google.api.Documentation.summary)
  return summary_.GetNoArena();
}
inline void Documentation::set_summary(const std::string& value) {
  
  summary_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.Documentation.summary)
}
inline void Documentation::set_summary(std::string&& value) {
  
  summary_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.api.Documentation.summary)
}
inline void Documentation::set_summary(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  summary_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.Documentation.summary)
}
inline void Documentation::set_summary(const char* value, size_t size) {
  
  summary_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.Documentation.summary)
}
inline std::string* Documentation::mutable_summary() {
  
  // @@protoc_insertion_point(field_mutable:google.api.Documentation.summary)
  return summary_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Documentation::release_summary() {
  // @@protoc_insertion_point(field_release:google.api.Documentation.summary)
  
  return summary_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Documentation::set_allocated_summary(std::string* summary) {
  if (summary != nullptr) {
    
  } else {
    
  }
  summary_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), summary);
  // @@protoc_insertion_point(field_set_allocated:google.api.Documentation.summary)
}

// repeated .google.api.Page pages = 5;
inline int Documentation::pages_size() const {
  return pages_.size();
}
inline void Documentation::clear_pages() {
  pages_.Clear();
}
inline ::google::api::Page* Documentation::mutable_pages(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.Documentation.pages)
  return pages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::Page >*
Documentation::mutable_pages() {
  // @@protoc_insertion_point(field_mutable_list:google.api.Documentation.pages)
  return &pages_;
}
inline const ::google::api::Page& Documentation::pages(int index) const {
  // @@protoc_insertion_point(field_get:google.api.Documentation.pages)
  return pages_.Get(index);
}
inline ::google::api::Page* Documentation::add_pages() {
  // @@protoc_insertion_point(field_add:google.api.Documentation.pages)
  return pages_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::Page >&
Documentation::pages() const {
  // @@protoc_insertion_point(field_list:google.api.Documentation.pages)
  return pages_;
}

// repeated .google.api.DocumentationRule rules = 3;
inline int Documentation::rules_size() const {
  return rules_.size();
}
inline void Documentation::clear_rules() {
  rules_.Clear();
}
inline ::google::api::DocumentationRule* Documentation::mutable_rules(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.Documentation.rules)
  return rules_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::DocumentationRule >*
Documentation::mutable_rules() {
  // @@protoc_insertion_point(field_mutable_list:google.api.Documentation.rules)
  return &rules_;
}
inline const ::google::api::DocumentationRule& Documentation::rules(int index) const {
  // @@protoc_insertion_point(field_get:google.api.Documentation.rules)
  return rules_.Get(index);
}
inline ::google::api::DocumentationRule* Documentation::add_rules() {
  // @@protoc_insertion_point(field_add:google.api.Documentation.rules)
  return rules_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::DocumentationRule >&
Documentation::rules() const {
  // @@protoc_insertion_point(field_list:google.api.Documentation.rules)
  return rules_;
}

// string documentation_root_url = 4;
inline void Documentation::clear_documentation_root_url() {
  documentation_root_url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Documentation::documentation_root_url() const {
  // @@protoc_insertion_point(field_get:google.api.Documentation.documentation_root_url)
  return documentation_root_url_.GetNoArena();
}
inline void Documentation::set_documentation_root_url(const std::string& value) {
  
  documentation_root_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.Documentation.documentation_root_url)
}
inline void Documentation::set_documentation_root_url(std::string&& value) {
  
  documentation_root_url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.api.Documentation.documentation_root_url)
}
inline void Documentation::set_documentation_root_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  documentation_root_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.Documentation.documentation_root_url)
}
inline void Documentation::set_documentation_root_url(const char* value, size_t size) {
  
  documentation_root_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.Documentation.documentation_root_url)
}
inline std::string* Documentation::mutable_documentation_root_url() {
  
  // @@protoc_insertion_point(field_mutable:google.api.Documentation.documentation_root_url)
  return documentation_root_url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Documentation::release_documentation_root_url() {
  // @@protoc_insertion_point(field_release:google.api.Documentation.documentation_root_url)
  
  return documentation_root_url_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Documentation::set_allocated_documentation_root_url(std::string* documentation_root_url) {
  if (documentation_root_url != nullptr) {
    
  } else {
    
  }
  documentation_root_url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), documentation_root_url);
  // @@protoc_insertion_point(field_set_allocated:google.api.Documentation.documentation_root_url)
}

// string overview = 2;
inline void Documentation::clear_overview() {
  overview_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Documentation::overview() const {
  // @@protoc_insertion_point(field_get:google.api.Documentation.overview)
  return overview_.GetNoArena();
}
inline void Documentation::set_overview(const std::string& value) {
  
  overview_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.Documentation.overview)
}
inline void Documentation::set_overview(std::string&& value) {
  
  overview_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.api.Documentation.overview)
}
inline void Documentation::set_overview(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  overview_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.Documentation.overview)
}
inline void Documentation::set_overview(const char* value, size_t size) {
  
  overview_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.Documentation.overview)
}
inline std::string* Documentation::mutable_overview() {
  
  // @@protoc_insertion_point(field_mutable:google.api.Documentation.overview)
  return overview_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Documentation::release_overview() {
  // @@protoc_insertion_point(field_release:google.api.Documentation.overview)
  
  return overview_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Documentation::set_allocated_overview(std::string* overview) {
  if (overview != nullptr) {
    
  } else {
    
  }
  overview_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), overview);
  // @@protoc_insertion_point(field_set_allocated:google.api.Documentation.overview)
}

// -------------------------------------------------------------------

// DocumentationRule

// string selector = 1;
inline void DocumentationRule::clear_selector() {
  selector_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DocumentationRule::selector() const {
  // @@protoc_insertion_point(field_get:google.api.DocumentationRule.selector)
  return selector_.GetNoArena();
}
inline void DocumentationRule::set_selector(const std::string& value) {
  
  selector_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.DocumentationRule.selector)
}
inline void DocumentationRule::set_selector(std::string&& value) {
  
  selector_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.api.DocumentationRule.selector)
}
inline void DocumentationRule::set_selector(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  selector_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.DocumentationRule.selector)
}
inline void DocumentationRule::set_selector(const char* value, size_t size) {
  
  selector_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.DocumentationRule.selector)
}
inline std::string* DocumentationRule::mutable_selector() {
  
  // @@protoc_insertion_point(field_mutable:google.api.DocumentationRule.selector)
  return selector_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DocumentationRule::release_selector() {
  // @@protoc_insertion_point(field_release:google.api.DocumentationRule.selector)
  
  return selector_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DocumentationRule::set_allocated_selector(std::string* selector) {
  if (selector != nullptr) {
    
  } else {
    
  }
  selector_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), selector);
  // @@protoc_insertion_point(field_set_allocated:google.api.DocumentationRule.selector)
}

// string description = 2;
inline void DocumentationRule::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DocumentationRule::description() const {
  // @@protoc_insertion_point(field_get:google.api.DocumentationRule.description)
  return description_.GetNoArena();
}
inline void DocumentationRule::set_description(const std::string& value) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.DocumentationRule.description)
}
inline void DocumentationRule::set_description(std::string&& value) {
  
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.api.DocumentationRule.description)
}
inline void DocumentationRule::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.DocumentationRule.description)
}
inline void DocumentationRule::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.DocumentationRule.description)
}
inline std::string* DocumentationRule::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:google.api.DocumentationRule.description)
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DocumentationRule::release_description() {
  // @@protoc_insertion_point(field_release:google.api.DocumentationRule.description)
  
  return description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DocumentationRule::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:google.api.DocumentationRule.description)
}

// string deprecation_description = 3;
inline void DocumentationRule::clear_deprecation_description() {
  deprecation_description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DocumentationRule::deprecation_description() const {
  // @@protoc_insertion_point(field_get:google.api.DocumentationRule.deprecation_description)
  return deprecation_description_.GetNoArena();
}
inline void DocumentationRule::set_deprecation_description(const std::string& value) {
  
  deprecation_description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.DocumentationRule.deprecation_description)
}
inline void DocumentationRule::set_deprecation_description(std::string&& value) {
  
  deprecation_description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.api.DocumentationRule.deprecation_description)
}
inline void DocumentationRule::set_deprecation_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  deprecation_description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.DocumentationRule.deprecation_description)
}
inline void DocumentationRule::set_deprecation_description(const char* value, size_t size) {
  
  deprecation_description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.DocumentationRule.deprecation_description)
}
inline std::string* DocumentationRule::mutable_deprecation_description() {
  
  // @@protoc_insertion_point(field_mutable:google.api.DocumentationRule.deprecation_description)
  return deprecation_description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DocumentationRule::release_deprecation_description() {
  // @@protoc_insertion_point(field_release:google.api.DocumentationRule.deprecation_description)
  
  return deprecation_description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DocumentationRule::set_allocated_deprecation_description(std::string* deprecation_description) {
  if (deprecation_description != nullptr) {
    
  } else {
    
  }
  deprecation_description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), deprecation_description);
  // @@protoc_insertion_point(field_set_allocated:google.api.DocumentationRule.deprecation_description)
}

// -------------------------------------------------------------------

// Page

// string name = 1;
inline void Page::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Page::name() const {
  // @@protoc_insertion_point(field_get:google.api.Page.name)
  return name_.GetNoArena();
}
inline void Page::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.Page.name)
}
inline void Page::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.api.Page.name)
}
inline void Page::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.Page.name)
}
inline void Page::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.Page.name)
}
inline std::string* Page::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.api.Page.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Page::release_name() {
  // @@protoc_insertion_point(field_release:google.api.Page.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Page::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.api.Page.name)
}

// string content = 2;
inline void Page::clear_content() {
  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Page::content() const {
  // @@protoc_insertion_point(field_get:google.api.Page.content)
  return content_.GetNoArena();
}
inline void Page::set_content(const std::string& value) {
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.api.Page.content)
}
inline void Page::set_content(std::string&& value) {
  
  content_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.api.Page.content)
}
inline void Page::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.Page.content)
}
inline void Page::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.Page.content)
}
inline std::string* Page::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:google.api.Page.content)
  return content_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Page::release_content() {
  // @@protoc_insertion_point(field_release:google.api.Page.content)
  
  return content_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Page::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:google.api.Page.content)
}

// repeated .google.api.Page subpages = 3;
inline int Page::subpages_size() const {
  return subpages_.size();
}
inline void Page::clear_subpages() {
  subpages_.Clear();
}
inline ::google::api::Page* Page::mutable_subpages(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.Page.subpages)
  return subpages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::Page >*
Page::mutable_subpages() {
  // @@protoc_insertion_point(field_mutable_list:google.api.Page.subpages)
  return &subpages_;
}
inline const ::google::api::Page& Page::subpages(int index) const {
  // @@protoc_insertion_point(field_get:google.api.Page.subpages)
  return subpages_.Get(index);
}
inline ::google::api::Page* Page::add_subpages() {
  // @@protoc_insertion_point(field_add:google.api.Page.subpages)
  return subpages_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::Page >&
Page::subpages() const {
  // @@protoc_insertion_point(field_list:google.api.Page.subpages)
  return subpages_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace api
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fdocumentation_2eproto
