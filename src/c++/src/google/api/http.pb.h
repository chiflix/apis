// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/http.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fhttp_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fhttp_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fapi_2fhttp_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fapi_2fhttp_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fapi_2fhttp_2eproto;
namespace google {
namespace api {
class CustomHttpPattern;
class CustomHttpPatternDefaultTypeInternal;
extern CustomHttpPatternDefaultTypeInternal _CustomHttpPattern_default_instance_;
class Http;
class HttpDefaultTypeInternal;
extern HttpDefaultTypeInternal _Http_default_instance_;
class HttpRule;
class HttpRuleDefaultTypeInternal;
extern HttpRuleDefaultTypeInternal _HttpRule_default_instance_;
}  // namespace api
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::api::CustomHttpPattern* Arena::CreateMaybeMessage<::google::api::CustomHttpPattern>(Arena*);
template<> ::google::api::Http* Arena::CreateMaybeMessage<::google::api::Http>(Arena*);
template<> ::google::api::HttpRule* Arena::CreateMaybeMessage<::google::api::HttpRule>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace api {

// ===================================================================

class Http :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.Http) */ {
 public:
  Http();
  virtual ~Http();

  Http(const Http& from);
  Http(Http&& from) noexcept
    : Http() {
    *this = ::std::move(from);
  }

  inline Http& operator=(const Http& from) {
    CopyFrom(from);
    return *this;
  }
  inline Http& operator=(Http&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Http& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Http* internal_default_instance() {
    return reinterpret_cast<const Http*>(
               &_Http_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void UnsafeArenaSwap(Http* other);
  void Swap(Http* other);
  friend void swap(Http& a, Http& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Http* New() const final {
    return CreateMaybeMessage<Http>(nullptr);
  }

  Http* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Http>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Http& from);
  void MergeFrom(const Http& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Http* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.Http";
  }
  protected:
  explicit Http(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fapi_2fhttp_2eproto);
    return ::descriptor_table_google_2fapi_2fhttp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.api.HttpRule rules = 1;
  int rules_size() const;
  void clear_rules();
  static const int kRulesFieldNumber = 1;
  ::google::api::HttpRule* mutable_rules(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::HttpRule >*
      mutable_rules();
  const ::google::api::HttpRule& rules(int index) const;
  ::google::api::HttpRule* add_rules();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::HttpRule >&
      rules() const;

  // bool fully_decode_reserved_expansion = 2;
  void clear_fully_decode_reserved_expansion();
  static const int kFullyDecodeReservedExpansionFieldNumber = 2;
  bool fully_decode_reserved_expansion() const;
  void set_fully_decode_reserved_expansion(bool value);

  // @@protoc_insertion_point(class_scope:google.api.Http)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::HttpRule > rules_;
  bool fully_decode_reserved_expansion_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fapi_2fhttp_2eproto;
};
// -------------------------------------------------------------------

class HttpRule :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.HttpRule) */ {
 public:
  HttpRule();
  virtual ~HttpRule();

  HttpRule(const HttpRule& from);
  HttpRule(HttpRule&& from) noexcept
    : HttpRule() {
    *this = ::std::move(from);
  }

  inline HttpRule& operator=(const HttpRule& from) {
    CopyFrom(from);
    return *this;
  }
  inline HttpRule& operator=(HttpRule&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HttpRule& default_instance();

  enum PatternCase {
    kGet = 2,
    kPut = 3,
    kPost = 4,
    kDelete = 5,
    kPatch = 6,
    kCustom = 8,
    PATTERN_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HttpRule* internal_default_instance() {
    return reinterpret_cast<const HttpRule*>(
               &_HttpRule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void UnsafeArenaSwap(HttpRule* other);
  void Swap(HttpRule* other);
  friend void swap(HttpRule& a, HttpRule& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HttpRule* New() const final {
    return CreateMaybeMessage<HttpRule>(nullptr);
  }

  HttpRule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HttpRule>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HttpRule& from);
  void MergeFrom(const HttpRule& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HttpRule* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.HttpRule";
  }
  protected:
  explicit HttpRule(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fapi_2fhttp_2eproto);
    return ::descriptor_table_google_2fapi_2fhttp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.api.HttpRule additional_bindings = 11;
  int additional_bindings_size() const;
  void clear_additional_bindings();
  static const int kAdditionalBindingsFieldNumber = 11;
  ::google::api::HttpRule* mutable_additional_bindings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::HttpRule >*
      mutable_additional_bindings();
  const ::google::api::HttpRule& additional_bindings(int index) const;
  ::google::api::HttpRule* add_additional_bindings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::HttpRule >&
      additional_bindings() const;

  // string selector = 1;
  void clear_selector();
  static const int kSelectorFieldNumber = 1;
  const std::string& selector() const;
  void set_selector(const std::string& value);
  void set_selector(std::string&& value);
  void set_selector(const char* value);
  void set_selector(const char* value, size_t size);
  std::string* mutable_selector();
  std::string* release_selector();
  void set_allocated_selector(std::string* selector);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_selector();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_selector(
      std::string* selector);

  // string body = 7;
  void clear_body();
  static const int kBodyFieldNumber = 7;
  const std::string& body() const;
  void set_body(const std::string& value);
  void set_body(std::string&& value);
  void set_body(const char* value);
  void set_body(const char* value, size_t size);
  std::string* mutable_body();
  std::string* release_body();
  void set_allocated_body(std::string* body);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_body();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_body(
      std::string* body);

  // string get = 2;
  private:
  bool has_get() const;
  public:
  void clear_get();
  static const int kGetFieldNumber = 2;
  const std::string& get() const;
  void set_get(const std::string& value);
  void set_get(std::string&& value);
  void set_get(const char* value);
  void set_get(const char* value, size_t size);
  std::string* mutable_get();
  std::string* release_get();
  void set_allocated_get(std::string* get);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_get();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_get(
      std::string* get);

  // string put = 3;
  private:
  bool has_put() const;
  public:
  void clear_put();
  static const int kPutFieldNumber = 3;
  const std::string& put() const;
  void set_put(const std::string& value);
  void set_put(std::string&& value);
  void set_put(const char* value);
  void set_put(const char* value, size_t size);
  std::string* mutable_put();
  std::string* release_put();
  void set_allocated_put(std::string* put);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_put();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_put(
      std::string* put);

  // string post = 4;
  private:
  bool has_post() const;
  public:
  void clear_post();
  static const int kPostFieldNumber = 4;
  const std::string& post() const;
  void set_post(const std::string& value);
  void set_post(std::string&& value);
  void set_post(const char* value);
  void set_post(const char* value, size_t size);
  std::string* mutable_post();
  std::string* release_post();
  void set_allocated_post(std::string* post);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_post();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_post(
      std::string* post);

  // string delete = 5;
  private:
  bool has_delete_() const;
  public:
  void clear_delete_();
  static const int kDeleteFieldNumber = 5;
  const std::string& delete_() const;
  void set_delete_(const std::string& value);
  void set_delete_(std::string&& value);
  void set_delete_(const char* value);
  void set_delete_(const char* value, size_t size);
  std::string* mutable_delete_();
  std::string* release_delete_();
  void set_allocated_delete_(std::string* delete_);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_delete_();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_delete_(
      std::string* delete_);

  // string patch = 6;
  private:
  bool has_patch() const;
  public:
  void clear_patch();
  static const int kPatchFieldNumber = 6;
  const std::string& patch() const;
  void set_patch(const std::string& value);
  void set_patch(std::string&& value);
  void set_patch(const char* value);
  void set_patch(const char* value, size_t size);
  std::string* mutable_patch();
  std::string* release_patch();
  void set_allocated_patch(std::string* patch);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_patch();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_patch(
      std::string* patch);

  // .google.api.CustomHttpPattern custom = 8;
  bool has_custom() const;
  void clear_custom();
  static const int kCustomFieldNumber = 8;
  const ::google::api::CustomHttpPattern& custom() const;
  ::google::api::CustomHttpPattern* release_custom();
  ::google::api::CustomHttpPattern* mutable_custom();
  void set_allocated_custom(::google::api::CustomHttpPattern* custom);
  void unsafe_arena_set_allocated_custom(
      ::google::api::CustomHttpPattern* custom);
  ::google::api::CustomHttpPattern* unsafe_arena_release_custom();

  void clear_pattern();
  PatternCase pattern_case() const;
  // @@protoc_insertion_point(class_scope:google.api.HttpRule)
 private:
  class HasBitSetters;
  void set_has_get();
  void set_has_put();
  void set_has_post();
  void set_has_delete_();
  void set_has_patch();
  void set_has_custom();

  inline bool has_pattern() const;
  inline void clear_has_pattern();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::HttpRule > additional_bindings_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr selector_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_;
  union PatternUnion {
    PatternUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr get_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr put_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr post_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr delete__;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr patch_;
    ::google::api::CustomHttpPattern* custom_;
  } pattern_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_google_2fapi_2fhttp_2eproto;
};
// -------------------------------------------------------------------

class CustomHttpPattern :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.CustomHttpPattern) */ {
 public:
  CustomHttpPattern();
  virtual ~CustomHttpPattern();

  CustomHttpPattern(const CustomHttpPattern& from);
  CustomHttpPattern(CustomHttpPattern&& from) noexcept
    : CustomHttpPattern() {
    *this = ::std::move(from);
  }

  inline CustomHttpPattern& operator=(const CustomHttpPattern& from) {
    CopyFrom(from);
    return *this;
  }
  inline CustomHttpPattern& operator=(CustomHttpPattern&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CustomHttpPattern& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CustomHttpPattern* internal_default_instance() {
    return reinterpret_cast<const CustomHttpPattern*>(
               &_CustomHttpPattern_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void UnsafeArenaSwap(CustomHttpPattern* other);
  void Swap(CustomHttpPattern* other);
  friend void swap(CustomHttpPattern& a, CustomHttpPattern& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CustomHttpPattern* New() const final {
    return CreateMaybeMessage<CustomHttpPattern>(nullptr);
  }

  CustomHttpPattern* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CustomHttpPattern>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CustomHttpPattern& from);
  void MergeFrom(const CustomHttpPattern& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CustomHttpPattern* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.CustomHttpPattern";
  }
  protected:
  explicit CustomHttpPattern(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fapi_2fhttp_2eproto);
    return ::descriptor_table_google_2fapi_2fhttp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string kind = 1;
  void clear_kind();
  static const int kKindFieldNumber = 1;
  const std::string& kind() const;
  void set_kind(const std::string& value);
  void set_kind(std::string&& value);
  void set_kind(const char* value);
  void set_kind(const char* value, size_t size);
  std::string* mutable_kind();
  std::string* release_kind();
  void set_allocated_kind(std::string* kind);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_kind();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_kind(
      std::string* kind);

  // string path = 2;
  void clear_path();
  static const int kPathFieldNumber = 2;
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_path(
      std::string* path);

  // @@protoc_insertion_point(class_scope:google.api.CustomHttpPattern)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr kind_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fapi_2fhttp_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Http

// repeated .google.api.HttpRule rules = 1;
inline int Http::rules_size() const {
  return rules_.size();
}
inline void Http::clear_rules() {
  rules_.Clear();
}
inline ::google::api::HttpRule* Http::mutable_rules(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.Http.rules)
  return rules_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::HttpRule >*
Http::mutable_rules() {
  // @@protoc_insertion_point(field_mutable_list:google.api.Http.rules)
  return &rules_;
}
inline const ::google::api::HttpRule& Http::rules(int index) const {
  // @@protoc_insertion_point(field_get:google.api.Http.rules)
  return rules_.Get(index);
}
inline ::google::api::HttpRule* Http::add_rules() {
  // @@protoc_insertion_point(field_add:google.api.Http.rules)
  return rules_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::HttpRule >&
Http::rules() const {
  // @@protoc_insertion_point(field_list:google.api.Http.rules)
  return rules_;
}

// bool fully_decode_reserved_expansion = 2;
inline void Http::clear_fully_decode_reserved_expansion() {
  fully_decode_reserved_expansion_ = false;
}
inline bool Http::fully_decode_reserved_expansion() const {
  // @@protoc_insertion_point(field_get:google.api.Http.fully_decode_reserved_expansion)
  return fully_decode_reserved_expansion_;
}
inline void Http::set_fully_decode_reserved_expansion(bool value) {
  
  fully_decode_reserved_expansion_ = value;
  // @@protoc_insertion_point(field_set:google.api.Http.fully_decode_reserved_expansion)
}

// -------------------------------------------------------------------

// HttpRule

// string selector = 1;
inline void HttpRule::clear_selector() {
  selector_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& HttpRule::selector() const {
  // @@protoc_insertion_point(field_get:google.api.HttpRule.selector)
  return selector_.Get();
}
inline void HttpRule::set_selector(const std::string& value) {
  
  selector_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.api.HttpRule.selector)
}
inline void HttpRule::set_selector(std::string&& value) {
  
  selector_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.api.HttpRule.selector)
}
inline void HttpRule::set_selector(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  selector_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.api.HttpRule.selector)
}
inline void HttpRule::set_selector(const char* value,
    size_t size) {
  
  selector_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.api.HttpRule.selector)
}
inline std::string* HttpRule::mutable_selector() {
  
  // @@protoc_insertion_point(field_mutable:google.api.HttpRule.selector)
  return selector_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* HttpRule::release_selector() {
  // @@protoc_insertion_point(field_release:google.api.HttpRule.selector)
  
  return selector_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void HttpRule::set_allocated_selector(std::string* selector) {
  if (selector != nullptr) {
    
  } else {
    
  }
  selector_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), selector,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.api.HttpRule.selector)
}
inline std::string* HttpRule::unsafe_arena_release_selector() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.HttpRule.selector)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return selector_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void HttpRule::unsafe_arena_set_allocated_selector(
    std::string* selector) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (selector != nullptr) {
    
  } else {
    
  }
  selector_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      selector, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.HttpRule.selector)
}

// string get = 2;
inline bool HttpRule::has_get() const {
  return pattern_case() == kGet;
}
inline void HttpRule::set_has_get() {
  _oneof_case_[0] = kGet;
}
inline void HttpRule::clear_get() {
  if (has_get()) {
    pattern_.get_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
    clear_has_pattern();
  }
}
inline const std::string& HttpRule::get() const {
  // @@protoc_insertion_point(field_get:google.api.HttpRule.get)
  if (has_get()) {
    return pattern_.get_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void HttpRule::set_get(const std::string& value) {
  if (!has_get()) {
    clear_pattern();
    set_has_get();
    pattern_.get_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  pattern_.get_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.api.HttpRule.get)
}
inline void HttpRule::set_get(std::string&& value) {
  // @@protoc_insertion_point(field_set:google.api.HttpRule.get)
  if (!has_get()) {
    clear_pattern();
    set_has_get();
    pattern_.get_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  pattern_.get_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.api.HttpRule.get)
}
inline void HttpRule::set_get(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_get()) {
    clear_pattern();
    set_has_get();
    pattern_.get_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  pattern_.get_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.api.HttpRule.get)
}
inline void HttpRule::set_get(const char* value,
                             size_t size) {
  if (!has_get()) {
    clear_pattern();
    set_has_get();
    pattern_.get_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  pattern_.get_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.api.HttpRule.get)
}
inline std::string* HttpRule::mutable_get() {
  if (!has_get()) {
    clear_pattern();
    set_has_get();
    pattern_.get_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return pattern_.get_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_mutable:google.api.HttpRule.get)
}
inline std::string* HttpRule::release_get() {
  // @@protoc_insertion_point(field_release:google.api.HttpRule.get)
  if (has_get()) {
    clear_has_pattern();
    return pattern_.get_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
  } else {
    return nullptr;
  }
}
inline void HttpRule::set_allocated_get(std::string* get) {
  if (has_pattern()) {
    clear_pattern();
  }
  if (get != nullptr) {
    set_has_get();
    pattern_.get_.UnsafeSetDefault(get);
  }
  // @@protoc_insertion_point(field_set_allocated:google.api.HttpRule.get)
}
inline std::string* HttpRule::unsafe_arena_release_get() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.HttpRule.get)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (has_get()) {
    clear_has_pattern();
    return pattern_.get_.UnsafeArenaRelease(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  } else {
    return nullptr;
  }
}
inline void HttpRule::unsafe_arena_set_allocated_get(std::string* get) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (!has_get()) {
    pattern_.get_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  clear_pattern();
  if (get) {
    set_has_get();
    pattern_.get_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), get, GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.HttpRule.get)
}

// string put = 3;
inline bool HttpRule::has_put() const {
  return pattern_case() == kPut;
}
inline void HttpRule::set_has_put() {
  _oneof_case_[0] = kPut;
}
inline void HttpRule::clear_put() {
  if (has_put()) {
    pattern_.put_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
    clear_has_pattern();
  }
}
inline const std::string& HttpRule::put() const {
  // @@protoc_insertion_point(field_get:google.api.HttpRule.put)
  if (has_put()) {
    return pattern_.put_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void HttpRule::set_put(const std::string& value) {
  if (!has_put()) {
    clear_pattern();
    set_has_put();
    pattern_.put_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  pattern_.put_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.api.HttpRule.put)
}
inline void HttpRule::set_put(std::string&& value) {
  // @@protoc_insertion_point(field_set:google.api.HttpRule.put)
  if (!has_put()) {
    clear_pattern();
    set_has_put();
    pattern_.put_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  pattern_.put_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.api.HttpRule.put)
}
inline void HttpRule::set_put(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_put()) {
    clear_pattern();
    set_has_put();
    pattern_.put_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  pattern_.put_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.api.HttpRule.put)
}
inline void HttpRule::set_put(const char* value,
                             size_t size) {
  if (!has_put()) {
    clear_pattern();
    set_has_put();
    pattern_.put_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  pattern_.put_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.api.HttpRule.put)
}
inline std::string* HttpRule::mutable_put() {
  if (!has_put()) {
    clear_pattern();
    set_has_put();
    pattern_.put_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return pattern_.put_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_mutable:google.api.HttpRule.put)
}
inline std::string* HttpRule::release_put() {
  // @@protoc_insertion_point(field_release:google.api.HttpRule.put)
  if (has_put()) {
    clear_has_pattern();
    return pattern_.put_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
  } else {
    return nullptr;
  }
}
inline void HttpRule::set_allocated_put(std::string* put) {
  if (has_pattern()) {
    clear_pattern();
  }
  if (put != nullptr) {
    set_has_put();
    pattern_.put_.UnsafeSetDefault(put);
  }
  // @@protoc_insertion_point(field_set_allocated:google.api.HttpRule.put)
}
inline std::string* HttpRule::unsafe_arena_release_put() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.HttpRule.put)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (has_put()) {
    clear_has_pattern();
    return pattern_.put_.UnsafeArenaRelease(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  } else {
    return nullptr;
  }
}
inline void HttpRule::unsafe_arena_set_allocated_put(std::string* put) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (!has_put()) {
    pattern_.put_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  clear_pattern();
  if (put) {
    set_has_put();
    pattern_.put_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), put, GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.HttpRule.put)
}

// string post = 4;
inline bool HttpRule::has_post() const {
  return pattern_case() == kPost;
}
inline void HttpRule::set_has_post() {
  _oneof_case_[0] = kPost;
}
inline void HttpRule::clear_post() {
  if (has_post()) {
    pattern_.post_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
    clear_has_pattern();
  }
}
inline const std::string& HttpRule::post() const {
  // @@protoc_insertion_point(field_get:google.api.HttpRule.post)
  if (has_post()) {
    return pattern_.post_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void HttpRule::set_post(const std::string& value) {
  if (!has_post()) {
    clear_pattern();
    set_has_post();
    pattern_.post_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  pattern_.post_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.api.HttpRule.post)
}
inline void HttpRule::set_post(std::string&& value) {
  // @@protoc_insertion_point(field_set:google.api.HttpRule.post)
  if (!has_post()) {
    clear_pattern();
    set_has_post();
    pattern_.post_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  pattern_.post_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.api.HttpRule.post)
}
inline void HttpRule::set_post(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_post()) {
    clear_pattern();
    set_has_post();
    pattern_.post_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  pattern_.post_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.api.HttpRule.post)
}
inline void HttpRule::set_post(const char* value,
                             size_t size) {
  if (!has_post()) {
    clear_pattern();
    set_has_post();
    pattern_.post_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  pattern_.post_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.api.HttpRule.post)
}
inline std::string* HttpRule::mutable_post() {
  if (!has_post()) {
    clear_pattern();
    set_has_post();
    pattern_.post_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return pattern_.post_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_mutable:google.api.HttpRule.post)
}
inline std::string* HttpRule::release_post() {
  // @@protoc_insertion_point(field_release:google.api.HttpRule.post)
  if (has_post()) {
    clear_has_pattern();
    return pattern_.post_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
  } else {
    return nullptr;
  }
}
inline void HttpRule::set_allocated_post(std::string* post) {
  if (has_pattern()) {
    clear_pattern();
  }
  if (post != nullptr) {
    set_has_post();
    pattern_.post_.UnsafeSetDefault(post);
  }
  // @@protoc_insertion_point(field_set_allocated:google.api.HttpRule.post)
}
inline std::string* HttpRule::unsafe_arena_release_post() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.HttpRule.post)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (has_post()) {
    clear_has_pattern();
    return pattern_.post_.UnsafeArenaRelease(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  } else {
    return nullptr;
  }
}
inline void HttpRule::unsafe_arena_set_allocated_post(std::string* post) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (!has_post()) {
    pattern_.post_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  clear_pattern();
  if (post) {
    set_has_post();
    pattern_.post_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), post, GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.HttpRule.post)
}

// string delete = 5;
inline bool HttpRule::has_delete_() const {
  return pattern_case() == kDelete;
}
inline void HttpRule::set_has_delete_() {
  _oneof_case_[0] = kDelete;
}
inline void HttpRule::clear_delete_() {
  if (has_delete_()) {
    pattern_.delete__.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
    clear_has_pattern();
  }
}
inline const std::string& HttpRule::delete_() const {
  // @@protoc_insertion_point(field_get:google.api.HttpRule.delete)
  if (has_delete_()) {
    return pattern_.delete__.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void HttpRule::set_delete_(const std::string& value) {
  if (!has_delete_()) {
    clear_pattern();
    set_has_delete_();
    pattern_.delete__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  pattern_.delete__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.api.HttpRule.delete)
}
inline void HttpRule::set_delete_(std::string&& value) {
  // @@protoc_insertion_point(field_set:google.api.HttpRule.delete)
  if (!has_delete_()) {
    clear_pattern();
    set_has_delete_();
    pattern_.delete__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  pattern_.delete__.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.api.HttpRule.delete)
}
inline void HttpRule::set_delete_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_delete_()) {
    clear_pattern();
    set_has_delete_();
    pattern_.delete__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  pattern_.delete__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.api.HttpRule.delete)
}
inline void HttpRule::set_delete_(const char* value,
                             size_t size) {
  if (!has_delete_()) {
    clear_pattern();
    set_has_delete_();
    pattern_.delete__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  pattern_.delete__.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.api.HttpRule.delete)
}
inline std::string* HttpRule::mutable_delete_() {
  if (!has_delete_()) {
    clear_pattern();
    set_has_delete_();
    pattern_.delete__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return pattern_.delete__.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_mutable:google.api.HttpRule.delete)
}
inline std::string* HttpRule::release_delete_() {
  // @@protoc_insertion_point(field_release:google.api.HttpRule.delete)
  if (has_delete_()) {
    clear_has_pattern();
    return pattern_.delete__.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
  } else {
    return nullptr;
  }
}
inline void HttpRule::set_allocated_delete_(std::string* delete_) {
  if (has_pattern()) {
    clear_pattern();
  }
  if (delete_ != nullptr) {
    set_has_delete_();
    pattern_.delete__.UnsafeSetDefault(delete_);
  }
  // @@protoc_insertion_point(field_set_allocated:google.api.HttpRule.delete)
}
inline std::string* HttpRule::unsafe_arena_release_delete_() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.HttpRule.delete)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (has_delete_()) {
    clear_has_pattern();
    return pattern_.delete__.UnsafeArenaRelease(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  } else {
    return nullptr;
  }
}
inline void HttpRule::unsafe_arena_set_allocated_delete_(std::string* delete_) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (!has_delete_()) {
    pattern_.delete__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  clear_pattern();
  if (delete_) {
    set_has_delete_();
    pattern_.delete__.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), delete_, GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.HttpRule.delete)
}

// string patch = 6;
inline bool HttpRule::has_patch() const {
  return pattern_case() == kPatch;
}
inline void HttpRule::set_has_patch() {
  _oneof_case_[0] = kPatch;
}
inline void HttpRule::clear_patch() {
  if (has_patch()) {
    pattern_.patch_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
    clear_has_pattern();
  }
}
inline const std::string& HttpRule::patch() const {
  // @@protoc_insertion_point(field_get:google.api.HttpRule.patch)
  if (has_patch()) {
    return pattern_.patch_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void HttpRule::set_patch(const std::string& value) {
  if (!has_patch()) {
    clear_pattern();
    set_has_patch();
    pattern_.patch_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  pattern_.patch_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.api.HttpRule.patch)
}
inline void HttpRule::set_patch(std::string&& value) {
  // @@protoc_insertion_point(field_set:google.api.HttpRule.patch)
  if (!has_patch()) {
    clear_pattern();
    set_has_patch();
    pattern_.patch_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  pattern_.patch_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.api.HttpRule.patch)
}
inline void HttpRule::set_patch(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_patch()) {
    clear_pattern();
    set_has_patch();
    pattern_.patch_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  pattern_.patch_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.api.HttpRule.patch)
}
inline void HttpRule::set_patch(const char* value,
                             size_t size) {
  if (!has_patch()) {
    clear_pattern();
    set_has_patch();
    pattern_.patch_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  pattern_.patch_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.api.HttpRule.patch)
}
inline std::string* HttpRule::mutable_patch() {
  if (!has_patch()) {
    clear_pattern();
    set_has_patch();
    pattern_.patch_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return pattern_.patch_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_mutable:google.api.HttpRule.patch)
}
inline std::string* HttpRule::release_patch() {
  // @@protoc_insertion_point(field_release:google.api.HttpRule.patch)
  if (has_patch()) {
    clear_has_pattern();
    return pattern_.patch_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
  } else {
    return nullptr;
  }
}
inline void HttpRule::set_allocated_patch(std::string* patch) {
  if (has_pattern()) {
    clear_pattern();
  }
  if (patch != nullptr) {
    set_has_patch();
    pattern_.patch_.UnsafeSetDefault(patch);
  }
  // @@protoc_insertion_point(field_set_allocated:google.api.HttpRule.patch)
}
inline std::string* HttpRule::unsafe_arena_release_patch() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.HttpRule.patch)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (has_patch()) {
    clear_has_pattern();
    return pattern_.patch_.UnsafeArenaRelease(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  } else {
    return nullptr;
  }
}
inline void HttpRule::unsafe_arena_set_allocated_patch(std::string* patch) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (!has_patch()) {
    pattern_.patch_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  clear_pattern();
  if (patch) {
    set_has_patch();
    pattern_.patch_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), patch, GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.HttpRule.patch)
}

// .google.api.CustomHttpPattern custom = 8;
inline bool HttpRule::has_custom() const {
  return pattern_case() == kCustom;
}
inline void HttpRule::set_has_custom() {
  _oneof_case_[0] = kCustom;
}
inline void HttpRule::clear_custom() {
  if (has_custom()) {
    if (GetArenaNoVirtual() == nullptr) {
      delete pattern_.custom_;
    }
    clear_has_pattern();
  }
}
inline ::google::api::CustomHttpPattern* HttpRule::release_custom() {
  // @@protoc_insertion_point(field_release:google.api.HttpRule.custom)
  if (has_custom()) {
    clear_has_pattern();
      ::google::api::CustomHttpPattern* temp = pattern_.custom_;
    if (GetArenaNoVirtual() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    pattern_.custom_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::api::CustomHttpPattern& HttpRule::custom() const {
  // @@protoc_insertion_point(field_get:google.api.HttpRule.custom)
  return has_custom()
      ? *pattern_.custom_
      : *reinterpret_cast< ::google::api::CustomHttpPattern*>(&::google::api::_CustomHttpPattern_default_instance_);
}
inline ::google::api::CustomHttpPattern* HttpRule::unsafe_arena_release_custom() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.HttpRule.custom)
  if (has_custom()) {
    clear_has_pattern();
    ::google::api::CustomHttpPattern* temp = pattern_.custom_;
    pattern_.custom_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void HttpRule::unsafe_arena_set_allocated_custom(::google::api::CustomHttpPattern* custom) {
  clear_pattern();
  if (custom) {
    set_has_custom();
    pattern_.custom_ = custom;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.HttpRule.custom)
}
inline ::google::api::CustomHttpPattern* HttpRule::mutable_custom() {
  if (!has_custom()) {
    clear_pattern();
    set_has_custom();
    pattern_.custom_ = CreateMaybeMessage< ::google::api::CustomHttpPattern >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.api.HttpRule.custom)
  return pattern_.custom_;
}

// string body = 7;
inline void HttpRule::clear_body() {
  body_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& HttpRule::body() const {
  // @@protoc_insertion_point(field_get:google.api.HttpRule.body)
  return body_.Get();
}
inline void HttpRule::set_body(const std::string& value) {
  
  body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.api.HttpRule.body)
}
inline void HttpRule::set_body(std::string&& value) {
  
  body_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.api.HttpRule.body)
}
inline void HttpRule::set_body(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.api.HttpRule.body)
}
inline void HttpRule::set_body(const char* value,
    size_t size) {
  
  body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.api.HttpRule.body)
}
inline std::string* HttpRule::mutable_body() {
  
  // @@protoc_insertion_point(field_mutable:google.api.HttpRule.body)
  return body_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* HttpRule::release_body() {
  // @@protoc_insertion_point(field_release:google.api.HttpRule.body)
  
  return body_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void HttpRule::set_allocated_body(std::string* body) {
  if (body != nullptr) {
    
  } else {
    
  }
  body_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), body,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.api.HttpRule.body)
}
inline std::string* HttpRule::unsafe_arena_release_body() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.HttpRule.body)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return body_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void HttpRule::unsafe_arena_set_allocated_body(
    std::string* body) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (body != nullptr) {
    
  } else {
    
  }
  body_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      body, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.HttpRule.body)
}

// repeated .google.api.HttpRule additional_bindings = 11;
inline int HttpRule::additional_bindings_size() const {
  return additional_bindings_.size();
}
inline void HttpRule::clear_additional_bindings() {
  additional_bindings_.Clear();
}
inline ::google::api::HttpRule* HttpRule::mutable_additional_bindings(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.HttpRule.additional_bindings)
  return additional_bindings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::HttpRule >*
HttpRule::mutable_additional_bindings() {
  // @@protoc_insertion_point(field_mutable_list:google.api.HttpRule.additional_bindings)
  return &additional_bindings_;
}
inline const ::google::api::HttpRule& HttpRule::additional_bindings(int index) const {
  // @@protoc_insertion_point(field_get:google.api.HttpRule.additional_bindings)
  return additional_bindings_.Get(index);
}
inline ::google::api::HttpRule* HttpRule::add_additional_bindings() {
  // @@protoc_insertion_point(field_add:google.api.HttpRule.additional_bindings)
  return additional_bindings_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::HttpRule >&
HttpRule::additional_bindings() const {
  // @@protoc_insertion_point(field_list:google.api.HttpRule.additional_bindings)
  return additional_bindings_;
}

inline bool HttpRule::has_pattern() const {
  return pattern_case() != PATTERN_NOT_SET;
}
inline void HttpRule::clear_has_pattern() {
  _oneof_case_[0] = PATTERN_NOT_SET;
}
inline HttpRule::PatternCase HttpRule::pattern_case() const {
  return HttpRule::PatternCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CustomHttpPattern

// string kind = 1;
inline void CustomHttpPattern::clear_kind() {
  kind_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& CustomHttpPattern::kind() const {
  // @@protoc_insertion_point(field_get:google.api.CustomHttpPattern.kind)
  return kind_.Get();
}
inline void CustomHttpPattern::set_kind(const std::string& value) {
  
  kind_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.api.CustomHttpPattern.kind)
}
inline void CustomHttpPattern::set_kind(std::string&& value) {
  
  kind_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.api.CustomHttpPattern.kind)
}
inline void CustomHttpPattern::set_kind(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  kind_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.api.CustomHttpPattern.kind)
}
inline void CustomHttpPattern::set_kind(const char* value,
    size_t size) {
  
  kind_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.api.CustomHttpPattern.kind)
}
inline std::string* CustomHttpPattern::mutable_kind() {
  
  // @@protoc_insertion_point(field_mutable:google.api.CustomHttpPattern.kind)
  return kind_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* CustomHttpPattern::release_kind() {
  // @@protoc_insertion_point(field_release:google.api.CustomHttpPattern.kind)
  
  return kind_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void CustomHttpPattern::set_allocated_kind(std::string* kind) {
  if (kind != nullptr) {
    
  } else {
    
  }
  kind_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), kind,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.api.CustomHttpPattern.kind)
}
inline std::string* CustomHttpPattern::unsafe_arena_release_kind() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.CustomHttpPattern.kind)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return kind_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void CustomHttpPattern::unsafe_arena_set_allocated_kind(
    std::string* kind) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (kind != nullptr) {
    
  } else {
    
  }
  kind_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      kind, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.CustomHttpPattern.kind)
}

// string path = 2;
inline void CustomHttpPattern::clear_path() {
  path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& CustomHttpPattern::path() const {
  // @@protoc_insertion_point(field_get:google.api.CustomHttpPattern.path)
  return path_.Get();
}
inline void CustomHttpPattern::set_path(const std::string& value) {
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.api.CustomHttpPattern.path)
}
inline void CustomHttpPattern::set_path(std::string&& value) {
  
  path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.api.CustomHttpPattern.path)
}
inline void CustomHttpPattern::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.api.CustomHttpPattern.path)
}
inline void CustomHttpPattern::set_path(const char* value,
    size_t size) {
  
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.api.CustomHttpPattern.path)
}
inline std::string* CustomHttpPattern::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:google.api.CustomHttpPattern.path)
  return path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* CustomHttpPattern::release_path() {
  // @@protoc_insertion_point(field_release:google.api.CustomHttpPattern.path)
  
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void CustomHttpPattern::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.api.CustomHttpPattern.path)
}
inline std::string* CustomHttpPattern::unsafe_arena_release_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.CustomHttpPattern.path)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void CustomHttpPattern::unsafe_arena_set_allocated_path(
    std::string* path) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (path != nullptr) {
    
  } else {
    
  }
  path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      path, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.CustomHttpPattern.path)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace api
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fhttp_2eproto
