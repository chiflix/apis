// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/api/auth.pb.h"
#include "google/api/backend.pb.h"
#include "google/api/billing.pb.h"
#include "google/api/context.pb.h"
#include "google/api/control.pb.h"
#include "google/api/documentation.pb.h"
#include "google/api/endpoint.pb.h"
#include "google/api/experimental/experimental.pb.h"
#include "google/api/http.pb.h"
#include "google/api/label.pb.h"
#include "google/api/log.pb.h"
#include "google/api/logging.pb.h"
#include "google/api/metric.pb.h"
#include "google/api/monitored_resource.pb.h"
#include "google/api/monitoring.pb.h"
#include "google/api/quota.pb.h"
#include "google/api/source_info.pb.h"
#include "google/api/system_parameter.pb.h"
#include "google/api/usage.pb.h"
#include <google/protobuf/any.pb.h>
#include <google/protobuf/api.pb.h>
#include <google/protobuf/type.pb.h>
#include <google/protobuf/wrappers.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fapi_2fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fapi_2fservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fapi_2fservice_2eproto;
namespace google {
namespace api {
class Service;
class ServiceDefaultTypeInternal;
extern ServiceDefaultTypeInternal _Service_default_instance_;
}  // namespace api
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::api::Service* Arena::CreateMaybeMessage<::google::api::Service>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace api {

// ===================================================================

class Service :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.Service) */ {
 public:
  Service();
  virtual ~Service();

  Service(const Service& from);
  Service(Service&& from) noexcept
    : Service() {
    *this = ::std::move(from);
  }

  inline Service& operator=(const Service& from) {
    CopyFrom(from);
    return *this;
  }
  inline Service& operator=(Service&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Service& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Service* internal_default_instance() {
    return reinterpret_cast<const Service*>(
               &_Service_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Service& a, Service& b) {
    a.Swap(&b);
  }
  inline void Swap(Service* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Service* New() const final {
    return CreateMaybeMessage<Service>(nullptr);
  }

  Service* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Service>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Service& from);
  void MergeFrom(const Service& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Service* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.Service";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fapi_2fservice_2eproto);
    return ::descriptor_table_google_2fapi_2fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kApisFieldNumber = 3,
    kTypesFieldNumber = 4,
    kEnumsFieldNumber = 5,
    kEndpointsFieldNumber = 18,
    kLogsFieldNumber = 23,
    kMetricsFieldNumber = 24,
    kMonitoredResourcesFieldNumber = 25,
    kNameFieldNumber = 1,
    kTitleFieldNumber = 2,
    kProducerProjectIdFieldNumber = 22,
    kIdFieldNumber = 33,
    kDocumentationFieldNumber = 6,
    kBackendFieldNumber = 8,
    kHttpFieldNumber = 9,
    kQuotaFieldNumber = 10,
    kAuthenticationFieldNumber = 11,
    kContextFieldNumber = 12,
    kUsageFieldNumber = 15,
    kConfigVersionFieldNumber = 20,
    kControlFieldNumber = 21,
    kBillingFieldNumber = 26,
    kLoggingFieldNumber = 27,
    kMonitoringFieldNumber = 28,
    kSystemParametersFieldNumber = 29,
    kSourceInfoFieldNumber = 37,
    kExperimentalFieldNumber = 101,
  };
  // repeated .google.protobuf.Api apis = 3;
  int apis_size() const;
  private:
  int _internal_apis_size() const;
  public:
  void clear_apis();
  PROTOBUF_NAMESPACE_ID::Api* mutable_apis(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Api >*
      mutable_apis();
  private:
  const PROTOBUF_NAMESPACE_ID::Api& _internal_apis(int index) const;
  PROTOBUF_NAMESPACE_ID::Api* _internal_add_apis();
  public:
  const PROTOBUF_NAMESPACE_ID::Api& apis(int index) const;
  PROTOBUF_NAMESPACE_ID::Api* add_apis();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Api >&
      apis() const;

  // repeated .google.protobuf.Type types = 4;
  int types_size() const;
  private:
  int _internal_types_size() const;
  public:
  void clear_types();
  PROTOBUF_NAMESPACE_ID::Type* mutable_types(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Type >*
      mutable_types();
  private:
  const PROTOBUF_NAMESPACE_ID::Type& _internal_types(int index) const;
  PROTOBUF_NAMESPACE_ID::Type* _internal_add_types();
  public:
  const PROTOBUF_NAMESPACE_ID::Type& types(int index) const;
  PROTOBUF_NAMESPACE_ID::Type* add_types();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Type >&
      types() const;

  // repeated .google.protobuf.Enum enums = 5;
  int enums_size() const;
  private:
  int _internal_enums_size() const;
  public:
  void clear_enums();
  PROTOBUF_NAMESPACE_ID::Enum* mutable_enums(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Enum >*
      mutable_enums();
  private:
  const PROTOBUF_NAMESPACE_ID::Enum& _internal_enums(int index) const;
  PROTOBUF_NAMESPACE_ID::Enum* _internal_add_enums();
  public:
  const PROTOBUF_NAMESPACE_ID::Enum& enums(int index) const;
  PROTOBUF_NAMESPACE_ID::Enum* add_enums();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Enum >&
      enums() const;

  // repeated .google.api.Endpoint endpoints = 18;
  int endpoints_size() const;
  private:
  int _internal_endpoints_size() const;
  public:
  void clear_endpoints();
  ::google::api::Endpoint* mutable_endpoints(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::Endpoint >*
      mutable_endpoints();
  private:
  const ::google::api::Endpoint& _internal_endpoints(int index) const;
  ::google::api::Endpoint* _internal_add_endpoints();
  public:
  const ::google::api::Endpoint& endpoints(int index) const;
  ::google::api::Endpoint* add_endpoints();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::Endpoint >&
      endpoints() const;

  // repeated .google.api.LogDescriptor logs = 23;
  int logs_size() const;
  private:
  int _internal_logs_size() const;
  public:
  void clear_logs();
  ::google::api::LogDescriptor* mutable_logs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::LogDescriptor >*
      mutable_logs();
  private:
  const ::google::api::LogDescriptor& _internal_logs(int index) const;
  ::google::api::LogDescriptor* _internal_add_logs();
  public:
  const ::google::api::LogDescriptor& logs(int index) const;
  ::google::api::LogDescriptor* add_logs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::LogDescriptor >&
      logs() const;

  // repeated .google.api.MetricDescriptor metrics = 24;
  int metrics_size() const;
  private:
  int _internal_metrics_size() const;
  public:
  void clear_metrics();
  ::google::api::MetricDescriptor* mutable_metrics(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::MetricDescriptor >*
      mutable_metrics();
  private:
  const ::google::api::MetricDescriptor& _internal_metrics(int index) const;
  ::google::api::MetricDescriptor* _internal_add_metrics();
  public:
  const ::google::api::MetricDescriptor& metrics(int index) const;
  ::google::api::MetricDescriptor* add_metrics();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::MetricDescriptor >&
      metrics() const;

  // repeated .google.api.MonitoredResourceDescriptor monitored_resources = 25;
  int monitored_resources_size() const;
  private:
  int _internal_monitored_resources_size() const;
  public:
  void clear_monitored_resources();
  ::google::api::MonitoredResourceDescriptor* mutable_monitored_resources(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::MonitoredResourceDescriptor >*
      mutable_monitored_resources();
  private:
  const ::google::api::MonitoredResourceDescriptor& _internal_monitored_resources(int index) const;
  ::google::api::MonitoredResourceDescriptor* _internal_add_monitored_resources();
  public:
  const ::google::api::MonitoredResourceDescriptor& monitored_resources(int index) const;
  ::google::api::MonitoredResourceDescriptor* add_monitored_resources();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::MonitoredResourceDescriptor >&
      monitored_resources() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string title = 2;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string producer_project_id = 22;
  void clear_producer_project_id();
  const std::string& producer_project_id() const;
  void set_producer_project_id(const std::string& value);
  void set_producer_project_id(std::string&& value);
  void set_producer_project_id(const char* value);
  void set_producer_project_id(const char* value, size_t size);
  std::string* mutable_producer_project_id();
  std::string* release_producer_project_id();
  void set_allocated_producer_project_id(std::string* producer_project_id);
  private:
  const std::string& _internal_producer_project_id() const;
  void _internal_set_producer_project_id(const std::string& value);
  std::string* _internal_mutable_producer_project_id();
  public:

  // string id = 33;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .google.api.Documentation documentation = 6;
  bool has_documentation() const;
  private:
  bool _internal_has_documentation() const;
  public:
  void clear_documentation();
  const ::google::api::Documentation& documentation() const;
  ::google::api::Documentation* release_documentation();
  ::google::api::Documentation* mutable_documentation();
  void set_allocated_documentation(::google::api::Documentation* documentation);
  private:
  const ::google::api::Documentation& _internal_documentation() const;
  ::google::api::Documentation* _internal_mutable_documentation();
  public:

  // .google.api.Backend backend = 8;
  bool has_backend() const;
  private:
  bool _internal_has_backend() const;
  public:
  void clear_backend();
  const ::google::api::Backend& backend() const;
  ::google::api::Backend* release_backend();
  ::google::api::Backend* mutable_backend();
  void set_allocated_backend(::google::api::Backend* backend);
  private:
  const ::google::api::Backend& _internal_backend() const;
  ::google::api::Backend* _internal_mutable_backend();
  public:

  // .google.api.Http http = 9;
  bool has_http() const;
  private:
  bool _internal_has_http() const;
  public:
  void clear_http();
  const ::google::api::Http& http() const;
  ::google::api::Http* release_http();
  ::google::api::Http* mutable_http();
  void set_allocated_http(::google::api::Http* http);
  private:
  const ::google::api::Http& _internal_http() const;
  ::google::api::Http* _internal_mutable_http();
  public:

  // .google.api.Quota quota = 10;
  bool has_quota() const;
  private:
  bool _internal_has_quota() const;
  public:
  void clear_quota();
  const ::google::api::Quota& quota() const;
  ::google::api::Quota* release_quota();
  ::google::api::Quota* mutable_quota();
  void set_allocated_quota(::google::api::Quota* quota);
  private:
  const ::google::api::Quota& _internal_quota() const;
  ::google::api::Quota* _internal_mutable_quota();
  public:

  // .google.api.Authentication authentication = 11;
  bool has_authentication() const;
  private:
  bool _internal_has_authentication() const;
  public:
  void clear_authentication();
  const ::google::api::Authentication& authentication() const;
  ::google::api::Authentication* release_authentication();
  ::google::api::Authentication* mutable_authentication();
  void set_allocated_authentication(::google::api::Authentication* authentication);
  private:
  const ::google::api::Authentication& _internal_authentication() const;
  ::google::api::Authentication* _internal_mutable_authentication();
  public:

  // .google.api.Context context = 12;
  bool has_context() const;
  private:
  bool _internal_has_context() const;
  public:
  void clear_context();
  const ::google::api::Context& context() const;
  ::google::api::Context* release_context();
  ::google::api::Context* mutable_context();
  void set_allocated_context(::google::api::Context* context);
  private:
  const ::google::api::Context& _internal_context() const;
  ::google::api::Context* _internal_mutable_context();
  public:

  // .google.api.Usage usage = 15;
  bool has_usage() const;
  private:
  bool _internal_has_usage() const;
  public:
  void clear_usage();
  const ::google::api::Usage& usage() const;
  ::google::api::Usage* release_usage();
  ::google::api::Usage* mutable_usage();
  void set_allocated_usage(::google::api::Usage* usage);
  private:
  const ::google::api::Usage& _internal_usage() const;
  ::google::api::Usage* _internal_mutable_usage();
  public:

  // .google.protobuf.UInt32Value config_version = 20;
  bool has_config_version() const;
  private:
  bool _internal_has_config_version() const;
  public:
  void clear_config_version();
  const PROTOBUF_NAMESPACE_ID::UInt32Value& config_version() const;
  PROTOBUF_NAMESPACE_ID::UInt32Value* release_config_version();
  PROTOBUF_NAMESPACE_ID::UInt32Value* mutable_config_version();
  void set_allocated_config_version(PROTOBUF_NAMESPACE_ID::UInt32Value* config_version);
  private:
  const PROTOBUF_NAMESPACE_ID::UInt32Value& _internal_config_version() const;
  PROTOBUF_NAMESPACE_ID::UInt32Value* _internal_mutable_config_version();
  public:

  // .google.api.Control control = 21;
  bool has_control() const;
  private:
  bool _internal_has_control() const;
  public:
  void clear_control();
  const ::google::api::Control& control() const;
  ::google::api::Control* release_control();
  ::google::api::Control* mutable_control();
  void set_allocated_control(::google::api::Control* control);
  private:
  const ::google::api::Control& _internal_control() const;
  ::google::api::Control* _internal_mutable_control();
  public:

  // .google.api.Billing billing = 26;
  bool has_billing() const;
  private:
  bool _internal_has_billing() const;
  public:
  void clear_billing();
  const ::google::api::Billing& billing() const;
  ::google::api::Billing* release_billing();
  ::google::api::Billing* mutable_billing();
  void set_allocated_billing(::google::api::Billing* billing);
  private:
  const ::google::api::Billing& _internal_billing() const;
  ::google::api::Billing* _internal_mutable_billing();
  public:

  // .google.api.Logging logging = 27;
  bool has_logging() const;
  private:
  bool _internal_has_logging() const;
  public:
  void clear_logging();
  const ::google::api::Logging& logging() const;
  ::google::api::Logging* release_logging();
  ::google::api::Logging* mutable_logging();
  void set_allocated_logging(::google::api::Logging* logging);
  private:
  const ::google::api::Logging& _internal_logging() const;
  ::google::api::Logging* _internal_mutable_logging();
  public:

  // .google.api.Monitoring monitoring = 28;
  bool has_monitoring() const;
  private:
  bool _internal_has_monitoring() const;
  public:
  void clear_monitoring();
  const ::google::api::Monitoring& monitoring() const;
  ::google::api::Monitoring* release_monitoring();
  ::google::api::Monitoring* mutable_monitoring();
  void set_allocated_monitoring(::google::api::Monitoring* monitoring);
  private:
  const ::google::api::Monitoring& _internal_monitoring() const;
  ::google::api::Monitoring* _internal_mutable_monitoring();
  public:

  // .google.api.SystemParameters system_parameters = 29;
  bool has_system_parameters() const;
  private:
  bool _internal_has_system_parameters() const;
  public:
  void clear_system_parameters();
  const ::google::api::SystemParameters& system_parameters() const;
  ::google::api::SystemParameters* release_system_parameters();
  ::google::api::SystemParameters* mutable_system_parameters();
  void set_allocated_system_parameters(::google::api::SystemParameters* system_parameters);
  private:
  const ::google::api::SystemParameters& _internal_system_parameters() const;
  ::google::api::SystemParameters* _internal_mutable_system_parameters();
  public:

  // .google.api.SourceInfo source_info = 37;
  bool has_source_info() const;
  private:
  bool _internal_has_source_info() const;
  public:
  void clear_source_info();
  const ::google::api::SourceInfo& source_info() const;
  ::google::api::SourceInfo* release_source_info();
  ::google::api::SourceInfo* mutable_source_info();
  void set_allocated_source_info(::google::api::SourceInfo* source_info);
  private:
  const ::google::api::SourceInfo& _internal_source_info() const;
  ::google::api::SourceInfo* _internal_mutable_source_info();
  public:

  // .google.api.Experimental experimental = 101;
  bool has_experimental() const;
  private:
  bool _internal_has_experimental() const;
  public:
  void clear_experimental();
  const ::google::api::Experimental& experimental() const;
  ::google::api::Experimental* release_experimental();
  ::google::api::Experimental* mutable_experimental();
  void set_allocated_experimental(::google::api::Experimental* experimental);
  private:
  const ::google::api::Experimental& _internal_experimental() const;
  ::google::api::Experimental* _internal_mutable_experimental();
  public:

  // @@protoc_insertion_point(class_scope:google.api.Service)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Api > apis_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Type > types_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Enum > enums_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::Endpoint > endpoints_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::LogDescriptor > logs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::MetricDescriptor > metrics_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::MonitoredResourceDescriptor > monitored_resources_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr producer_project_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::google::api::Documentation* documentation_;
  ::google::api::Backend* backend_;
  ::google::api::Http* http_;
  ::google::api::Quota* quota_;
  ::google::api::Authentication* authentication_;
  ::google::api::Context* context_;
  ::google::api::Usage* usage_;
  PROTOBUF_NAMESPACE_ID::UInt32Value* config_version_;
  ::google::api::Control* control_;
  ::google::api::Billing* billing_;
  ::google::api::Logging* logging_;
  ::google::api::Monitoring* monitoring_;
  ::google::api::SystemParameters* system_parameters_;
  ::google::api::SourceInfo* source_info_;
  ::google::api::Experimental* experimental_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fapi_2fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Service

// .google.protobuf.UInt32Value config_version = 20;
inline bool Service::_internal_has_config_version() const {
  return this != internal_default_instance() && config_version_ != nullptr;
}
inline bool Service::has_config_version() const {
  return _internal_has_config_version();
}
inline const PROTOBUF_NAMESPACE_ID::UInt32Value& Service::_internal_config_version() const {
  const PROTOBUF_NAMESPACE_ID::UInt32Value* p = config_version_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::UInt32Value*>(
      &PROTOBUF_NAMESPACE_ID::_UInt32Value_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::UInt32Value& Service::config_version() const {
  // @@protoc_insertion_point(field_get:google.api.Service.config_version)
  return _internal_config_version();
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* Service::release_config_version() {
  // @@protoc_insertion_point(field_release:google.api.Service.config_version)
  
  PROTOBUF_NAMESPACE_ID::UInt32Value* temp = config_version_;
  config_version_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* Service::_internal_mutable_config_version() {
  
  if (config_version_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::UInt32Value>(GetArenaNoVirtual());
    config_version_ = p;
  }
  return config_version_;
}
inline PROTOBUF_NAMESPACE_ID::UInt32Value* Service::mutable_config_version() {
  // @@protoc_insertion_point(field_mutable:google.api.Service.config_version)
  return _internal_mutable_config_version();
}
inline void Service::set_allocated_config_version(PROTOBUF_NAMESPACE_ID::UInt32Value* config_version) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(config_version_);
  }
  if (config_version) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(config_version)->GetArena();
    if (message_arena != submessage_arena) {
      config_version = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config_version, submessage_arena);
    }
    
  } else {
    
  }
  config_version_ = config_version;
  // @@protoc_insertion_point(field_set_allocated:google.api.Service.config_version)
}

// string name = 1;
inline void Service::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Service::name() const {
  // @@protoc_insertion_point(field_get:google.api.Service.name)
  return _internal_name();
}
inline void Service::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:google.api.Service.name)
}
inline std::string* Service::mutable_name() {
  // @@protoc_insertion_point(field_mutable:google.api.Service.name)
  return _internal_mutable_name();
}
inline const std::string& Service::_internal_name() const {
  return name_.GetNoArena();
}
inline void Service::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Service::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.api.Service.name)
}
inline void Service::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.Service.name)
}
inline void Service::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.Service.name)
}
inline std::string* Service::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Service::release_name() {
  // @@protoc_insertion_point(field_release:google.api.Service.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Service::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.api.Service.name)
}

// string id = 33;
inline void Service::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Service::id() const {
  // @@protoc_insertion_point(field_get:google.api.Service.id)
  return _internal_id();
}
inline void Service::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:google.api.Service.id)
}
inline std::string* Service::mutable_id() {
  // @@protoc_insertion_point(field_mutable:google.api.Service.id)
  return _internal_mutable_id();
}
inline const std::string& Service::_internal_id() const {
  return id_.GetNoArena();
}
inline void Service::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Service::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.api.Service.id)
}
inline void Service::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.Service.id)
}
inline void Service::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.Service.id)
}
inline std::string* Service::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Service::release_id() {
  // @@protoc_insertion_point(field_release:google.api.Service.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Service::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:google.api.Service.id)
}

// string title = 2;
inline void Service::clear_title() {
  title_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Service::title() const {
  // @@protoc_insertion_point(field_get:google.api.Service.title)
  return _internal_title();
}
inline void Service::set_title(const std::string& value) {
  _internal_set_title(value);
  // @@protoc_insertion_point(field_set:google.api.Service.title)
}
inline std::string* Service::mutable_title() {
  // @@protoc_insertion_point(field_mutable:google.api.Service.title)
  return _internal_mutable_title();
}
inline const std::string& Service::_internal_title() const {
  return title_.GetNoArena();
}
inline void Service::_internal_set_title(const std::string& value) {
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Service::set_title(std::string&& value) {
  
  title_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.api.Service.title)
}
inline void Service::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.Service.title)
}
inline void Service::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.Service.title)
}
inline std::string* Service::_internal_mutable_title() {
  
  return title_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Service::release_title() {
  // @@protoc_insertion_point(field_release:google.api.Service.title)
  
  return title_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Service::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:google.api.Service.title)
}

// string producer_project_id = 22;
inline void Service::clear_producer_project_id() {
  producer_project_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Service::producer_project_id() const {
  // @@protoc_insertion_point(field_get:google.api.Service.producer_project_id)
  return _internal_producer_project_id();
}
inline void Service::set_producer_project_id(const std::string& value) {
  _internal_set_producer_project_id(value);
  // @@protoc_insertion_point(field_set:google.api.Service.producer_project_id)
}
inline std::string* Service::mutable_producer_project_id() {
  // @@protoc_insertion_point(field_mutable:google.api.Service.producer_project_id)
  return _internal_mutable_producer_project_id();
}
inline const std::string& Service::_internal_producer_project_id() const {
  return producer_project_id_.GetNoArena();
}
inline void Service::_internal_set_producer_project_id(const std::string& value) {
  
  producer_project_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Service::set_producer_project_id(std::string&& value) {
  
  producer_project_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.api.Service.producer_project_id)
}
inline void Service::set_producer_project_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  producer_project_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.Service.producer_project_id)
}
inline void Service::set_producer_project_id(const char* value, size_t size) {
  
  producer_project_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.Service.producer_project_id)
}
inline std::string* Service::_internal_mutable_producer_project_id() {
  
  return producer_project_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Service::release_producer_project_id() {
  // @@protoc_insertion_point(field_release:google.api.Service.producer_project_id)
  
  return producer_project_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Service::set_allocated_producer_project_id(std::string* producer_project_id) {
  if (producer_project_id != nullptr) {
    
  } else {
    
  }
  producer_project_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), producer_project_id);
  // @@protoc_insertion_point(field_set_allocated:google.api.Service.producer_project_id)
}

// repeated .google.protobuf.Api apis = 3;
inline int Service::_internal_apis_size() const {
  return apis_.size();
}
inline int Service::apis_size() const {
  return _internal_apis_size();
}
inline PROTOBUF_NAMESPACE_ID::Api* Service::mutable_apis(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.Service.apis)
  return apis_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Api >*
Service::mutable_apis() {
  // @@protoc_insertion_point(field_mutable_list:google.api.Service.apis)
  return &apis_;
}
inline const PROTOBUF_NAMESPACE_ID::Api& Service::_internal_apis(int index) const {
  return apis_.Get(index);
}
inline const PROTOBUF_NAMESPACE_ID::Api& Service::apis(int index) const {
  // @@protoc_insertion_point(field_get:google.api.Service.apis)
  return _internal_apis(index);
}
inline PROTOBUF_NAMESPACE_ID::Api* Service::_internal_add_apis() {
  return apis_.Add();
}
inline PROTOBUF_NAMESPACE_ID::Api* Service::add_apis() {
  // @@protoc_insertion_point(field_add:google.api.Service.apis)
  return _internal_add_apis();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Api >&
Service::apis() const {
  // @@protoc_insertion_point(field_list:google.api.Service.apis)
  return apis_;
}

// repeated .google.protobuf.Type types = 4;
inline int Service::_internal_types_size() const {
  return types_.size();
}
inline int Service::types_size() const {
  return _internal_types_size();
}
inline PROTOBUF_NAMESPACE_ID::Type* Service::mutable_types(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.Service.types)
  return types_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Type >*
Service::mutable_types() {
  // @@protoc_insertion_point(field_mutable_list:google.api.Service.types)
  return &types_;
}
inline const PROTOBUF_NAMESPACE_ID::Type& Service::_internal_types(int index) const {
  return types_.Get(index);
}
inline const PROTOBUF_NAMESPACE_ID::Type& Service::types(int index) const {
  // @@protoc_insertion_point(field_get:google.api.Service.types)
  return _internal_types(index);
}
inline PROTOBUF_NAMESPACE_ID::Type* Service::_internal_add_types() {
  return types_.Add();
}
inline PROTOBUF_NAMESPACE_ID::Type* Service::add_types() {
  // @@protoc_insertion_point(field_add:google.api.Service.types)
  return _internal_add_types();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Type >&
Service::types() const {
  // @@protoc_insertion_point(field_list:google.api.Service.types)
  return types_;
}

// repeated .google.protobuf.Enum enums = 5;
inline int Service::_internal_enums_size() const {
  return enums_.size();
}
inline int Service::enums_size() const {
  return _internal_enums_size();
}
inline PROTOBUF_NAMESPACE_ID::Enum* Service::mutable_enums(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.Service.enums)
  return enums_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Enum >*
Service::mutable_enums() {
  // @@protoc_insertion_point(field_mutable_list:google.api.Service.enums)
  return &enums_;
}
inline const PROTOBUF_NAMESPACE_ID::Enum& Service::_internal_enums(int index) const {
  return enums_.Get(index);
}
inline const PROTOBUF_NAMESPACE_ID::Enum& Service::enums(int index) const {
  // @@protoc_insertion_point(field_get:google.api.Service.enums)
  return _internal_enums(index);
}
inline PROTOBUF_NAMESPACE_ID::Enum* Service::_internal_add_enums() {
  return enums_.Add();
}
inline PROTOBUF_NAMESPACE_ID::Enum* Service::add_enums() {
  // @@protoc_insertion_point(field_add:google.api.Service.enums)
  return _internal_add_enums();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Enum >&
Service::enums() const {
  // @@protoc_insertion_point(field_list:google.api.Service.enums)
  return enums_;
}

// .google.api.Documentation documentation = 6;
inline bool Service::_internal_has_documentation() const {
  return this != internal_default_instance() && documentation_ != nullptr;
}
inline bool Service::has_documentation() const {
  return _internal_has_documentation();
}
inline const ::google::api::Documentation& Service::_internal_documentation() const {
  const ::google::api::Documentation* p = documentation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::google::api::Documentation*>(
      &::google::api::_Documentation_default_instance_);
}
inline const ::google::api::Documentation& Service::documentation() const {
  // @@protoc_insertion_point(field_get:google.api.Service.documentation)
  return _internal_documentation();
}
inline ::google::api::Documentation* Service::release_documentation() {
  // @@protoc_insertion_point(field_release:google.api.Service.documentation)
  
  ::google::api::Documentation* temp = documentation_;
  documentation_ = nullptr;
  return temp;
}
inline ::google::api::Documentation* Service::_internal_mutable_documentation() {
  
  if (documentation_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::api::Documentation>(GetArenaNoVirtual());
    documentation_ = p;
  }
  return documentation_;
}
inline ::google::api::Documentation* Service::mutable_documentation() {
  // @@protoc_insertion_point(field_mutable:google.api.Service.documentation)
  return _internal_mutable_documentation();
}
inline void Service::set_allocated_documentation(::google::api::Documentation* documentation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(documentation_);
  }
  if (documentation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      documentation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, documentation, submessage_arena);
    }
    
  } else {
    
  }
  documentation_ = documentation;
  // @@protoc_insertion_point(field_set_allocated:google.api.Service.documentation)
}

// .google.api.Backend backend = 8;
inline bool Service::_internal_has_backend() const {
  return this != internal_default_instance() && backend_ != nullptr;
}
inline bool Service::has_backend() const {
  return _internal_has_backend();
}
inline const ::google::api::Backend& Service::_internal_backend() const {
  const ::google::api::Backend* p = backend_;
  return p != nullptr ? *p : *reinterpret_cast<const ::google::api::Backend*>(
      &::google::api::_Backend_default_instance_);
}
inline const ::google::api::Backend& Service::backend() const {
  // @@protoc_insertion_point(field_get:google.api.Service.backend)
  return _internal_backend();
}
inline ::google::api::Backend* Service::release_backend() {
  // @@protoc_insertion_point(field_release:google.api.Service.backend)
  
  ::google::api::Backend* temp = backend_;
  backend_ = nullptr;
  return temp;
}
inline ::google::api::Backend* Service::_internal_mutable_backend() {
  
  if (backend_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::api::Backend>(GetArenaNoVirtual());
    backend_ = p;
  }
  return backend_;
}
inline ::google::api::Backend* Service::mutable_backend() {
  // @@protoc_insertion_point(field_mutable:google.api.Service.backend)
  return _internal_mutable_backend();
}
inline void Service::set_allocated_backend(::google::api::Backend* backend) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(backend_);
  }
  if (backend) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      backend = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, backend, submessage_arena);
    }
    
  } else {
    
  }
  backend_ = backend;
  // @@protoc_insertion_point(field_set_allocated:google.api.Service.backend)
}

// .google.api.Http http = 9;
inline bool Service::_internal_has_http() const {
  return this != internal_default_instance() && http_ != nullptr;
}
inline bool Service::has_http() const {
  return _internal_has_http();
}
inline const ::google::api::Http& Service::_internal_http() const {
  const ::google::api::Http* p = http_;
  return p != nullptr ? *p : *reinterpret_cast<const ::google::api::Http*>(
      &::google::api::_Http_default_instance_);
}
inline const ::google::api::Http& Service::http() const {
  // @@protoc_insertion_point(field_get:google.api.Service.http)
  return _internal_http();
}
inline ::google::api::Http* Service::release_http() {
  // @@protoc_insertion_point(field_release:google.api.Service.http)
  
  ::google::api::Http* temp = http_;
  http_ = nullptr;
  return temp;
}
inline ::google::api::Http* Service::_internal_mutable_http() {
  
  if (http_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::api::Http>(GetArenaNoVirtual());
    http_ = p;
  }
  return http_;
}
inline ::google::api::Http* Service::mutable_http() {
  // @@protoc_insertion_point(field_mutable:google.api.Service.http)
  return _internal_mutable_http();
}
inline void Service::set_allocated_http(::google::api::Http* http) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(http_);
  }
  if (http) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(http)->GetArena();
    if (message_arena != submessage_arena) {
      http = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, http, submessage_arena);
    }
    
  } else {
    
  }
  http_ = http;
  // @@protoc_insertion_point(field_set_allocated:google.api.Service.http)
}

// .google.api.Quota quota = 10;
inline bool Service::_internal_has_quota() const {
  return this != internal_default_instance() && quota_ != nullptr;
}
inline bool Service::has_quota() const {
  return _internal_has_quota();
}
inline const ::google::api::Quota& Service::_internal_quota() const {
  const ::google::api::Quota* p = quota_;
  return p != nullptr ? *p : *reinterpret_cast<const ::google::api::Quota*>(
      &::google::api::_Quota_default_instance_);
}
inline const ::google::api::Quota& Service::quota() const {
  // @@protoc_insertion_point(field_get:google.api.Service.quota)
  return _internal_quota();
}
inline ::google::api::Quota* Service::release_quota() {
  // @@protoc_insertion_point(field_release:google.api.Service.quota)
  
  ::google::api::Quota* temp = quota_;
  quota_ = nullptr;
  return temp;
}
inline ::google::api::Quota* Service::_internal_mutable_quota() {
  
  if (quota_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::api::Quota>(GetArenaNoVirtual());
    quota_ = p;
  }
  return quota_;
}
inline ::google::api::Quota* Service::mutable_quota() {
  // @@protoc_insertion_point(field_mutable:google.api.Service.quota)
  return _internal_mutable_quota();
}
inline void Service::set_allocated_quota(::google::api::Quota* quota) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(quota_);
  }
  if (quota) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      quota = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, quota, submessage_arena);
    }
    
  } else {
    
  }
  quota_ = quota;
  // @@protoc_insertion_point(field_set_allocated:google.api.Service.quota)
}

// .google.api.Authentication authentication = 11;
inline bool Service::_internal_has_authentication() const {
  return this != internal_default_instance() && authentication_ != nullptr;
}
inline bool Service::has_authentication() const {
  return _internal_has_authentication();
}
inline const ::google::api::Authentication& Service::_internal_authentication() const {
  const ::google::api::Authentication* p = authentication_;
  return p != nullptr ? *p : *reinterpret_cast<const ::google::api::Authentication*>(
      &::google::api::_Authentication_default_instance_);
}
inline const ::google::api::Authentication& Service::authentication() const {
  // @@protoc_insertion_point(field_get:google.api.Service.authentication)
  return _internal_authentication();
}
inline ::google::api::Authentication* Service::release_authentication() {
  // @@protoc_insertion_point(field_release:google.api.Service.authentication)
  
  ::google::api::Authentication* temp = authentication_;
  authentication_ = nullptr;
  return temp;
}
inline ::google::api::Authentication* Service::_internal_mutable_authentication() {
  
  if (authentication_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::api::Authentication>(GetArenaNoVirtual());
    authentication_ = p;
  }
  return authentication_;
}
inline ::google::api::Authentication* Service::mutable_authentication() {
  // @@protoc_insertion_point(field_mutable:google.api.Service.authentication)
  return _internal_mutable_authentication();
}
inline void Service::set_allocated_authentication(::google::api::Authentication* authentication) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(authentication_);
  }
  if (authentication) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      authentication = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, authentication, submessage_arena);
    }
    
  } else {
    
  }
  authentication_ = authentication;
  // @@protoc_insertion_point(field_set_allocated:google.api.Service.authentication)
}

// .google.api.Context context = 12;
inline bool Service::_internal_has_context() const {
  return this != internal_default_instance() && context_ != nullptr;
}
inline bool Service::has_context() const {
  return _internal_has_context();
}
inline const ::google::api::Context& Service::_internal_context() const {
  const ::google::api::Context* p = context_;
  return p != nullptr ? *p : *reinterpret_cast<const ::google::api::Context*>(
      &::google::api::_Context_default_instance_);
}
inline const ::google::api::Context& Service::context() const {
  // @@protoc_insertion_point(field_get:google.api.Service.context)
  return _internal_context();
}
inline ::google::api::Context* Service::release_context() {
  // @@protoc_insertion_point(field_release:google.api.Service.context)
  
  ::google::api::Context* temp = context_;
  context_ = nullptr;
  return temp;
}
inline ::google::api::Context* Service::_internal_mutable_context() {
  
  if (context_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::api::Context>(GetArenaNoVirtual());
    context_ = p;
  }
  return context_;
}
inline ::google::api::Context* Service::mutable_context() {
  // @@protoc_insertion_point(field_mutable:google.api.Service.context)
  return _internal_mutable_context();
}
inline void Service::set_allocated_context(::google::api::Context* context) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(context_);
  }
  if (context) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      context = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, context, submessage_arena);
    }
    
  } else {
    
  }
  context_ = context;
  // @@protoc_insertion_point(field_set_allocated:google.api.Service.context)
}

// .google.api.Usage usage = 15;
inline bool Service::_internal_has_usage() const {
  return this != internal_default_instance() && usage_ != nullptr;
}
inline bool Service::has_usage() const {
  return _internal_has_usage();
}
inline const ::google::api::Usage& Service::_internal_usage() const {
  const ::google::api::Usage* p = usage_;
  return p != nullptr ? *p : *reinterpret_cast<const ::google::api::Usage*>(
      &::google::api::_Usage_default_instance_);
}
inline const ::google::api::Usage& Service::usage() const {
  // @@protoc_insertion_point(field_get:google.api.Service.usage)
  return _internal_usage();
}
inline ::google::api::Usage* Service::release_usage() {
  // @@protoc_insertion_point(field_release:google.api.Service.usage)
  
  ::google::api::Usage* temp = usage_;
  usage_ = nullptr;
  return temp;
}
inline ::google::api::Usage* Service::_internal_mutable_usage() {
  
  if (usage_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::api::Usage>(GetArenaNoVirtual());
    usage_ = p;
  }
  return usage_;
}
inline ::google::api::Usage* Service::mutable_usage() {
  // @@protoc_insertion_point(field_mutable:google.api.Service.usage)
  return _internal_mutable_usage();
}
inline void Service::set_allocated_usage(::google::api::Usage* usage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(usage_);
  }
  if (usage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      usage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, usage, submessage_arena);
    }
    
  } else {
    
  }
  usage_ = usage;
  // @@protoc_insertion_point(field_set_allocated:google.api.Service.usage)
}

// repeated .google.api.Endpoint endpoints = 18;
inline int Service::_internal_endpoints_size() const {
  return endpoints_.size();
}
inline int Service::endpoints_size() const {
  return _internal_endpoints_size();
}
inline ::google::api::Endpoint* Service::mutable_endpoints(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.Service.endpoints)
  return endpoints_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::Endpoint >*
Service::mutable_endpoints() {
  // @@protoc_insertion_point(field_mutable_list:google.api.Service.endpoints)
  return &endpoints_;
}
inline const ::google::api::Endpoint& Service::_internal_endpoints(int index) const {
  return endpoints_.Get(index);
}
inline const ::google::api::Endpoint& Service::endpoints(int index) const {
  // @@protoc_insertion_point(field_get:google.api.Service.endpoints)
  return _internal_endpoints(index);
}
inline ::google::api::Endpoint* Service::_internal_add_endpoints() {
  return endpoints_.Add();
}
inline ::google::api::Endpoint* Service::add_endpoints() {
  // @@protoc_insertion_point(field_add:google.api.Service.endpoints)
  return _internal_add_endpoints();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::Endpoint >&
Service::endpoints() const {
  // @@protoc_insertion_point(field_list:google.api.Service.endpoints)
  return endpoints_;
}

// .google.api.Control control = 21;
inline bool Service::_internal_has_control() const {
  return this != internal_default_instance() && control_ != nullptr;
}
inline bool Service::has_control() const {
  return _internal_has_control();
}
inline const ::google::api::Control& Service::_internal_control() const {
  const ::google::api::Control* p = control_;
  return p != nullptr ? *p : *reinterpret_cast<const ::google::api::Control*>(
      &::google::api::_Control_default_instance_);
}
inline const ::google::api::Control& Service::control() const {
  // @@protoc_insertion_point(field_get:google.api.Service.control)
  return _internal_control();
}
inline ::google::api::Control* Service::release_control() {
  // @@protoc_insertion_point(field_release:google.api.Service.control)
  
  ::google::api::Control* temp = control_;
  control_ = nullptr;
  return temp;
}
inline ::google::api::Control* Service::_internal_mutable_control() {
  
  if (control_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::api::Control>(GetArenaNoVirtual());
    control_ = p;
  }
  return control_;
}
inline ::google::api::Control* Service::mutable_control() {
  // @@protoc_insertion_point(field_mutable:google.api.Service.control)
  return _internal_mutable_control();
}
inline void Service::set_allocated_control(::google::api::Control* control) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(control_);
  }
  if (control) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      control = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, control, submessage_arena);
    }
    
  } else {
    
  }
  control_ = control;
  // @@protoc_insertion_point(field_set_allocated:google.api.Service.control)
}

// repeated .google.api.LogDescriptor logs = 23;
inline int Service::_internal_logs_size() const {
  return logs_.size();
}
inline int Service::logs_size() const {
  return _internal_logs_size();
}
inline ::google::api::LogDescriptor* Service::mutable_logs(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.Service.logs)
  return logs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::LogDescriptor >*
Service::mutable_logs() {
  // @@protoc_insertion_point(field_mutable_list:google.api.Service.logs)
  return &logs_;
}
inline const ::google::api::LogDescriptor& Service::_internal_logs(int index) const {
  return logs_.Get(index);
}
inline const ::google::api::LogDescriptor& Service::logs(int index) const {
  // @@protoc_insertion_point(field_get:google.api.Service.logs)
  return _internal_logs(index);
}
inline ::google::api::LogDescriptor* Service::_internal_add_logs() {
  return logs_.Add();
}
inline ::google::api::LogDescriptor* Service::add_logs() {
  // @@protoc_insertion_point(field_add:google.api.Service.logs)
  return _internal_add_logs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::LogDescriptor >&
Service::logs() const {
  // @@protoc_insertion_point(field_list:google.api.Service.logs)
  return logs_;
}

// repeated .google.api.MetricDescriptor metrics = 24;
inline int Service::_internal_metrics_size() const {
  return metrics_.size();
}
inline int Service::metrics_size() const {
  return _internal_metrics_size();
}
inline ::google::api::MetricDescriptor* Service::mutable_metrics(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.Service.metrics)
  return metrics_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::MetricDescriptor >*
Service::mutable_metrics() {
  // @@protoc_insertion_point(field_mutable_list:google.api.Service.metrics)
  return &metrics_;
}
inline const ::google::api::MetricDescriptor& Service::_internal_metrics(int index) const {
  return metrics_.Get(index);
}
inline const ::google::api::MetricDescriptor& Service::metrics(int index) const {
  // @@protoc_insertion_point(field_get:google.api.Service.metrics)
  return _internal_metrics(index);
}
inline ::google::api::MetricDescriptor* Service::_internal_add_metrics() {
  return metrics_.Add();
}
inline ::google::api::MetricDescriptor* Service::add_metrics() {
  // @@protoc_insertion_point(field_add:google.api.Service.metrics)
  return _internal_add_metrics();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::MetricDescriptor >&
Service::metrics() const {
  // @@protoc_insertion_point(field_list:google.api.Service.metrics)
  return metrics_;
}

// repeated .google.api.MonitoredResourceDescriptor monitored_resources = 25;
inline int Service::_internal_monitored_resources_size() const {
  return monitored_resources_.size();
}
inline int Service::monitored_resources_size() const {
  return _internal_monitored_resources_size();
}
inline ::google::api::MonitoredResourceDescriptor* Service::mutable_monitored_resources(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.Service.monitored_resources)
  return monitored_resources_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::MonitoredResourceDescriptor >*
Service::mutable_monitored_resources() {
  // @@protoc_insertion_point(field_mutable_list:google.api.Service.monitored_resources)
  return &monitored_resources_;
}
inline const ::google::api::MonitoredResourceDescriptor& Service::_internal_monitored_resources(int index) const {
  return monitored_resources_.Get(index);
}
inline const ::google::api::MonitoredResourceDescriptor& Service::monitored_resources(int index) const {
  // @@protoc_insertion_point(field_get:google.api.Service.monitored_resources)
  return _internal_monitored_resources(index);
}
inline ::google::api::MonitoredResourceDescriptor* Service::_internal_add_monitored_resources() {
  return monitored_resources_.Add();
}
inline ::google::api::MonitoredResourceDescriptor* Service::add_monitored_resources() {
  // @@protoc_insertion_point(field_add:google.api.Service.monitored_resources)
  return _internal_add_monitored_resources();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::MonitoredResourceDescriptor >&
Service::monitored_resources() const {
  // @@protoc_insertion_point(field_list:google.api.Service.monitored_resources)
  return monitored_resources_;
}

// .google.api.Billing billing = 26;
inline bool Service::_internal_has_billing() const {
  return this != internal_default_instance() && billing_ != nullptr;
}
inline bool Service::has_billing() const {
  return _internal_has_billing();
}
inline const ::google::api::Billing& Service::_internal_billing() const {
  const ::google::api::Billing* p = billing_;
  return p != nullptr ? *p : *reinterpret_cast<const ::google::api::Billing*>(
      &::google::api::_Billing_default_instance_);
}
inline const ::google::api::Billing& Service::billing() const {
  // @@protoc_insertion_point(field_get:google.api.Service.billing)
  return _internal_billing();
}
inline ::google::api::Billing* Service::release_billing() {
  // @@protoc_insertion_point(field_release:google.api.Service.billing)
  
  ::google::api::Billing* temp = billing_;
  billing_ = nullptr;
  return temp;
}
inline ::google::api::Billing* Service::_internal_mutable_billing() {
  
  if (billing_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::api::Billing>(GetArenaNoVirtual());
    billing_ = p;
  }
  return billing_;
}
inline ::google::api::Billing* Service::mutable_billing() {
  // @@protoc_insertion_point(field_mutable:google.api.Service.billing)
  return _internal_mutable_billing();
}
inline void Service::set_allocated_billing(::google::api::Billing* billing) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(billing_);
  }
  if (billing) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      billing = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, billing, submessage_arena);
    }
    
  } else {
    
  }
  billing_ = billing;
  // @@protoc_insertion_point(field_set_allocated:google.api.Service.billing)
}

// .google.api.Logging logging = 27;
inline bool Service::_internal_has_logging() const {
  return this != internal_default_instance() && logging_ != nullptr;
}
inline bool Service::has_logging() const {
  return _internal_has_logging();
}
inline const ::google::api::Logging& Service::_internal_logging() const {
  const ::google::api::Logging* p = logging_;
  return p != nullptr ? *p : *reinterpret_cast<const ::google::api::Logging*>(
      &::google::api::_Logging_default_instance_);
}
inline const ::google::api::Logging& Service::logging() const {
  // @@protoc_insertion_point(field_get:google.api.Service.logging)
  return _internal_logging();
}
inline ::google::api::Logging* Service::release_logging() {
  // @@protoc_insertion_point(field_release:google.api.Service.logging)
  
  ::google::api::Logging* temp = logging_;
  logging_ = nullptr;
  return temp;
}
inline ::google::api::Logging* Service::_internal_mutable_logging() {
  
  if (logging_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::api::Logging>(GetArenaNoVirtual());
    logging_ = p;
  }
  return logging_;
}
inline ::google::api::Logging* Service::mutable_logging() {
  // @@protoc_insertion_point(field_mutable:google.api.Service.logging)
  return _internal_mutable_logging();
}
inline void Service::set_allocated_logging(::google::api::Logging* logging) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(logging_);
  }
  if (logging) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      logging = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, logging, submessage_arena);
    }
    
  } else {
    
  }
  logging_ = logging;
  // @@protoc_insertion_point(field_set_allocated:google.api.Service.logging)
}

// .google.api.Monitoring monitoring = 28;
inline bool Service::_internal_has_monitoring() const {
  return this != internal_default_instance() && monitoring_ != nullptr;
}
inline bool Service::has_monitoring() const {
  return _internal_has_monitoring();
}
inline const ::google::api::Monitoring& Service::_internal_monitoring() const {
  const ::google::api::Monitoring* p = monitoring_;
  return p != nullptr ? *p : *reinterpret_cast<const ::google::api::Monitoring*>(
      &::google::api::_Monitoring_default_instance_);
}
inline const ::google::api::Monitoring& Service::monitoring() const {
  // @@protoc_insertion_point(field_get:google.api.Service.monitoring)
  return _internal_monitoring();
}
inline ::google::api::Monitoring* Service::release_monitoring() {
  // @@protoc_insertion_point(field_release:google.api.Service.monitoring)
  
  ::google::api::Monitoring* temp = monitoring_;
  monitoring_ = nullptr;
  return temp;
}
inline ::google::api::Monitoring* Service::_internal_mutable_monitoring() {
  
  if (monitoring_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::api::Monitoring>(GetArenaNoVirtual());
    monitoring_ = p;
  }
  return monitoring_;
}
inline ::google::api::Monitoring* Service::mutable_monitoring() {
  // @@protoc_insertion_point(field_mutable:google.api.Service.monitoring)
  return _internal_mutable_monitoring();
}
inline void Service::set_allocated_monitoring(::google::api::Monitoring* monitoring) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(monitoring_);
  }
  if (monitoring) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      monitoring = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, monitoring, submessage_arena);
    }
    
  } else {
    
  }
  monitoring_ = monitoring;
  // @@protoc_insertion_point(field_set_allocated:google.api.Service.monitoring)
}

// .google.api.SystemParameters system_parameters = 29;
inline bool Service::_internal_has_system_parameters() const {
  return this != internal_default_instance() && system_parameters_ != nullptr;
}
inline bool Service::has_system_parameters() const {
  return _internal_has_system_parameters();
}
inline const ::google::api::SystemParameters& Service::_internal_system_parameters() const {
  const ::google::api::SystemParameters* p = system_parameters_;
  return p != nullptr ? *p : *reinterpret_cast<const ::google::api::SystemParameters*>(
      &::google::api::_SystemParameters_default_instance_);
}
inline const ::google::api::SystemParameters& Service::system_parameters() const {
  // @@protoc_insertion_point(field_get:google.api.Service.system_parameters)
  return _internal_system_parameters();
}
inline ::google::api::SystemParameters* Service::release_system_parameters() {
  // @@protoc_insertion_point(field_release:google.api.Service.system_parameters)
  
  ::google::api::SystemParameters* temp = system_parameters_;
  system_parameters_ = nullptr;
  return temp;
}
inline ::google::api::SystemParameters* Service::_internal_mutable_system_parameters() {
  
  if (system_parameters_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::api::SystemParameters>(GetArenaNoVirtual());
    system_parameters_ = p;
  }
  return system_parameters_;
}
inline ::google::api::SystemParameters* Service::mutable_system_parameters() {
  // @@protoc_insertion_point(field_mutable:google.api.Service.system_parameters)
  return _internal_mutable_system_parameters();
}
inline void Service::set_allocated_system_parameters(::google::api::SystemParameters* system_parameters) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(system_parameters_);
  }
  if (system_parameters) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      system_parameters = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, system_parameters, submessage_arena);
    }
    
  } else {
    
  }
  system_parameters_ = system_parameters;
  // @@protoc_insertion_point(field_set_allocated:google.api.Service.system_parameters)
}

// .google.api.SourceInfo source_info = 37;
inline bool Service::_internal_has_source_info() const {
  return this != internal_default_instance() && source_info_ != nullptr;
}
inline bool Service::has_source_info() const {
  return _internal_has_source_info();
}
inline const ::google::api::SourceInfo& Service::_internal_source_info() const {
  const ::google::api::SourceInfo* p = source_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::google::api::SourceInfo*>(
      &::google::api::_SourceInfo_default_instance_);
}
inline const ::google::api::SourceInfo& Service::source_info() const {
  // @@protoc_insertion_point(field_get:google.api.Service.source_info)
  return _internal_source_info();
}
inline ::google::api::SourceInfo* Service::release_source_info() {
  // @@protoc_insertion_point(field_release:google.api.Service.source_info)
  
  ::google::api::SourceInfo* temp = source_info_;
  source_info_ = nullptr;
  return temp;
}
inline ::google::api::SourceInfo* Service::_internal_mutable_source_info() {
  
  if (source_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::api::SourceInfo>(GetArenaNoVirtual());
    source_info_ = p;
  }
  return source_info_;
}
inline ::google::api::SourceInfo* Service::mutable_source_info() {
  // @@protoc_insertion_point(field_mutable:google.api.Service.source_info)
  return _internal_mutable_source_info();
}
inline void Service::set_allocated_source_info(::google::api::SourceInfo* source_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_info_);
  }
  if (source_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      source_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source_info, submessage_arena);
    }
    
  } else {
    
  }
  source_info_ = source_info;
  // @@protoc_insertion_point(field_set_allocated:google.api.Service.source_info)
}

// .google.api.Experimental experimental = 101;
inline bool Service::_internal_has_experimental() const {
  return this != internal_default_instance() && experimental_ != nullptr;
}
inline bool Service::has_experimental() const {
  return _internal_has_experimental();
}
inline const ::google::api::Experimental& Service::_internal_experimental() const {
  const ::google::api::Experimental* p = experimental_;
  return p != nullptr ? *p : *reinterpret_cast<const ::google::api::Experimental*>(
      &::google::api::_Experimental_default_instance_);
}
inline const ::google::api::Experimental& Service::experimental() const {
  // @@protoc_insertion_point(field_get:google.api.Service.experimental)
  return _internal_experimental();
}
inline ::google::api::Experimental* Service::release_experimental() {
  // @@protoc_insertion_point(field_release:google.api.Service.experimental)
  
  ::google::api::Experimental* temp = experimental_;
  experimental_ = nullptr;
  return temp;
}
inline ::google::api::Experimental* Service::_internal_mutable_experimental() {
  
  if (experimental_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::api::Experimental>(GetArenaNoVirtual());
    experimental_ = p;
  }
  return experimental_;
}
inline ::google::api::Experimental* Service::mutable_experimental() {
  // @@protoc_insertion_point(field_mutable:google.api.Service.experimental)
  return _internal_mutable_experimental();
}
inline void Service::set_allocated_experimental(::google::api::Experimental* experimental) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(experimental_);
  }
  if (experimental) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      experimental = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, experimental, submessage_arena);
    }
    
  } else {
    
  }
  experimental_ = experimental;
  // @@protoc_insertion_point(field_set_allocated:google.api.Service.experimental)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace api
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fservice_2eproto
