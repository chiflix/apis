// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/distribution.proto

#include "google/api/distribution.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fapi_2fdistribution_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Distribution_BucketOptions_google_2fapi_2fdistribution_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fapi_2fdistribution_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Distribution_BucketOptions_Explicit_google_2fapi_2fdistribution_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fapi_2fdistribution_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Distribution_BucketOptions_Exponential_google_2fapi_2fdistribution_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fapi_2fdistribution_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Distribution_BucketOptions_Linear_google_2fapi_2fdistribution_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fapi_2fdistribution_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Distribution_Range_google_2fapi_2fdistribution_2eproto;
namespace google {
namespace api {
class Distribution_RangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Distribution_Range> _instance;
} _Distribution_Range_default_instance_;
class Distribution_BucketOptions_LinearDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Distribution_BucketOptions_Linear> _instance;
} _Distribution_BucketOptions_Linear_default_instance_;
class Distribution_BucketOptions_ExponentialDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Distribution_BucketOptions_Exponential> _instance;
} _Distribution_BucketOptions_Exponential_default_instance_;
class Distribution_BucketOptions_ExplicitDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Distribution_BucketOptions_Explicit> _instance;
} _Distribution_BucketOptions_Explicit_default_instance_;
class Distribution_BucketOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Distribution_BucketOptions> _instance;
  const ::google::api::Distribution_BucketOptions_Linear* linear_buckets_;
  const ::google::api::Distribution_BucketOptions_Exponential* exponential_buckets_;
  const ::google::api::Distribution_BucketOptions_Explicit* explicit_buckets_;
} _Distribution_BucketOptions_default_instance_;
class DistributionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Distribution> _instance;
} _Distribution_default_instance_;
}  // namespace api
}  // namespace google
static void InitDefaultsscc_info_Distribution_google_2fapi_2fdistribution_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::api::_Distribution_default_instance_;
    new (ptr) ::google::api::Distribution();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::api::Distribution::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Distribution_google_2fapi_2fdistribution_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_Distribution_google_2fapi_2fdistribution_2eproto}, {
      &scc_info_Distribution_Range_google_2fapi_2fdistribution_2eproto.base,
      &scc_info_Distribution_BucketOptions_google_2fapi_2fdistribution_2eproto.base,}};

static void InitDefaultsscc_info_Distribution_BucketOptions_google_2fapi_2fdistribution_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::api::_Distribution_BucketOptions_default_instance_;
    new (ptr) ::google::api::Distribution_BucketOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::api::Distribution_BucketOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Distribution_BucketOptions_google_2fapi_2fdistribution_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_Distribution_BucketOptions_google_2fapi_2fdistribution_2eproto}, {
      &scc_info_Distribution_BucketOptions_Linear_google_2fapi_2fdistribution_2eproto.base,
      &scc_info_Distribution_BucketOptions_Exponential_google_2fapi_2fdistribution_2eproto.base,
      &scc_info_Distribution_BucketOptions_Explicit_google_2fapi_2fdistribution_2eproto.base,}};

static void InitDefaultsscc_info_Distribution_BucketOptions_Explicit_google_2fapi_2fdistribution_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::api::_Distribution_BucketOptions_Explicit_default_instance_;
    new (ptr) ::google::api::Distribution_BucketOptions_Explicit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::api::Distribution_BucketOptions_Explicit::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Distribution_BucketOptions_Explicit_google_2fapi_2fdistribution_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Distribution_BucketOptions_Explicit_google_2fapi_2fdistribution_2eproto}, {}};

static void InitDefaultsscc_info_Distribution_BucketOptions_Exponential_google_2fapi_2fdistribution_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::api::_Distribution_BucketOptions_Exponential_default_instance_;
    new (ptr) ::google::api::Distribution_BucketOptions_Exponential();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::api::Distribution_BucketOptions_Exponential::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Distribution_BucketOptions_Exponential_google_2fapi_2fdistribution_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Distribution_BucketOptions_Exponential_google_2fapi_2fdistribution_2eproto}, {}};

static void InitDefaultsscc_info_Distribution_BucketOptions_Linear_google_2fapi_2fdistribution_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::api::_Distribution_BucketOptions_Linear_default_instance_;
    new (ptr) ::google::api::Distribution_BucketOptions_Linear();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::api::Distribution_BucketOptions_Linear::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Distribution_BucketOptions_Linear_google_2fapi_2fdistribution_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Distribution_BucketOptions_Linear_google_2fapi_2fdistribution_2eproto}, {}};

static void InitDefaultsscc_info_Distribution_Range_google_2fapi_2fdistribution_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::api::_Distribution_Range_default_instance_;
    new (ptr) ::google::api::Distribution_Range();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::api::Distribution_Range::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Distribution_Range_google_2fapi_2fdistribution_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Distribution_Range_google_2fapi_2fdistribution_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_google_2fapi_2fdistribution_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_google_2fapi_2fdistribution_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_google_2fapi_2fdistribution_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_google_2fapi_2fdistribution_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::api::Distribution_Range, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::api::Distribution_Range, min_),
  PROTOBUF_FIELD_OFFSET(::google::api::Distribution_Range, max_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::api::Distribution_BucketOptions_Linear, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::api::Distribution_BucketOptions_Linear, num_finite_buckets_),
  PROTOBUF_FIELD_OFFSET(::google::api::Distribution_BucketOptions_Linear, width_),
  PROTOBUF_FIELD_OFFSET(::google::api::Distribution_BucketOptions_Linear, offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::api::Distribution_BucketOptions_Exponential, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::api::Distribution_BucketOptions_Exponential, num_finite_buckets_),
  PROTOBUF_FIELD_OFFSET(::google::api::Distribution_BucketOptions_Exponential, growth_factor_),
  PROTOBUF_FIELD_OFFSET(::google::api::Distribution_BucketOptions_Exponential, scale_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::api::Distribution_BucketOptions_Explicit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::api::Distribution_BucketOptions_Explicit, bounds_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::api::Distribution_BucketOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::api::Distribution_BucketOptions, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::google::api::Distribution_BucketOptionsDefaultTypeInternal, linear_buckets_),
  offsetof(::google::api::Distribution_BucketOptionsDefaultTypeInternal, exponential_buckets_),
  offsetof(::google::api::Distribution_BucketOptionsDefaultTypeInternal, explicit_buckets_),
  PROTOBUF_FIELD_OFFSET(::google::api::Distribution_BucketOptions, options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::api::Distribution, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::api::Distribution, count_),
  PROTOBUF_FIELD_OFFSET(::google::api::Distribution, mean_),
  PROTOBUF_FIELD_OFFSET(::google::api::Distribution, sum_of_squared_deviation_),
  PROTOBUF_FIELD_OFFSET(::google::api::Distribution, range_),
  PROTOBUF_FIELD_OFFSET(::google::api::Distribution, bucket_options_),
  PROTOBUF_FIELD_OFFSET(::google::api::Distribution, bucket_counts_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::google::api::Distribution_Range)},
  { 7, -1, sizeof(::google::api::Distribution_BucketOptions_Linear)},
  { 15, -1, sizeof(::google::api::Distribution_BucketOptions_Exponential)},
  { 23, -1, sizeof(::google::api::Distribution_BucketOptions_Explicit)},
  { 29, -1, sizeof(::google::api::Distribution_BucketOptions)},
  { 38, -1, sizeof(::google::api::Distribution)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::api::_Distribution_Range_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::api::_Distribution_BucketOptions_Linear_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::api::_Distribution_BucketOptions_Exponential_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::api::_Distribution_BucketOptions_Explicit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::api::_Distribution_BucketOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::api::_Distribution_default_instance_),
};

const char descriptor_table_protodef_google_2fapi_2fdistribution_2eproto[] =
  "\n\035google/api/distribution.proto\022\ngoogle."
  "api\032\034google/api/annotations.proto\032\031googl"
  "e/protobuf/any.proto\032\037google/protobuf/ti"
  "mestamp.proto\"\256\005\n\014Distribution\022\r\n\005count\030"
  "\001 \001(\003\022\014\n\004mean\030\002 \001(\001\022 \n\030sum_of_squared_de"
  "viation\030\003 \001(\001\022-\n\005range\030\004 \001(\0132\036.google.ap"
  "i.Distribution.Range\022>\n\016bucket_options\030\006"
  " \001(\0132&.google.api.Distribution.BucketOpt"
  "ions\022\025\n\rbucket_counts\030\007 \003(\003\032!\n\005Range\022\013\n\003"
  "min\030\001 \001(\001\022\013\n\003max\030\002 \001(\001\032\265\003\n\rBucketOptions"
  "\022G\n\016linear_buckets\030\001 \001(\0132-.google.api.Di"
  "stribution.BucketOptions.LinearH\000\022Q\n\023exp"
  "onential_buckets\030\002 \001(\01322.google.api.Dist"
  "ribution.BucketOptions.ExponentialH\000\022K\n\020"
  "explicit_buckets\030\003 \001(\0132/.google.api.Dist"
  "ribution.BucketOptions.ExplicitH\000\032C\n\006Lin"
  "ear\022\032\n\022num_finite_buckets\030\001 \001(\005\022\r\n\005width"
  "\030\002 \001(\001\022\016\n\006offset\030\003 \001(\001\032O\n\013Exponential\022\032\n"
  "\022num_finite_buckets\030\001 \001(\005\022\025\n\rgrowth_fact"
  "or\030\002 \001(\001\022\r\n\005scale\030\003 \001(\001\032\032\n\010Explicit\022\016\n\006b"
  "ounds\030\001 \003(\001B\t\n\007optionsBj\n\016com.google.api"
  "B\021DistributionProtoP\001ZCgoogle.golang.org"
  "/genproto/googleapis/api/distribution;di"
  "stributionb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_google_2fapi_2fdistribution_2eproto_deps[3] = {
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_google_2fapi_2fdistribution_2eproto_sccs[6] = {
  &scc_info_Distribution_google_2fapi_2fdistribution_2eproto.base,
  &scc_info_Distribution_BucketOptions_google_2fapi_2fdistribution_2eproto.base,
  &scc_info_Distribution_BucketOptions_Explicit_google_2fapi_2fdistribution_2eproto.base,
  &scc_info_Distribution_BucketOptions_Exponential_google_2fapi_2fdistribution_2eproto.base,
  &scc_info_Distribution_BucketOptions_Linear_google_2fapi_2fdistribution_2eproto.base,
  &scc_info_Distribution_Range_google_2fapi_2fdistribution_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_google_2fapi_2fdistribution_2eproto_once;
static bool descriptor_table_google_2fapi_2fdistribution_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fapi_2fdistribution_2eproto = {
  &descriptor_table_google_2fapi_2fdistribution_2eproto_initialized, descriptor_table_protodef_google_2fapi_2fdistribution_2eproto, "google/api/distribution.proto", 938,
  &descriptor_table_google_2fapi_2fdistribution_2eproto_once, descriptor_table_google_2fapi_2fdistribution_2eproto_sccs, descriptor_table_google_2fapi_2fdistribution_2eproto_deps, 6, 3,
  schemas, file_default_instances, TableStruct_google_2fapi_2fdistribution_2eproto::offsets,
  file_level_metadata_google_2fapi_2fdistribution_2eproto, 6, file_level_enum_descriptors_google_2fapi_2fdistribution_2eproto, file_level_service_descriptors_google_2fapi_2fdistribution_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_google_2fapi_2fdistribution_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_google_2fapi_2fdistribution_2eproto), true);
namespace google {
namespace api {

// ===================================================================

void Distribution_Range::InitAsDefaultInstance() {
}
class Distribution_Range::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Distribution_Range::kMinFieldNumber;
const int Distribution_Range::kMaxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Distribution_Range::Distribution_Range()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.api.Distribution.Range)
}
Distribution_Range::Distribution_Range(const Distribution_Range& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&min_, &from.min_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_) -
    reinterpret_cast<char*>(&min_)) + sizeof(max_));
  // @@protoc_insertion_point(copy_constructor:google.api.Distribution.Range)
}

void Distribution_Range::SharedCtor() {
  ::memset(&min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_) -
      reinterpret_cast<char*>(&min_)) + sizeof(max_));
}

Distribution_Range::~Distribution_Range() {
  // @@protoc_insertion_point(destructor:google.api.Distribution.Range)
  SharedDtor();
}

void Distribution_Range::SharedDtor() {
}

void Distribution_Range::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Distribution_Range& Distribution_Range::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Distribution_Range_google_2fapi_2fdistribution_2eproto.base);
  return *internal_default_instance();
}


void Distribution_Range::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.Distribution.Range)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_) -
      reinterpret_cast<char*>(&min_)) + sizeof(max_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Distribution_Range::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double min = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double max = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Distribution_Range::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.api.Distribution.Range)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double min = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double max = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.api.Distribution.Range)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.api.Distribution.Range)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Distribution_Range::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.api.Distribution.Range)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double min = 1;
  if (!(this->min() <= 0 && this->min() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->min(), output);
  }

  // double max = 2;
  if (!(this->max() <= 0 && this->max() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->max(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.api.Distribution.Range)
}

::PROTOBUF_NAMESPACE_ID::uint8* Distribution_Range::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.api.Distribution.Range)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double min = 1;
  if (!(this->min() <= 0 && this->min() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->min(), target);
  }

  // double max = 2;
  if (!(this->max() <= 0 && this->max() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->max(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.api.Distribution.Range)
  return target;
}

size_t Distribution_Range::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.Distribution.Range)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double min = 1;
  if (!(this->min() <= 0 && this->min() >= 0)) {
    total_size += 1 + 8;
  }

  // double max = 2;
  if (!(this->max() <= 0 && this->max() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Distribution_Range::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.api.Distribution.Range)
  GOOGLE_DCHECK_NE(&from, this);
  const Distribution_Range* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Distribution_Range>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.api.Distribution.Range)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.api.Distribution.Range)
    MergeFrom(*source);
  }
}

void Distribution_Range::MergeFrom(const Distribution_Range& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.Distribution.Range)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.min() <= 0 && from.min() >= 0)) {
    set_min(from.min());
  }
  if (!(from.max() <= 0 && from.max() >= 0)) {
    set_max(from.max());
  }
}

void Distribution_Range::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.api.Distribution.Range)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Distribution_Range::CopyFrom(const Distribution_Range& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.Distribution.Range)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Distribution_Range::IsInitialized() const {
  return true;
}

void Distribution_Range::Swap(Distribution_Range* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Distribution_Range::InternalSwap(Distribution_Range* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(min_, other->min_);
  swap(max_, other->max_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Distribution_Range::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Distribution_BucketOptions_Linear::InitAsDefaultInstance() {
}
class Distribution_BucketOptions_Linear::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Distribution_BucketOptions_Linear::kNumFiniteBucketsFieldNumber;
const int Distribution_BucketOptions_Linear::kWidthFieldNumber;
const int Distribution_BucketOptions_Linear::kOffsetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Distribution_BucketOptions_Linear::Distribution_BucketOptions_Linear()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.api.Distribution.BucketOptions.Linear)
}
Distribution_BucketOptions_Linear::Distribution_BucketOptions_Linear(const Distribution_BucketOptions_Linear& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_finite_buckets_) -
    reinterpret_cast<char*>(&width_)) + sizeof(num_finite_buckets_));
  // @@protoc_insertion_point(copy_constructor:google.api.Distribution.BucketOptions.Linear)
}

void Distribution_BucketOptions_Linear::SharedCtor() {
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_finite_buckets_) -
      reinterpret_cast<char*>(&width_)) + sizeof(num_finite_buckets_));
}

Distribution_BucketOptions_Linear::~Distribution_BucketOptions_Linear() {
  // @@protoc_insertion_point(destructor:google.api.Distribution.BucketOptions.Linear)
  SharedDtor();
}

void Distribution_BucketOptions_Linear::SharedDtor() {
}

void Distribution_BucketOptions_Linear::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Distribution_BucketOptions_Linear& Distribution_BucketOptions_Linear::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Distribution_BucketOptions_Linear_google_2fapi_2fdistribution_2eproto.base);
  return *internal_default_instance();
}


void Distribution_BucketOptions_Linear::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.Distribution.BucketOptions.Linear)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_finite_buckets_) -
      reinterpret_cast<char*>(&width_)) + sizeof(num_finite_buckets_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Distribution_BucketOptions_Linear::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 num_finite_buckets = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          num_finite_buckets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double offset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Distribution_BucketOptions_Linear::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.api.Distribution.BucketOptions.Linear)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 num_finite_buckets = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_finite_buckets_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double width = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double offset = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.api.Distribution.BucketOptions.Linear)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.api.Distribution.BucketOptions.Linear)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Distribution_BucketOptions_Linear::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.api.Distribution.BucketOptions.Linear)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 num_finite_buckets = 1;
  if (this->num_finite_buckets() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->num_finite_buckets(), output);
  }

  // double width = 2;
  if (!(this->width() <= 0 && this->width() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->width(), output);
  }

  // double offset = 3;
  if (!(this->offset() <= 0 && this->offset() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->offset(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.api.Distribution.BucketOptions.Linear)
}

::PROTOBUF_NAMESPACE_ID::uint8* Distribution_BucketOptions_Linear::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.api.Distribution.BucketOptions.Linear)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 num_finite_buckets = 1;
  if (this->num_finite_buckets() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->num_finite_buckets(), target);
  }

  // double width = 2;
  if (!(this->width() <= 0 && this->width() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->width(), target);
  }

  // double offset = 3;
  if (!(this->offset() <= 0 && this->offset() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->offset(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.api.Distribution.BucketOptions.Linear)
  return target;
}

size_t Distribution_BucketOptions_Linear::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.Distribution.BucketOptions.Linear)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double width = 2;
  if (!(this->width() <= 0 && this->width() >= 0)) {
    total_size += 1 + 8;
  }

  // double offset = 3;
  if (!(this->offset() <= 0 && this->offset() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 num_finite_buckets = 1;
  if (this->num_finite_buckets() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->num_finite_buckets());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Distribution_BucketOptions_Linear::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.api.Distribution.BucketOptions.Linear)
  GOOGLE_DCHECK_NE(&from, this);
  const Distribution_BucketOptions_Linear* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Distribution_BucketOptions_Linear>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.api.Distribution.BucketOptions.Linear)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.api.Distribution.BucketOptions.Linear)
    MergeFrom(*source);
  }
}

void Distribution_BucketOptions_Linear::MergeFrom(const Distribution_BucketOptions_Linear& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.Distribution.BucketOptions.Linear)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.width() <= 0 && from.width() >= 0)) {
    set_width(from.width());
  }
  if (!(from.offset() <= 0 && from.offset() >= 0)) {
    set_offset(from.offset());
  }
  if (from.num_finite_buckets() != 0) {
    set_num_finite_buckets(from.num_finite_buckets());
  }
}

void Distribution_BucketOptions_Linear::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.api.Distribution.BucketOptions.Linear)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Distribution_BucketOptions_Linear::CopyFrom(const Distribution_BucketOptions_Linear& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.Distribution.BucketOptions.Linear)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Distribution_BucketOptions_Linear::IsInitialized() const {
  return true;
}

void Distribution_BucketOptions_Linear::Swap(Distribution_BucketOptions_Linear* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Distribution_BucketOptions_Linear::InternalSwap(Distribution_BucketOptions_Linear* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(width_, other->width_);
  swap(offset_, other->offset_);
  swap(num_finite_buckets_, other->num_finite_buckets_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Distribution_BucketOptions_Linear::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Distribution_BucketOptions_Exponential::InitAsDefaultInstance() {
}
class Distribution_BucketOptions_Exponential::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Distribution_BucketOptions_Exponential::kNumFiniteBucketsFieldNumber;
const int Distribution_BucketOptions_Exponential::kGrowthFactorFieldNumber;
const int Distribution_BucketOptions_Exponential::kScaleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Distribution_BucketOptions_Exponential::Distribution_BucketOptions_Exponential()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.api.Distribution.BucketOptions.Exponential)
}
Distribution_BucketOptions_Exponential::Distribution_BucketOptions_Exponential(const Distribution_BucketOptions_Exponential& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&growth_factor_, &from.growth_factor_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_finite_buckets_) -
    reinterpret_cast<char*>(&growth_factor_)) + sizeof(num_finite_buckets_));
  // @@protoc_insertion_point(copy_constructor:google.api.Distribution.BucketOptions.Exponential)
}

void Distribution_BucketOptions_Exponential::SharedCtor() {
  ::memset(&growth_factor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_finite_buckets_) -
      reinterpret_cast<char*>(&growth_factor_)) + sizeof(num_finite_buckets_));
}

Distribution_BucketOptions_Exponential::~Distribution_BucketOptions_Exponential() {
  // @@protoc_insertion_point(destructor:google.api.Distribution.BucketOptions.Exponential)
  SharedDtor();
}

void Distribution_BucketOptions_Exponential::SharedDtor() {
}

void Distribution_BucketOptions_Exponential::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Distribution_BucketOptions_Exponential& Distribution_BucketOptions_Exponential::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Distribution_BucketOptions_Exponential_google_2fapi_2fdistribution_2eproto.base);
  return *internal_default_instance();
}


void Distribution_BucketOptions_Exponential::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.Distribution.BucketOptions.Exponential)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&growth_factor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_finite_buckets_) -
      reinterpret_cast<char*>(&growth_factor_)) + sizeof(num_finite_buckets_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Distribution_BucketOptions_Exponential::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 num_finite_buckets = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          num_finite_buckets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double growth_factor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          growth_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double scale = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Distribution_BucketOptions_Exponential::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.api.Distribution.BucketOptions.Exponential)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 num_finite_buckets = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_finite_buckets_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double growth_factor = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &growth_factor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double scale = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.api.Distribution.BucketOptions.Exponential)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.api.Distribution.BucketOptions.Exponential)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Distribution_BucketOptions_Exponential::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.api.Distribution.BucketOptions.Exponential)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 num_finite_buckets = 1;
  if (this->num_finite_buckets() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->num_finite_buckets(), output);
  }

  // double growth_factor = 2;
  if (!(this->growth_factor() <= 0 && this->growth_factor() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->growth_factor(), output);
  }

  // double scale = 3;
  if (!(this->scale() <= 0 && this->scale() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->scale(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.api.Distribution.BucketOptions.Exponential)
}

::PROTOBUF_NAMESPACE_ID::uint8* Distribution_BucketOptions_Exponential::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.api.Distribution.BucketOptions.Exponential)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 num_finite_buckets = 1;
  if (this->num_finite_buckets() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->num_finite_buckets(), target);
  }

  // double growth_factor = 2;
  if (!(this->growth_factor() <= 0 && this->growth_factor() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->growth_factor(), target);
  }

  // double scale = 3;
  if (!(this->scale() <= 0 && this->scale() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->scale(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.api.Distribution.BucketOptions.Exponential)
  return target;
}

size_t Distribution_BucketOptions_Exponential::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.Distribution.BucketOptions.Exponential)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double growth_factor = 2;
  if (!(this->growth_factor() <= 0 && this->growth_factor() >= 0)) {
    total_size += 1 + 8;
  }

  // double scale = 3;
  if (!(this->scale() <= 0 && this->scale() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 num_finite_buckets = 1;
  if (this->num_finite_buckets() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->num_finite_buckets());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Distribution_BucketOptions_Exponential::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.api.Distribution.BucketOptions.Exponential)
  GOOGLE_DCHECK_NE(&from, this);
  const Distribution_BucketOptions_Exponential* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Distribution_BucketOptions_Exponential>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.api.Distribution.BucketOptions.Exponential)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.api.Distribution.BucketOptions.Exponential)
    MergeFrom(*source);
  }
}

void Distribution_BucketOptions_Exponential::MergeFrom(const Distribution_BucketOptions_Exponential& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.Distribution.BucketOptions.Exponential)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.growth_factor() <= 0 && from.growth_factor() >= 0)) {
    set_growth_factor(from.growth_factor());
  }
  if (!(from.scale() <= 0 && from.scale() >= 0)) {
    set_scale(from.scale());
  }
  if (from.num_finite_buckets() != 0) {
    set_num_finite_buckets(from.num_finite_buckets());
  }
}

void Distribution_BucketOptions_Exponential::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.api.Distribution.BucketOptions.Exponential)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Distribution_BucketOptions_Exponential::CopyFrom(const Distribution_BucketOptions_Exponential& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.Distribution.BucketOptions.Exponential)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Distribution_BucketOptions_Exponential::IsInitialized() const {
  return true;
}

void Distribution_BucketOptions_Exponential::Swap(Distribution_BucketOptions_Exponential* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Distribution_BucketOptions_Exponential::InternalSwap(Distribution_BucketOptions_Exponential* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(growth_factor_, other->growth_factor_);
  swap(scale_, other->scale_);
  swap(num_finite_buckets_, other->num_finite_buckets_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Distribution_BucketOptions_Exponential::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Distribution_BucketOptions_Explicit::InitAsDefaultInstance() {
}
class Distribution_BucketOptions_Explicit::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Distribution_BucketOptions_Explicit::kBoundsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Distribution_BucketOptions_Explicit::Distribution_BucketOptions_Explicit()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.api.Distribution.BucketOptions.Explicit)
}
Distribution_BucketOptions_Explicit::Distribution_BucketOptions_Explicit(const Distribution_BucketOptions_Explicit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      bounds_(from.bounds_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.api.Distribution.BucketOptions.Explicit)
}

void Distribution_BucketOptions_Explicit::SharedCtor() {
}

Distribution_BucketOptions_Explicit::~Distribution_BucketOptions_Explicit() {
  // @@protoc_insertion_point(destructor:google.api.Distribution.BucketOptions.Explicit)
  SharedDtor();
}

void Distribution_BucketOptions_Explicit::SharedDtor() {
}

void Distribution_BucketOptions_Explicit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Distribution_BucketOptions_Explicit& Distribution_BucketOptions_Explicit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Distribution_BucketOptions_Explicit_google_2fapi_2fdistribution_2eproto.base);
  return *internal_default_instance();
}


void Distribution_BucketOptions_Explicit::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.Distribution.BucketOptions.Explicit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bounds_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Distribution_BucketOptions_Explicit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated double bounds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(mutable_bounds(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9) {
          add_bounds(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Distribution_BucketOptions_Explicit::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.api.Distribution.BucketOptions.Explicit)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double bounds = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_bounds())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 10u, input, this->mutable_bounds())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.api.Distribution.BucketOptions.Explicit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.api.Distribution.BucketOptions.Explicit)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Distribution_BucketOptions_Explicit::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.api.Distribution.BucketOptions.Explicit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double bounds = 1;
  if (this->bounds_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_bounds_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleArray(
      this->bounds().data(), this->bounds_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.api.Distribution.BucketOptions.Explicit)
}

::PROTOBUF_NAMESPACE_ID::uint8* Distribution_BucketOptions_Explicit::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.api.Distribution.BucketOptions.Explicit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double bounds = 1;
  if (this->bounds_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _bounds_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->bounds_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.api.Distribution.BucketOptions.Explicit)
  return target;
}

size_t Distribution_BucketOptions_Explicit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.Distribution.BucketOptions.Explicit)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double bounds = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->bounds_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _bounds_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Distribution_BucketOptions_Explicit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.api.Distribution.BucketOptions.Explicit)
  GOOGLE_DCHECK_NE(&from, this);
  const Distribution_BucketOptions_Explicit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Distribution_BucketOptions_Explicit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.api.Distribution.BucketOptions.Explicit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.api.Distribution.BucketOptions.Explicit)
    MergeFrom(*source);
  }
}

void Distribution_BucketOptions_Explicit::MergeFrom(const Distribution_BucketOptions_Explicit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.Distribution.BucketOptions.Explicit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bounds_.MergeFrom(from.bounds_);
}

void Distribution_BucketOptions_Explicit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.api.Distribution.BucketOptions.Explicit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Distribution_BucketOptions_Explicit::CopyFrom(const Distribution_BucketOptions_Explicit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.Distribution.BucketOptions.Explicit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Distribution_BucketOptions_Explicit::IsInitialized() const {
  return true;
}

void Distribution_BucketOptions_Explicit::Swap(Distribution_BucketOptions_Explicit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Distribution_BucketOptions_Explicit::InternalSwap(Distribution_BucketOptions_Explicit* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  bounds_.InternalSwap(&other->bounds_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Distribution_BucketOptions_Explicit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Distribution_BucketOptions::InitAsDefaultInstance() {
  ::google::api::_Distribution_BucketOptions_default_instance_.linear_buckets_ = const_cast< ::google::api::Distribution_BucketOptions_Linear*>(
      ::google::api::Distribution_BucketOptions_Linear::internal_default_instance());
  ::google::api::_Distribution_BucketOptions_default_instance_.exponential_buckets_ = const_cast< ::google::api::Distribution_BucketOptions_Exponential*>(
      ::google::api::Distribution_BucketOptions_Exponential::internal_default_instance());
  ::google::api::_Distribution_BucketOptions_default_instance_.explicit_buckets_ = const_cast< ::google::api::Distribution_BucketOptions_Explicit*>(
      ::google::api::Distribution_BucketOptions_Explicit::internal_default_instance());
}
class Distribution_BucketOptions::HasBitSetters {
 public:
  static const ::google::api::Distribution_BucketOptions_Linear& linear_buckets(const Distribution_BucketOptions* msg);
  static const ::google::api::Distribution_BucketOptions_Exponential& exponential_buckets(const Distribution_BucketOptions* msg);
  static const ::google::api::Distribution_BucketOptions_Explicit& explicit_buckets(const Distribution_BucketOptions* msg);
};

const ::google::api::Distribution_BucketOptions_Linear&
Distribution_BucketOptions::HasBitSetters::linear_buckets(const Distribution_BucketOptions* msg) {
  return *msg->options_.linear_buckets_;
}
const ::google::api::Distribution_BucketOptions_Exponential&
Distribution_BucketOptions::HasBitSetters::exponential_buckets(const Distribution_BucketOptions* msg) {
  return *msg->options_.exponential_buckets_;
}
const ::google::api::Distribution_BucketOptions_Explicit&
Distribution_BucketOptions::HasBitSetters::explicit_buckets(const Distribution_BucketOptions* msg) {
  return *msg->options_.explicit_buckets_;
}
void Distribution_BucketOptions::set_allocated_linear_buckets(::google::api::Distribution_BucketOptions_Linear* linear_buckets) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_options();
  if (linear_buckets) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      linear_buckets = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, linear_buckets, submessage_arena);
    }
    set_has_linear_buckets();
    options_.linear_buckets_ = linear_buckets;
  }
  // @@protoc_insertion_point(field_set_allocated:google.api.Distribution.BucketOptions.linear_buckets)
}
void Distribution_BucketOptions::set_allocated_exponential_buckets(::google::api::Distribution_BucketOptions_Exponential* exponential_buckets) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_options();
  if (exponential_buckets) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      exponential_buckets = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, exponential_buckets, submessage_arena);
    }
    set_has_exponential_buckets();
    options_.exponential_buckets_ = exponential_buckets;
  }
  // @@protoc_insertion_point(field_set_allocated:google.api.Distribution.BucketOptions.exponential_buckets)
}
void Distribution_BucketOptions::set_allocated_explicit_buckets(::google::api::Distribution_BucketOptions_Explicit* explicit_buckets) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_options();
  if (explicit_buckets) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      explicit_buckets = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, explicit_buckets, submessage_arena);
    }
    set_has_explicit_buckets();
    options_.explicit_buckets_ = explicit_buckets;
  }
  // @@protoc_insertion_point(field_set_allocated:google.api.Distribution.BucketOptions.explicit_buckets)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Distribution_BucketOptions::kLinearBucketsFieldNumber;
const int Distribution_BucketOptions::kExponentialBucketsFieldNumber;
const int Distribution_BucketOptions::kExplicitBucketsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Distribution_BucketOptions::Distribution_BucketOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.api.Distribution.BucketOptions)
}
Distribution_BucketOptions::Distribution_BucketOptions(const Distribution_BucketOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_options();
  switch (from.options_case()) {
    case kLinearBuckets: {
      mutable_linear_buckets()->::google::api::Distribution_BucketOptions_Linear::MergeFrom(from.linear_buckets());
      break;
    }
    case kExponentialBuckets: {
      mutable_exponential_buckets()->::google::api::Distribution_BucketOptions_Exponential::MergeFrom(from.exponential_buckets());
      break;
    }
    case kExplicitBuckets: {
      mutable_explicit_buckets()->::google::api::Distribution_BucketOptions_Explicit::MergeFrom(from.explicit_buckets());
      break;
    }
    case OPTIONS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.api.Distribution.BucketOptions)
}

void Distribution_BucketOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Distribution_BucketOptions_google_2fapi_2fdistribution_2eproto.base);
  clear_has_options();
}

Distribution_BucketOptions::~Distribution_BucketOptions() {
  // @@protoc_insertion_point(destructor:google.api.Distribution.BucketOptions)
  SharedDtor();
}

void Distribution_BucketOptions::SharedDtor() {
  if (has_options()) {
    clear_options();
  }
}

void Distribution_BucketOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Distribution_BucketOptions& Distribution_BucketOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Distribution_BucketOptions_google_2fapi_2fdistribution_2eproto.base);
  return *internal_default_instance();
}


void Distribution_BucketOptions::clear_options() {
// @@protoc_insertion_point(one_of_clear_start:google.api.Distribution.BucketOptions)
  switch (options_case()) {
    case kLinearBuckets: {
      delete options_.linear_buckets_;
      break;
    }
    case kExponentialBuckets: {
      delete options_.exponential_buckets_;
      break;
    }
    case kExplicitBuckets: {
      delete options_.explicit_buckets_;
      break;
    }
    case OPTIONS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OPTIONS_NOT_SET;
}


void Distribution_BucketOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.Distribution.BucketOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_options();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Distribution_BucketOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.api.Distribution.BucketOptions.Linear linear_buckets = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_linear_buckets(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.api.Distribution.BucketOptions.Exponential exponential_buckets = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_exponential_buckets(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.api.Distribution.BucketOptions.Explicit explicit_buckets = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_explicit_buckets(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Distribution_BucketOptions::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.api.Distribution.BucketOptions)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.api.Distribution.BucketOptions.Linear linear_buckets = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_linear_buckets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.api.Distribution.BucketOptions.Exponential exponential_buckets = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_exponential_buckets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.api.Distribution.BucketOptions.Explicit explicit_buckets = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_explicit_buckets()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.api.Distribution.BucketOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.api.Distribution.BucketOptions)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Distribution_BucketOptions::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.api.Distribution.BucketOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.api.Distribution.BucketOptions.Linear linear_buckets = 1;
  if (has_linear_buckets()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::linear_buckets(this), output);
  }

  // .google.api.Distribution.BucketOptions.Exponential exponential_buckets = 2;
  if (has_exponential_buckets()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::exponential_buckets(this), output);
  }

  // .google.api.Distribution.BucketOptions.Explicit explicit_buckets = 3;
  if (has_explicit_buckets()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::explicit_buckets(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.api.Distribution.BucketOptions)
}

::PROTOBUF_NAMESPACE_ID::uint8* Distribution_BucketOptions::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.api.Distribution.BucketOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.api.Distribution.BucketOptions.Linear linear_buckets = 1;
  if (has_linear_buckets()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::linear_buckets(this), target);
  }

  // .google.api.Distribution.BucketOptions.Exponential exponential_buckets = 2;
  if (has_exponential_buckets()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::exponential_buckets(this), target);
  }

  // .google.api.Distribution.BucketOptions.Explicit explicit_buckets = 3;
  if (has_explicit_buckets()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::explicit_buckets(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.api.Distribution.BucketOptions)
  return target;
}

size_t Distribution_BucketOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.Distribution.BucketOptions)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (options_case()) {
    // .google.api.Distribution.BucketOptions.Linear linear_buckets = 1;
    case kLinearBuckets: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *options_.linear_buckets_);
      break;
    }
    // .google.api.Distribution.BucketOptions.Exponential exponential_buckets = 2;
    case kExponentialBuckets: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *options_.exponential_buckets_);
      break;
    }
    // .google.api.Distribution.BucketOptions.Explicit explicit_buckets = 3;
    case kExplicitBuckets: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *options_.explicit_buckets_);
      break;
    }
    case OPTIONS_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Distribution_BucketOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.api.Distribution.BucketOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const Distribution_BucketOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Distribution_BucketOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.api.Distribution.BucketOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.api.Distribution.BucketOptions)
    MergeFrom(*source);
  }
}

void Distribution_BucketOptions::MergeFrom(const Distribution_BucketOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.Distribution.BucketOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.options_case()) {
    case kLinearBuckets: {
      mutable_linear_buckets()->::google::api::Distribution_BucketOptions_Linear::MergeFrom(from.linear_buckets());
      break;
    }
    case kExponentialBuckets: {
      mutable_exponential_buckets()->::google::api::Distribution_BucketOptions_Exponential::MergeFrom(from.exponential_buckets());
      break;
    }
    case kExplicitBuckets: {
      mutable_explicit_buckets()->::google::api::Distribution_BucketOptions_Explicit::MergeFrom(from.explicit_buckets());
      break;
    }
    case OPTIONS_NOT_SET: {
      break;
    }
  }
}

void Distribution_BucketOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.api.Distribution.BucketOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Distribution_BucketOptions::CopyFrom(const Distribution_BucketOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.Distribution.BucketOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Distribution_BucketOptions::IsInitialized() const {
  return true;
}

void Distribution_BucketOptions::Swap(Distribution_BucketOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Distribution_BucketOptions::InternalSwap(Distribution_BucketOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(options_, other->options_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Distribution_BucketOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Distribution::InitAsDefaultInstance() {
  ::google::api::_Distribution_default_instance_._instance.get_mutable()->range_ = const_cast< ::google::api::Distribution_Range*>(
      ::google::api::Distribution_Range::internal_default_instance());
  ::google::api::_Distribution_default_instance_._instance.get_mutable()->bucket_options_ = const_cast< ::google::api::Distribution_BucketOptions*>(
      ::google::api::Distribution_BucketOptions::internal_default_instance());
}
class Distribution::HasBitSetters {
 public:
  static const ::google::api::Distribution_Range& range(const Distribution* msg);
  static const ::google::api::Distribution_BucketOptions& bucket_options(const Distribution* msg);
};

const ::google::api::Distribution_Range&
Distribution::HasBitSetters::range(const Distribution* msg) {
  return *msg->range_;
}
const ::google::api::Distribution_BucketOptions&
Distribution::HasBitSetters::bucket_options(const Distribution* msg) {
  return *msg->bucket_options_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Distribution::kCountFieldNumber;
const int Distribution::kMeanFieldNumber;
const int Distribution::kSumOfSquaredDeviationFieldNumber;
const int Distribution::kRangeFieldNumber;
const int Distribution::kBucketOptionsFieldNumber;
const int Distribution::kBucketCountsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Distribution::Distribution()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.api.Distribution)
}
Distribution::Distribution(const Distribution& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      bucket_counts_(from.bucket_counts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_range()) {
    range_ = new ::google::api::Distribution_Range(*from.range_);
  } else {
    range_ = nullptr;
  }
  if (from.has_bucket_options()) {
    bucket_options_ = new ::google::api::Distribution_BucketOptions(*from.bucket_options_);
  } else {
    bucket_options_ = nullptr;
  }
  ::memcpy(&count_, &from.count_,
    static_cast<size_t>(reinterpret_cast<char*>(&sum_of_squared_deviation_) -
    reinterpret_cast<char*>(&count_)) + sizeof(sum_of_squared_deviation_));
  // @@protoc_insertion_point(copy_constructor:google.api.Distribution)
}

void Distribution::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Distribution_google_2fapi_2fdistribution_2eproto.base);
  ::memset(&range_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sum_of_squared_deviation_) -
      reinterpret_cast<char*>(&range_)) + sizeof(sum_of_squared_deviation_));
}

Distribution::~Distribution() {
  // @@protoc_insertion_point(destructor:google.api.Distribution)
  SharedDtor();
}

void Distribution::SharedDtor() {
  if (this != internal_default_instance()) delete range_;
  if (this != internal_default_instance()) delete bucket_options_;
}

void Distribution::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Distribution& Distribution::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Distribution_google_2fapi_2fdistribution_2eproto.base);
  return *internal_default_instance();
}


void Distribution::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.Distribution)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bucket_counts_.Clear();
  if (GetArenaNoVirtual() == nullptr && range_ != nullptr) {
    delete range_;
  }
  range_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && bucket_options_ != nullptr) {
    delete bucket_options_;
  }
  bucket_options_ = nullptr;
  ::memset(&count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sum_of_squared_deviation_) -
      reinterpret_cast<char*>(&count_)) + sizeof(sum_of_squared_deviation_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Distribution::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double mean = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          mean_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double sum_of_squared_deviation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          sum_of_squared_deviation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .google.api.Distribution.Range range = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_range(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.api.Distribution.BucketOptions bucket_options = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_bucket_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 bucket_counts = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(mutable_bucket_counts(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56) {
          add_bucket_counts(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Distribution::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.api.Distribution)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 count = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double mean = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mean_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double sum_of_squared_deviation = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sum_of_squared_deviation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.api.Distribution.Range range = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_range()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.api.Distribution.BucketOptions bucket_options = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_bucket_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 bucket_counts = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_bucket_counts())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 1, 58u, input, this->mutable_bucket_counts())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.api.Distribution)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.api.Distribution)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Distribution::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.api.Distribution)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 count = 1;
  if (this->count() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->count(), output);
  }

  // double mean = 2;
  if (!(this->mean() <= 0 && this->mean() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->mean(), output);
  }

  // double sum_of_squared_deviation = 3;
  if (!(this->sum_of_squared_deviation() <= 0 && this->sum_of_squared_deviation() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->sum_of_squared_deviation(), output);
  }

  // .google.api.Distribution.Range range = 4;
  if (this->has_range()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::range(this), output);
  }

  // .google.api.Distribution.BucketOptions bucket_options = 6;
  if (this->has_bucket_options()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::bucket_options(this), output);
  }

  // repeated int64 bucket_counts = 7;
  if (this->bucket_counts_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(7, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_bucket_counts_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->bucket_counts_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64NoTag(
      this->bucket_counts(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:google.api.Distribution)
}

::PROTOBUF_NAMESPACE_ID::uint8* Distribution::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.api.Distribution)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 count = 1;
  if (this->count() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->count(), target);
  }

  // double mean = 2;
  if (!(this->mean() <= 0 && this->mean() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->mean(), target);
  }

  // double sum_of_squared_deviation = 3;
  if (!(this->sum_of_squared_deviation() <= 0 && this->sum_of_squared_deviation() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->sum_of_squared_deviation(), target);
  }

  // .google.api.Distribution.Range range = 4;
  if (this->has_range()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::range(this), target);
  }

  // .google.api.Distribution.BucketOptions bucket_options = 6;
  if (this->has_bucket_options()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::bucket_options(this), target);
  }

  // repeated int64 bucket_counts = 7;
  if (this->bucket_counts_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      7,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _bucket_counts_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->bucket_counts_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.api.Distribution)
  return target;
}

size_t Distribution::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.Distribution)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 bucket_counts = 7;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->bucket_counts_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _bucket_counts_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .google.api.Distribution.Range range = 4;
  if (this->has_range()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *range_);
  }

  // .google.api.Distribution.BucketOptions bucket_options = 6;
  if (this->has_bucket_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bucket_options_);
  }

  // int64 count = 1;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->count());
  }

  // double mean = 2;
  if (!(this->mean() <= 0 && this->mean() >= 0)) {
    total_size += 1 + 8;
  }

  // double sum_of_squared_deviation = 3;
  if (!(this->sum_of_squared_deviation() <= 0 && this->sum_of_squared_deviation() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Distribution::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.api.Distribution)
  GOOGLE_DCHECK_NE(&from, this);
  const Distribution* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Distribution>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.api.Distribution)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.api.Distribution)
    MergeFrom(*source);
  }
}

void Distribution::MergeFrom(const Distribution& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.Distribution)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bucket_counts_.MergeFrom(from.bucket_counts_);
  if (from.has_range()) {
    mutable_range()->::google::api::Distribution_Range::MergeFrom(from.range());
  }
  if (from.has_bucket_options()) {
    mutable_bucket_options()->::google::api::Distribution_BucketOptions::MergeFrom(from.bucket_options());
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
  if (!(from.mean() <= 0 && from.mean() >= 0)) {
    set_mean(from.mean());
  }
  if (!(from.sum_of_squared_deviation() <= 0 && from.sum_of_squared_deviation() >= 0)) {
    set_sum_of_squared_deviation(from.sum_of_squared_deviation());
  }
}

void Distribution::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.api.Distribution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Distribution::CopyFrom(const Distribution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.Distribution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Distribution::IsInitialized() const {
  return true;
}

void Distribution::Swap(Distribution* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Distribution::InternalSwap(Distribution* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  bucket_counts_.InternalSwap(&other->bucket_counts_);
  swap(range_, other->range_);
  swap(bucket_options_, other->bucket_options_);
  swap(count_, other->count_);
  swap(mean_, other->mean_);
  swap(sum_of_squared_deviation_, other->sum_of_squared_deviation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Distribution::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace api
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::google::api::Distribution_Range* Arena::CreateMaybeMessage< ::google::api::Distribution_Range >(Arena* arena) {
  return Arena::CreateInternal< ::google::api::Distribution_Range >(arena);
}
template<> PROTOBUF_NOINLINE ::google::api::Distribution_BucketOptions_Linear* Arena::CreateMaybeMessage< ::google::api::Distribution_BucketOptions_Linear >(Arena* arena) {
  return Arena::CreateInternal< ::google::api::Distribution_BucketOptions_Linear >(arena);
}
template<> PROTOBUF_NOINLINE ::google::api::Distribution_BucketOptions_Exponential* Arena::CreateMaybeMessage< ::google::api::Distribution_BucketOptions_Exponential >(Arena* arena) {
  return Arena::CreateInternal< ::google::api::Distribution_BucketOptions_Exponential >(arena);
}
template<> PROTOBUF_NOINLINE ::google::api::Distribution_BucketOptions_Explicit* Arena::CreateMaybeMessage< ::google::api::Distribution_BucketOptions_Explicit >(Arena* arena) {
  return Arena::CreateInternal< ::google::api::Distribution_BucketOptions_Explicit >(arena);
}
template<> PROTOBUF_NOINLINE ::google::api::Distribution_BucketOptions* Arena::CreateMaybeMessage< ::google::api::Distribution_BucketOptions >(Arena* arena) {
  return Arena::CreateInternal< ::google::api::Distribution_BucketOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::google::api::Distribution* Arena::CreateMaybeMessage< ::google::api::Distribution >(Arena* arena) {
  return Arena::CreateInternal< ::google::api::Distribution >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
