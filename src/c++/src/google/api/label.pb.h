// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/label.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2flabel_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2flabel_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fapi_2flabel_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fapi_2flabel_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fapi_2flabel_2eproto;
namespace google {
namespace api {
class LabelDescriptor;
class LabelDescriptorDefaultTypeInternal;
extern LabelDescriptorDefaultTypeInternal _LabelDescriptor_default_instance_;
}  // namespace api
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::api::LabelDescriptor* Arena::CreateMaybeMessage<::google::api::LabelDescriptor>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace api {

enum LabelDescriptor_ValueType : int {
  LabelDescriptor_ValueType_STRING = 0,
  LabelDescriptor_ValueType_BOOL = 1,
  LabelDescriptor_ValueType_INT64 = 2,
  LabelDescriptor_ValueType_LabelDescriptor_ValueType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  LabelDescriptor_ValueType_LabelDescriptor_ValueType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool LabelDescriptor_ValueType_IsValid(int value);
constexpr LabelDescriptor_ValueType LabelDescriptor_ValueType_ValueType_MIN = LabelDescriptor_ValueType_STRING;
constexpr LabelDescriptor_ValueType LabelDescriptor_ValueType_ValueType_MAX = LabelDescriptor_ValueType_INT64;
constexpr int LabelDescriptor_ValueType_ValueType_ARRAYSIZE = LabelDescriptor_ValueType_ValueType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LabelDescriptor_ValueType_descriptor();
template<typename T>
inline const std::string& LabelDescriptor_ValueType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LabelDescriptor_ValueType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LabelDescriptor_ValueType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LabelDescriptor_ValueType_descriptor(), enum_t_value);
}
inline bool LabelDescriptor_ValueType_Parse(
    const std::string& name, LabelDescriptor_ValueType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LabelDescriptor_ValueType>(
    LabelDescriptor_ValueType_descriptor(), name, value);
}
// ===================================================================

class LabelDescriptor :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.LabelDescriptor) */ {
 public:
  LabelDescriptor();
  virtual ~LabelDescriptor();

  LabelDescriptor(const LabelDescriptor& from);
  LabelDescriptor(LabelDescriptor&& from) noexcept
    : LabelDescriptor() {
    *this = ::std::move(from);
  }

  inline LabelDescriptor& operator=(const LabelDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline LabelDescriptor& operator=(LabelDescriptor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LabelDescriptor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LabelDescriptor* internal_default_instance() {
    return reinterpret_cast<const LabelDescriptor*>(
               &_LabelDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LabelDescriptor& a, LabelDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(LabelDescriptor* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LabelDescriptor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LabelDescriptor* New() const final {
    return CreateMaybeMessage<LabelDescriptor>(nullptr);
  }

  LabelDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LabelDescriptor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LabelDescriptor& from);
  void MergeFrom(const LabelDescriptor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LabelDescriptor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.LabelDescriptor";
  }
  protected:
  explicit LabelDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fapi_2flabel_2eproto);
    return ::descriptor_table_google_2fapi_2flabel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef LabelDescriptor_ValueType ValueType;
  static constexpr ValueType STRING =
    LabelDescriptor_ValueType_STRING;
  static constexpr ValueType BOOL =
    LabelDescriptor_ValueType_BOOL;
  static constexpr ValueType INT64 =
    LabelDescriptor_ValueType_INT64;
  static inline bool ValueType_IsValid(int value) {
    return LabelDescriptor_ValueType_IsValid(value);
  }
  static constexpr ValueType ValueType_MIN =
    LabelDescriptor_ValueType_ValueType_MIN;
  static constexpr ValueType ValueType_MAX =
    LabelDescriptor_ValueType_ValueType_MAX;
  static constexpr int ValueType_ARRAYSIZE =
    LabelDescriptor_ValueType_ValueType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ValueType_descriptor() {
    return LabelDescriptor_ValueType_descriptor();
  }
  template<typename T>
  static inline const std::string& ValueType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ValueType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ValueType_Name.");
    return LabelDescriptor_ValueType_Name(enum_t_value);
  }
  static inline bool ValueType_Parse(const std::string& name,
      ValueType* value) {
    return LabelDescriptor_ValueType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kDescriptionFieldNumber = 3,
    kValueTypeFieldNumber = 2,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key(
      std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string description = 3;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_description();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_description(
      std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // .google.api.LabelDescriptor.ValueType value_type = 2;
  void clear_value_type();
  ::google::api::LabelDescriptor_ValueType value_type() const;
  void set_value_type(::google::api::LabelDescriptor_ValueType value);
  private:
  ::google::api::LabelDescriptor_ValueType _internal_value_type() const;
  void _internal_set_value_type(::google::api::LabelDescriptor_ValueType value);
  public:

  // @@protoc_insertion_point(class_scope:google.api.LabelDescriptor)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  int value_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fapi_2flabel_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LabelDescriptor

// string key = 1;
inline void LabelDescriptor::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& LabelDescriptor::key() const {
  // @@protoc_insertion_point(field_get:google.api.LabelDescriptor.key)
  return _internal_key();
}
inline void LabelDescriptor::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:google.api.LabelDescriptor.key)
}
inline std::string* LabelDescriptor::mutable_key() {
  // @@protoc_insertion_point(field_mutable:google.api.LabelDescriptor.key)
  return _internal_mutable_key();
}
inline const std::string& LabelDescriptor::_internal_key() const {
  return key_.Get();
}
inline void LabelDescriptor::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void LabelDescriptor::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.api.LabelDescriptor.key)
}
inline void LabelDescriptor::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.api.LabelDescriptor.key)
}
inline void LabelDescriptor::set_key(const char* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.api.LabelDescriptor.key)
}
inline std::string* LabelDescriptor::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* LabelDescriptor::release_key() {
  // @@protoc_insertion_point(field_release:google.api.LabelDescriptor.key)
  
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void LabelDescriptor::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.api.LabelDescriptor.key)
}
inline std::string* LabelDescriptor::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.LabelDescriptor.key)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void LabelDescriptor::unsafe_arena_set_allocated_key(
    std::string* key) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (key != nullptr) {
    
  } else {
    
  }
  key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.LabelDescriptor.key)
}

// .google.api.LabelDescriptor.ValueType value_type = 2;
inline void LabelDescriptor::clear_value_type() {
  value_type_ = 0;
}
inline ::google::api::LabelDescriptor_ValueType LabelDescriptor::_internal_value_type() const {
  return static_cast< ::google::api::LabelDescriptor_ValueType >(value_type_);
}
inline ::google::api::LabelDescriptor_ValueType LabelDescriptor::value_type() const {
  // @@protoc_insertion_point(field_get:google.api.LabelDescriptor.value_type)
  return _internal_value_type();
}
inline void LabelDescriptor::_internal_set_value_type(::google::api::LabelDescriptor_ValueType value) {
  
  value_type_ = value;
}
inline void LabelDescriptor::set_value_type(::google::api::LabelDescriptor_ValueType value) {
  _internal_set_value_type(value);
  // @@protoc_insertion_point(field_set:google.api.LabelDescriptor.value_type)
}

// string description = 3;
inline void LabelDescriptor::clear_description() {
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& LabelDescriptor::description() const {
  // @@protoc_insertion_point(field_get:google.api.LabelDescriptor.description)
  return _internal_description();
}
inline void LabelDescriptor::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:google.api.LabelDescriptor.description)
}
inline std::string* LabelDescriptor::mutable_description() {
  // @@protoc_insertion_point(field_mutable:google.api.LabelDescriptor.description)
  return _internal_mutable_description();
}
inline const std::string& LabelDescriptor::_internal_description() const {
  return description_.Get();
}
inline void LabelDescriptor::_internal_set_description(const std::string& value) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void LabelDescriptor::set_description(std::string&& value) {
  
  description_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.api.LabelDescriptor.description)
}
inline void LabelDescriptor::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.api.LabelDescriptor.description)
}
inline void LabelDescriptor::set_description(const char* value,
    size_t size) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.api.LabelDescriptor.description)
}
inline std::string* LabelDescriptor::_internal_mutable_description() {
  
  return description_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* LabelDescriptor::release_description() {
  // @@protoc_insertion_point(field_release:google.api.LabelDescriptor.description)
  
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void LabelDescriptor::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.api.LabelDescriptor.description)
}
inline std::string* LabelDescriptor::unsafe_arena_release_description() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.LabelDescriptor.description)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return description_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void LabelDescriptor::unsafe_arena_set_allocated_description(
    std::string* description) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (description != nullptr) {
    
  } else {
    
  }
  description_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      description, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.LabelDescriptor.description)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace api
}  // namespace google

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::google::api::LabelDescriptor_ValueType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::api::LabelDescriptor_ValueType>() {
  return ::google::api::LabelDescriptor_ValueType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2flabel_2eproto
