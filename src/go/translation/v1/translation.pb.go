// Copyright 2018 Sagittarius LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.24.0-devel
// 	protoc        (unknown)
// source: translation/v1/translation.proto

package translation

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	v1 "google.golang.org/genproto/googleapis/cloud/speech/v1"
	status "google.golang.org/genproto/googleapis/rpc/status"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status1 "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// The canonical error codes for StreamingTranslationTaskResponse
type StreamingTranslationTaskCode int32

const (
	// The first enum value must be zero in proto3.
	StreamingTranslationTaskCode_OK StreamingTranslationTaskCode = 0
	// instruct client to continue sending audio data
	StreamingTranslationTaskCode_CONTINUE StreamingTranslationTaskCode = 9100
	// instruct client to skip sending audio data
	StreamingTranslationTaskCode_SKIP_AUDIO StreamingTranslationTaskCode = 9101
)

// Enum value maps for StreamingTranslationTaskCode.
var (
	StreamingTranslationTaskCode_name = map[int32]string{
		0:    "OK",
		9100: "CONTINUE",
		9101: "SKIP_AUDIO",
	}
	StreamingTranslationTaskCode_value = map[string]int32{
		"OK":         0,
		"CONTINUE":   9100,
		"SKIP_AUDIO": 9101,
	}
)

func (x StreamingTranslationTaskCode) Enum() *StreamingTranslationTaskCode {
	p := new(StreamingTranslationTaskCode)
	*p = x
	return p
}

func (x StreamingTranslationTaskCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamingTranslationTaskCode) Descriptor() protoreflect.EnumDescriptor {
	return file_translation_v1_translation_proto_enumTypes[0].Descriptor()
}

func (StreamingTranslationTaskCode) Type() protoreflect.EnumType {
	return &file_translation_v1_translation_proto_enumTypes[0]
}

func (x StreamingTranslationTaskCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StreamingTranslationTaskCode.Descriptor instead.
func (StreamingTranslationTaskCode) EnumDescriptor() ([]byte, []int) {
	return file_translation_v1_translation_proto_rawDescGZIP(), []int{0}
}

type MediaTranslationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Media Identity
	MediaIdentity string `protobuf:"bytes,1,opt,name=media_identity,json=mediaIdentity,proto3" json:"media_identity,omitempty"`
	// target language
	// ISO-639-1 Code https://cloud.google.com/translate/docs/languages
	LanguageCode string `protobuf:"bytes,2,opt,name=language_code,json=languageCode,proto3" json:"language_code,omitempty"`
	// the format of the transcripts
	Format string `protobuf:"bytes,3,opt,name=format,proto3" json:"format,omitempty"`
	// position of the transcript relative to the begginning of the audio or video
	StartTime float64 `protobuf:"fixed64,6,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// hints or keywords for more possible results
	Hints string `protobuf:"bytes,7,opt,name=hints,proto3" json:"hints,omitempty"`
}

func (x *MediaTranslationRequest) Reset() {
	*x = MediaTranslationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_translation_v1_translation_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MediaTranslationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediaTranslationRequest) ProtoMessage() {}

func (x *MediaTranslationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_translation_v1_translation_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediaTranslationRequest.ProtoReflect.Descriptor instead.
func (*MediaTranslationRequest) Descriptor() ([]byte, []int) {
	return file_translation_v1_translation_proto_rawDescGZIP(), []int{0}
}

func (x *MediaTranslationRequest) GetMediaIdentity() string {
	if x != nil {
		return x.MediaIdentity
	}
	return ""
}

func (x *MediaTranslationRequest) GetLanguageCode() string {
	if x != nil {
		return x.LanguageCode
	}
	return ""
}

func (x *MediaTranslationRequest) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *MediaTranslationRequest) GetStartTime() float64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *MediaTranslationRequest) GetHints() string {
	if x != nil {
		return x.Hints
	}
	return ""
}

type MediaTranslationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *Output-only* If set, returns a [google.rpc.Status][google.rpc.Status] message that
	// specifies the error for the operation.
	// return 404 if no result, in this case, client should use StreamingTranslationRequest
	Error *status.Status `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	// best translation results
	Results []*TranscriptInfo `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`
	// if there is a stream translation task running, return task id
	StreamTranslationTaskId string `protobuf:"bytes,3,opt,name=stream_translation_task_id,json=streamTranslationTaskId,proto3" json:"stream_translation_task_id,omitempty"`
}

func (x *MediaTranslationResponse) Reset() {
	*x = MediaTranslationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_translation_v1_translation_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MediaTranslationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediaTranslationResponse) ProtoMessage() {}

func (x *MediaTranslationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_translation_v1_translation_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediaTranslationResponse.ProtoReflect.Descriptor instead.
func (*MediaTranslationResponse) Descriptor() ([]byte, []int) {
	return file_translation_v1_translation_proto_rawDescGZIP(), []int{1}
}

func (x *MediaTranslationResponse) GetError() *status.Status {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *MediaTranslationResponse) GetResults() []*TranscriptInfo {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *MediaTranslationResponse) GetStreamTranslationTaskId() string {
	if x != nil {
		return x.StreamTranslationTaskId
	}
	return ""
}

type TranscriptInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the identity, can be used in TranslationRequest
	TranscriptIdentity string `protobuf:"bytes,1,opt,name=transcript_identity,json=transcriptIdentity,proto3" json:"transcript_identity,omitempty"`
	// ISO-639-1 Code https://cloud.google.com/translate/docs/languages
	LanguageCode string `protobuf:"bytes,2,opt,name=language_code,json=languageCode,proto3" json:"language_code,omitempty"`
	// actually we should use as "confidence"
	// use "ranking" for back ward competibility
	Ranking float32 `protobuf:"fixed32,3,opt,name=ranking,proto3" json:"ranking,omitempty"`
	// maybe: "ai" - result from ai tranlation
	// "edited" - result from user contribution
	Tags []string `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty"`
	// in ms, can be +/-
	Delay int64 `protobuf:"varint,5,opt,name=delay,proto3" json:"delay,omitempty"`
	// the confidence of the quality of the translation
	Confidence float32 `protobuf:"fixed32,6,opt,name=confidence,proto3" json:"confidence,omitempty"`
}

func (x *TranscriptInfo) Reset() {
	*x = TranscriptInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_translation_v1_translation_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptInfo) ProtoMessage() {}

func (x *TranscriptInfo) ProtoReflect() protoreflect.Message {
	mi := &file_translation_v1_translation_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptInfo.ProtoReflect.Descriptor instead.
func (*TranscriptInfo) Descriptor() ([]byte, []int) {
	return file_translation_v1_translation_proto_rawDescGZIP(), []int{2}
}

func (x *TranscriptInfo) GetTranscriptIdentity() string {
	if x != nil {
		return x.TranscriptIdentity
	}
	return ""
}

func (x *TranscriptInfo) GetLanguageCode() string {
	if x != nil {
		return x.LanguageCode
	}
	return ""
}

func (x *TranscriptInfo) GetRanking() float32 {
	if x != nil {
		return x.Ranking
	}
	return 0
}

func (x *TranscriptInfo) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *TranscriptInfo) GetDelay() int64 {
	if x != nil {
		return x.Delay
	}
	return 0
}

func (x *TranscriptInfo) GetConfidence() float32 {
	if x != nil {
		return x.Confidence
	}
	return 0
}

type DetectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the text to be detect
	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *DetectionRequest) Reset() {
	*x = DetectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_translation_v1_translation_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetectionRequest) ProtoMessage() {}

func (x *DetectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_translation_v1_translation_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetectionRequest.ProtoReflect.Descriptor instead.
func (*DetectionRequest) Descriptor() ([]byte, []int) {
	return file_translation_v1_translation_proto_rawDescGZIP(), []int{3}
}

func (x *DetectionRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type DetectionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// there might be more than one prediction
	Prediction []*DetectionPrediction `protobuf:"bytes,1,rep,name=prediction,proto3" json:"prediction,omitempty"`
}

func (x *DetectionResponse) Reset() {
	*x = DetectionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_translation_v1_translation_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetectionResponse) ProtoMessage() {}

func (x *DetectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_translation_v1_translation_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetectionResponse.ProtoReflect.Descriptor instead.
func (*DetectionResponse) Descriptor() ([]byte, []int) {
	return file_translation_v1_translation_proto_rawDescGZIP(), []int{4}
}

func (x *DetectionResponse) GetPrediction() []*DetectionPrediction {
	if x != nil {
		return x.Prediction
	}
	return nil
}

type DetectionPrediction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *Output-only* the language code of the detection result
	LanguageCode string `protobuf:"bytes,1,opt,name=language_code,json=languageCode,proto3" json:"language_code,omitempty"`
	// *Output-only* The confidence estimate between 0.0 and 1.0. A higher number
	// indicates an estimated greater likelihood that the detection result are
	// correct.
	Confidence float32 `protobuf:"fixed32,2,opt,name=confidence,proto3" json:"confidence,omitempty"`
}

func (x *DetectionPrediction) Reset() {
	*x = DetectionPrediction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_translation_v1_translation_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetectionPrediction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetectionPrediction) ProtoMessage() {}

func (x *DetectionPrediction) ProtoReflect() protoreflect.Message {
	mi := &file_translation_v1_translation_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetectionPrediction.ProtoReflect.Descriptor instead.
func (*DetectionPrediction) Descriptor() ([]byte, []int) {
	return file_translation_v1_translation_proto_rawDescGZIP(), []int{5}
}

func (x *DetectionPrediction) GetLanguageCode() string {
	if x != nil {
		return x.LanguageCode
	}
	return ""
}

func (x *DetectionPrediction) GetConfidence() float32 {
	if x != nil {
		return x.Confidence
	}
	return 0
}

type TranscriptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// oneof case 2
	// return translate result by transcript_identity
	TranscriptIdentity string `protobuf:"bytes,4,opt,name=transcript_identity,json=transcriptIdentity,proto3" json:"transcript_identity,omitempty"`
	// position of the transcript relative to the begginning of the audio or video
	StartTime float64 `protobuf:"fixed64,6,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
}

func (x *TranscriptRequest) Reset() {
	*x = TranscriptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_translation_v1_translation_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptRequest) ProtoMessage() {}

func (x *TranscriptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_translation_v1_translation_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptRequest.ProtoReflect.Descriptor instead.
func (*TranscriptRequest) Descriptor() ([]byte, []int) {
	return file_translation_v1_translation_proto_rawDescGZIP(), []int{6}
}

func (x *TranscriptRequest) GetTranscriptIdentity() string {
	if x != nil {
		return x.TranscriptIdentity
	}
	return ""
}

func (x *TranscriptRequest) GetStartTime() float64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

type TranscriptResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error *status.Status `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	// each line of the transcript
	Transcripts []*TranscriptResponse_Cue `protobuf:"bytes,2,rep,name=transcripts,proto3" json:"transcripts,omitempty"`
	// if transcripts ended in this result
	IsEndOfTranscript bool `protobuf:"varint,3,opt,name=is_end_of_transcript,json=isEndOfTranscript,proto3" json:"is_end_of_transcript,omitempty"`
}

func (x *TranscriptResponse) Reset() {
	*x = TranscriptResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_translation_v1_translation_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptResponse) ProtoMessage() {}

func (x *TranscriptResponse) ProtoReflect() protoreflect.Message {
	mi := &file_translation_v1_translation_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptResponse.ProtoReflect.Descriptor instead.
func (*TranscriptResponse) Descriptor() ([]byte, []int) {
	return file_translation_v1_translation_proto_rawDescGZIP(), []int{7}
}

func (x *TranscriptResponse) GetError() *status.Status {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TranscriptResponse) GetTranscripts() []*TranscriptResponse_Cue {
	if x != nil {
		return x.Transcripts
	}
	return nil
}

func (x *TranscriptResponse) GetIsEndOfTranscript() bool {
	if x != nil {
		return x.IsEndOfTranscript
	}
	return false
}

// The top-level message sent by the client for the `StreamingTranslation` method.
// Multiple `StreamingTranslationRequest` messages are sent. The first message
// must contain a `streaming_config` message
// and must not contain `audio` data.
// All subsequent messages must contain `audio` data and must not contain a
// `streaming_config` message.
type StreamingTranslationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The streaming request, which is either a streaming config or audio content.
	//
	// Types that are assignable to StreamingRequest:
	//	*StreamingTranslationRequest_StreamingConfig
	//	*StreamingTranslationRequest_AudioContent
	StreamingRequest isStreamingTranslationRequest_StreamingRequest `protobuf_oneof:"streaming_request"`
}

func (x *StreamingTranslationRequest) Reset() {
	*x = StreamingTranslationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_translation_v1_translation_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingTranslationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingTranslationRequest) ProtoMessage() {}

func (x *StreamingTranslationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_translation_v1_translation_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingTranslationRequest.ProtoReflect.Descriptor instead.
func (*StreamingTranslationRequest) Descriptor() ([]byte, []int) {
	return file_translation_v1_translation_proto_rawDescGZIP(), []int{8}
}

func (m *StreamingTranslationRequest) GetStreamingRequest() isStreamingTranslationRequest_StreamingRequest {
	if m != nil {
		return m.StreamingRequest
	}
	return nil
}

func (x *StreamingTranslationRequest) GetStreamingConfig() *StreamingTranslationRequestConfig {
	if x, ok := x.GetStreamingRequest().(*StreamingTranslationRequest_StreamingConfig); ok {
		return x.StreamingConfig
	}
	return nil
}

func (x *StreamingTranslationRequest) GetAudioContent() []byte {
	if x, ok := x.GetStreamingRequest().(*StreamingTranslationRequest_AudioContent); ok {
		return x.AudioContent
	}
	return nil
}

type isStreamingTranslationRequest_StreamingRequest interface {
	isStreamingTranslationRequest_StreamingRequest()
}

type StreamingTranslationRequest_StreamingConfig struct {
	StreamingConfig *StreamingTranslationRequestConfig `protobuf:"bytes,1,opt,name=streaming_config,json=streamingConfig,proto3,oneof"`
}

type StreamingTranslationRequest_AudioContent struct {
	// The audio data to be recognized. Sequential chunks of audio data are sent
	// in sequential `StreamingTranslationRequest` messages. The first
	// `StreamingTranslationRequest` message must not contain `audio_content` data
	// and all subsequent `StreamingTranslationRequest` messages must contain
	// `audio_content` data. The audio bytes must be encoded as specified in
	// `RecognitionConfig`. Note: as with all bytes fields, protobuffers use a
	// pure binary representation (not base64). See
	// [audio limits](https://cloud.google.com/speech/limits#content).
	AudioContent []byte `protobuf:"bytes,2,opt,name=audio_content,json=audioContent,proto3,oneof"`
}

func (*StreamingTranslationRequest_StreamingConfig) isStreamingTranslationRequest_StreamingRequest() {
}

func (*StreamingTranslationRequest_AudioContent) isStreamingTranslationRequest_StreamingRequest() {}

type StreamingTranslationRequestConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Provides information to the recognizer that specifies how to process the
	// request. The first `StreamingTranslationRequest` message must contain a
	// `streaming_config`  message.
	StreamingConfig *v1.RecognitionConfig `protobuf:"bytes,1,opt,name=streaming_config,json=streamingConfig,proto3" json:"streaming_config,omitempty"`
	// the media identity
	MediaIdentity string `protobuf:"bytes,2,opt,name=media_identity,json=mediaIdentity,proto3" json:"media_identity,omitempty"`
	// the language code of the audio
	// ISO-639-1 Code https://cloud.google.com/translate/docs/languages
	AudioLanguageCode string `protobuf:"bytes,3,opt,name=audio_language_code,json=audioLanguageCode,proto3" json:"audio_language_code,omitempty"`
	// ISO-639-1 Code https://cloud.google.com/translate/docs/languages
	TargetLanguageCode string `protobuf:"bytes,4,opt,name=target_language_code,json=targetLanguageCode,proto3" json:"target_language_code,omitempty"`
	// the track of audio
	AudioTrack string `protobuf:"bytes,5,opt,name=audio_track,json=audioTrack,proto3" json:"audio_track,omitempty"`
	// maybe video or file name
	Hints string `protobuf:"bytes,6,opt,name=hints,proto3" json:"hints,omitempty"`
}

func (x *StreamingTranslationRequestConfig) Reset() {
	*x = StreamingTranslationRequestConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_translation_v1_translation_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingTranslationRequestConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingTranslationRequestConfig) ProtoMessage() {}

func (x *StreamingTranslationRequestConfig) ProtoReflect() protoreflect.Message {
	mi := &file_translation_v1_translation_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingTranslationRequestConfig.ProtoReflect.Descriptor instead.
func (*StreamingTranslationRequestConfig) Descriptor() ([]byte, []int) {
	return file_translation_v1_translation_proto_rawDescGZIP(), []int{9}
}

func (x *StreamingTranslationRequestConfig) GetStreamingConfig() *v1.RecognitionConfig {
	if x != nil {
		return x.StreamingConfig
	}
	return nil
}

func (x *StreamingTranslationRequestConfig) GetMediaIdentity() string {
	if x != nil {
		return x.MediaIdentity
	}
	return ""
}

func (x *StreamingTranslationRequestConfig) GetAudioLanguageCode() string {
	if x != nil {
		return x.AudioLanguageCode
	}
	return ""
}

func (x *StreamingTranslationRequestConfig) GetTargetLanguageCode() string {
	if x != nil {
		return x.TargetLanguageCode
	}
	return ""
}

func (x *StreamingTranslationRequestConfig) GetAudioTrack() string {
	if x != nil {
		return x.AudioTrack
	}
	return ""
}

func (x *StreamingTranslationRequestConfig) GetHints() string {
	if x != nil {
		return x.Hints
	}
	return ""
}

// The top-level message sent by server for the `StreamingTranslation` method.
// Multiple `StreamingTranslationResponse` messages may be sent.
type StreamingTranslationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *Output-only* If set, returns a [google.rpc.Status][google.rpc.Status] message that
	// specifies the error for the operation.
	Error *status.Status `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	// streaming_response must be one of following
	//
	// Types that are assignable to StreamingResponse:
	//	*StreamingTranslationResponse_StreamingResult
	//	*StreamingTranslationResponse_Taskinfo
	//	*StreamingTranslationResponse_TranscriptResult
	StreamingResponse isStreamingTranslationResponse_StreamingResponse `protobuf_oneof:"streaming_response"`
}

func (x *StreamingTranslationResponse) Reset() {
	*x = StreamingTranslationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_translation_v1_translation_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingTranslationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingTranslationResponse) ProtoMessage() {}

func (x *StreamingTranslationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_translation_v1_translation_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingTranslationResponse.ProtoReflect.Descriptor instead.
func (*StreamingTranslationResponse) Descriptor() ([]byte, []int) {
	return file_translation_v1_translation_proto_rawDescGZIP(), []int{10}
}

func (x *StreamingTranslationResponse) GetError() *status.Status {
	if x != nil {
		return x.Error
	}
	return nil
}

func (m *StreamingTranslationResponse) GetStreamingResponse() isStreamingTranslationResponse_StreamingResponse {
	if m != nil {
		return m.StreamingResponse
	}
	return nil
}

func (x *StreamingTranslationResponse) GetStreamingResult() *StreamingTranslationResult {
	if x, ok := x.GetStreamingResponse().(*StreamingTranslationResponse_StreamingResult); ok {
		return x.StreamingResult
	}
	return nil
}

func (x *StreamingTranslationResponse) GetTaskinfo() *StreamingTranslationTaskInfo {
	if x, ok := x.GetStreamingResponse().(*StreamingTranslationResponse_Taskinfo); ok {
		return x.Taskinfo
	}
	return nil
}

func (x *StreamingTranslationResponse) GetTranscriptResult() *TranscriptInfo {
	if x, ok := x.GetStreamingResponse().(*StreamingTranslationResponse_TranscriptResult); ok {
		return x.TranscriptResult
	}
	return nil
}

type isStreamingTranslationResponse_StreamingResponse interface {
	isStreamingTranslationResponse_StreamingResponse()
}

type StreamingTranslationResponse_StreamingResult struct {
	// *Output-only* If the request is suit for streaming result, This contains results that
	// correspond to consecutive portions of the audio currently being processed.
	StreamingResult *StreamingTranslationResult `protobuf:"bytes,2,opt,name=streaming_result,json=streamingResult,proto3,oneof"`
}

type StreamingTranslationResponse_Taskinfo struct {
	// *Output-only* If StreamingTranslationTask has been created for farther inquiry
	// this is the task info include id and estimated finish time, etc.
	Taskinfo *StreamingTranslationTaskInfo `protobuf:"bytes,3,opt,name=taskinfo,proto3,oneof"`
}

type StreamingTranslationResponse_TranscriptResult struct {
	// *Output-only* If the StreamingTranslationTask has finished and the client still alive
	// this is the translated transcript in whole
	TranscriptResult *TranscriptInfo `protobuf:"bytes,4,opt,name=transcript_result,json=transcriptResult,proto3,oneof"`
}

func (*StreamingTranslationResponse_StreamingResult) isStreamingTranslationResponse_StreamingResponse() {
}

func (*StreamingTranslationResponse_Taskinfo) isStreamingTranslationResponse_StreamingResponse() {}

func (*StreamingTranslationResponse_TranscriptResult) isStreamingTranslationResponse_StreamingResponse() {
}

// the StreamingTranslationTask id that created by the `StreamingTranslation` method.
type StreamingTranslationTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
}

func (x *StreamingTranslationTaskRequest) Reset() {
	*x = StreamingTranslationTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_translation_v1_translation_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingTranslationTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingTranslationTaskRequest) ProtoMessage() {}

func (x *StreamingTranslationTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_translation_v1_translation_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingTranslationTaskRequest.ProtoReflect.Descriptor instead.
func (*StreamingTranslationTaskRequest) Descriptor() ([]byte, []int) {
	return file_translation_v1_translation_proto_rawDescGZIP(), []int{11}
}

func (x *StreamingTranslationTaskRequest) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

// the translated TranscriptInfo or `StreamingTranslationTaskInfo`
type StreamingTranslationTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// maybe be:
	// StreamingTranslationTaskCode.CONTINUE
	// StreamingTranslationTaskCode.SKIP_AUDIO
	Error *status.Status `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	// Types that are assignable to StreamingRequest:
	//	*StreamingTranslationTaskResponse_Taskinfo
	//	*StreamingTranslationTaskResponse_Transcriptinfo
	StreamingRequest isStreamingTranslationTaskResponse_StreamingRequest `protobuf_oneof:"streaming_request"`
}

func (x *StreamingTranslationTaskResponse) Reset() {
	*x = StreamingTranslationTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_translation_v1_translation_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingTranslationTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingTranslationTaskResponse) ProtoMessage() {}

func (x *StreamingTranslationTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_translation_v1_translation_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingTranslationTaskResponse.ProtoReflect.Descriptor instead.
func (*StreamingTranslationTaskResponse) Descriptor() ([]byte, []int) {
	return file_translation_v1_translation_proto_rawDescGZIP(), []int{12}
}

func (x *StreamingTranslationTaskResponse) GetError() *status.Status {
	if x != nil {
		return x.Error
	}
	return nil
}

func (m *StreamingTranslationTaskResponse) GetStreamingRequest() isStreamingTranslationTaskResponse_StreamingRequest {
	if m != nil {
		return m.StreamingRequest
	}
	return nil
}

func (x *StreamingTranslationTaskResponse) GetTaskinfo() *StreamingTranslationTaskInfo {
	if x, ok := x.GetStreamingRequest().(*StreamingTranslationTaskResponse_Taskinfo); ok {
		return x.Taskinfo
	}
	return nil
}

func (x *StreamingTranslationTaskResponse) GetTranscriptinfo() *TranscriptInfo {
	if x, ok := x.GetStreamingRequest().(*StreamingTranslationTaskResponse_Transcriptinfo); ok {
		return x.Transcriptinfo
	}
	return nil
}

type isStreamingTranslationTaskResponse_StreamingRequest interface {
	isStreamingTranslationTaskResponse_StreamingRequest()
}

type StreamingTranslationTaskResponse_Taskinfo struct {
	Taskinfo *StreamingTranslationTaskInfo `protobuf:"bytes,2,opt,name=taskinfo,proto3,oneof"`
}

type StreamingTranslationTaskResponse_Transcriptinfo struct {
	// can return result
	Transcriptinfo *TranscriptInfo `protobuf:"bytes,3,opt,name=transcriptinfo,proto3,oneof"`
}

func (*StreamingTranslationTaskResponse_Taskinfo) isStreamingTranslationTaskResponse_StreamingRequest() {
}

func (*StreamingTranslationTaskResponse_Transcriptinfo) isStreamingTranslationTaskResponse_StreamingRequest() {
}

// the StreamingTranslationTask that created by the `StreamingTranslation` method.
type StreamingTranslationTaskInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// this task id can be used for farther inquiry
	TaskId string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// this is the estimated finished time, the task is finished if the time is zero
	// or less
	EstimateTime float64 `protobuf:"fixed64,2,opt,name=estimate_time,json=estimateTime,proto3" json:"estimate_time,omitempty"`
}

func (x *StreamingTranslationTaskInfo) Reset() {
	*x = StreamingTranslationTaskInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_translation_v1_translation_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingTranslationTaskInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingTranslationTaskInfo) ProtoMessage() {}

func (x *StreamingTranslationTaskInfo) ProtoReflect() protoreflect.Message {
	mi := &file_translation_v1_translation_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingTranslationTaskInfo.ProtoReflect.Descriptor instead.
func (*StreamingTranslationTaskInfo) Descriptor() ([]byte, []int) {
	return file_translation_v1_translation_proto_rawDescGZIP(), []int{13}
}

func (x *StreamingTranslationTaskInfo) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *StreamingTranslationTaskInfo) GetEstimateTime() float64 {
	if x != nil {
		return x.EstimateTime
	}
	return 0
}

type StreamingTranslationResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *Output-only* Transcript text representing the words that the user spoke.
	Transcript string `protobuf:"bytes,1,opt,name=transcript,proto3" json:"transcript,omitempty"`
	// *Output-only* The confidence estimate between 0.0 and 1.0. A higher number
	// indicates an estimated greater likelihood that the recognized words are
	// correct. This field is typically provided only for the top hypothesis, and
	// only for `is_final=true` results. Clients should not rely on the
	// `confidence` field as it is not guaranteed to be accurate or consistent.
	// The default of 0.0 is a sentinel value indicating `confidence` was not set.
	Confidence float32 `protobuf:"fixed32,2,opt,name=confidence,proto3" json:"confidence,omitempty"`
	// *Output-only* An estimate of the likelihood that the recognizer will not
	// change its guess about this interim result. Values range from 0.0
	// (completely unstable) to 1.0 (completely stable).
	// This field is only provided for interim results (`is_final=false`).
	// The default of 0.0 is a sentinel value indicating `stability` was not set.
	Stability float32 `protobuf:"fixed32,3,opt,name=stability,proto3" json:"stability,omitempty"`
	// *Output-only* Time offset relative to the beginning of the audio,
	// and corresponding to the start of the spoken word.
	// This field is only set if `enable_word_time_offsets=true` and only
	// in the top hypothesis.
	// This is an experimental feature and the accuracy of the time offset can
	// vary.
	StartTime float64 `protobuf:"fixed64,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// *Output-only* Time offset relative to the beginning of the audio,
	// and corresponding to the end of the spoken word.
	// This field is only set if `enable_word_time_offsets=true` and only
	// in the top hypothesis.
	// This is an experimental feature and the accuracy of the time offset can
	// vary.
	EndTime float64 `protobuf:"fixed64,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *StreamingTranslationResult) Reset() {
	*x = StreamingTranslationResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_translation_v1_translation_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingTranslationResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingTranslationResult) ProtoMessage() {}

func (x *StreamingTranslationResult) ProtoReflect() protoreflect.Message {
	mi := &file_translation_v1_translation_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingTranslationResult.ProtoReflect.Descriptor instead.
func (*StreamingTranslationResult) Descriptor() ([]byte, []int) {
	return file_translation_v1_translation_proto_rawDescGZIP(), []int{14}
}

func (x *StreamingTranslationResult) GetTranscript() string {
	if x != nil {
		return x.Transcript
	}
	return ""
}

func (x *StreamingTranslationResult) GetConfidence() float32 {
	if x != nil {
		return x.Confidence
	}
	return 0
}

func (x *StreamingTranslationResult) GetStability() float32 {
	if x != nil {
		return x.Stability
	}
	return 0
}

func (x *StreamingTranslationResult) GetStartTime() float64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *StreamingTranslationResult) GetEndTime() float64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

// We use Google Translation Service for text translation.
// Translation API Reference: https://cloud.google.com/translate/docs/reference/translate
type TextTranslationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The text to translate
	Text []string `protobuf:"bytes,1,rep,name=text,proto3" json:"text,omitempty"`
	// The language to use for translation of the text
	// ISO-639-1/bcp47 Code with tags
	// https://cloud.google.com/translate/docs/languages
	TargetLanguageCode string `protobuf:"bytes,2,opt,name=target_language_code,json=targetLanguageCode,proto3" json:"target_language_code,omitempty"`
	// The language of the source text
	// ISO-639-1/bcp47 Code with tags
	// https://cloud.google.com/translate/docs/languages
	SourceLanguageCode string `protobuf:"bytes,3,opt,name=source_language_code,json=sourceLanguageCode,proto3" json:"source_language_code,omitempty"`
}

func (x *TextTranslationRequest) Reset() {
	*x = TextTranslationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_translation_v1_translation_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextTranslationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextTranslationRequest) ProtoMessage() {}

func (x *TextTranslationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_translation_v1_translation_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextTranslationRequest.ProtoReflect.Descriptor instead.
func (*TextTranslationRequest) Descriptor() ([]byte, []int) {
	return file_translation_v1_translation_proto_rawDescGZIP(), []int{15}
}

func (x *TextTranslationRequest) GetText() []string {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *TextTranslationRequest) GetTargetLanguageCode() string {
	if x != nil {
		return x.TargetLanguageCode
	}
	return ""
}

func (x *TextTranslationRequest) GetSourceLanguageCode() string {
	if x != nil {
		return x.SourceLanguageCode
	}
	return ""
}

type TextTranslationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error *status.Status `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	// translation results for the requested text
	Results []*TextTranslationResponse_Text `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *TextTranslationResponse) Reset() {
	*x = TextTranslationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_translation_v1_translation_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextTranslationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextTranslationResponse) ProtoMessage() {}

func (x *TextTranslationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_translation_v1_translation_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextTranslationResponse.ProtoReflect.Descriptor instead.
func (*TextTranslationResponse) Descriptor() ([]byte, []int) {
	return file_translation_v1_translation_proto_rawDescGZIP(), []int{16}
}

func (x *TextTranslationResponse) GetError() *status.Status {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TextTranslationResponse) GetResults() []*TextTranslationResponse_Text {
	if x != nil {
		return x.Results
	}
	return nil
}

type UserQuotaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UserQuotaRequest) Reset() {
	*x = UserQuotaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_translation_v1_translation_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserQuotaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserQuotaRequest) ProtoMessage() {}

func (x *UserQuotaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_translation_v1_translation_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserQuotaRequest.ProtoReflect.Descriptor instead.
func (*UserQuotaRequest) Descriptor() ([]byte, []int) {
	return file_translation_v1_translation_proto_rawDescGZIP(), []int{17}
}

// Remaining user quota
type UserQuotaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// remaining user quota in number
	Quota int64 `protobuf:"varint,1,opt,name=quota,proto3" json:"quota,omitempty"`
	// remaining quota in time(second)
	TimeLeft int64          `protobuf:"varint,2,opt,name=time_left,json=timeLeft,proto3" json:"time_left,omitempty"`
	Error    *status.Status `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *UserQuotaResponse) Reset() {
	*x = UserQuotaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_translation_v1_translation_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserQuotaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserQuotaResponse) ProtoMessage() {}

func (x *UserQuotaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_translation_v1_translation_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserQuotaResponse.ProtoReflect.Descriptor instead.
func (*UserQuotaResponse) Descriptor() ([]byte, []int) {
	return file_translation_v1_translation_proto_rawDescGZIP(), []int{18}
}

func (x *UserQuotaResponse) GetQuota() int64 {
	if x != nil {
		return x.Quota
	}
	return 0
}

func (x *UserQuotaResponse) GetTimeLeft() int64 {
	if x != nil {
		return x.TimeLeft
	}
	return 0
}

func (x *UserQuotaResponse) GetError() *status.Status {
	if x != nil {
		return x.Error
	}
	return nil
}

type ProcessOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of the order
	OrderId int64 `protobuf:"varint,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	// uri to get the audio file
	AudioUri string `protobuf:"bytes,2,opt,name=audio_uri,json=audioUri,proto3" json:"audio_uri,omitempty"`
	// information of the audio file
	AudioConfig *v1.RecognitionConfig `protobuf:"bytes,3,opt,name=audio_config,json=audioConfig,proto3" json:"audio_config,omitempty"`
}

func (x *ProcessOrderRequest) Reset() {
	*x = ProcessOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_translation_v1_translation_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessOrderRequest) ProtoMessage() {}

func (x *ProcessOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_translation_v1_translation_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessOrderRequest.ProtoReflect.Descriptor instead.
func (*ProcessOrderRequest) Descriptor() ([]byte, []int) {
	return file_translation_v1_translation_proto_rawDescGZIP(), []int{19}
}

func (x *ProcessOrderRequest) GetOrderId() int64 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *ProcessOrderRequest) GetAudioUri() string {
	if x != nil {
		return x.AudioUri
	}
	return ""
}

func (x *ProcessOrderRequest) GetAudioConfig() *v1.RecognitionConfig {
	if x != nil {
		return x.AudioConfig
	}
	return nil
}

type ProcessOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error       *status.Status `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	OrderStatus int64          `protobuf:"varint,2,opt,name=order_status,json=orderStatus,proto3" json:"order_status,omitempty"`
}

func (x *ProcessOrderResponse) Reset() {
	*x = ProcessOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_translation_v1_translation_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessOrderResponse) ProtoMessage() {}

func (x *ProcessOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_translation_v1_translation_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessOrderResponse.ProtoReflect.Descriptor instead.
func (*ProcessOrderResponse) Descriptor() ([]byte, []int) {
	return file_translation_v1_translation_proto_rawDescGZIP(), []int{20}
}

func (x *ProcessOrderResponse) GetError() *status.Status {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ProcessOrderResponse) GetOrderStatus() int64 {
	if x != nil {
		return x.OrderStatus
	}
	return 0
}

type TranscriptResponse_Cue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the start and end of the transcripts
	StartTime float64 `protobuf:"fixed64,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime   float64 `protobuf:"fixed64,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Text      string  `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *TranscriptResponse_Cue) Reset() {
	*x = TranscriptResponse_Cue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_translation_v1_translation_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TranscriptResponse_Cue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranscriptResponse_Cue) ProtoMessage() {}

func (x *TranscriptResponse_Cue) ProtoReflect() protoreflect.Message {
	mi := &file_translation_v1_translation_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranscriptResponse_Cue.ProtoReflect.Descriptor instead.
func (*TranscriptResponse_Cue) Descriptor() ([]byte, []int) {
	return file_translation_v1_translation_proto_rawDescGZIP(), []int{7, 0}
}

func (x *TranscriptResponse_Cue) GetStartTime() float64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *TranscriptResponse_Cue) GetEndTime() float64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *TranscriptResponse_Cue) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type TextTranslationResponse_Text struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The source language of the text detected
	// ISO-639-1/bcp47 Code with tags
	// https://cloud.google.com/translate/docs/languages
	SourceLanguage string `protobuf:"bytes,1,opt,name=source_language,json=sourceLanguage,proto3" json:"source_language,omitempty"`
	// The translated Text
	Text string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *TextTranslationResponse_Text) Reset() {
	*x = TextTranslationResponse_Text{}
	if protoimpl.UnsafeEnabled {
		mi := &file_translation_v1_translation_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextTranslationResponse_Text) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextTranslationResponse_Text) ProtoMessage() {}

func (x *TextTranslationResponse_Text) ProtoReflect() protoreflect.Message {
	mi := &file_translation_v1_translation_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextTranslationResponse_Text.ProtoReflect.Descriptor instead.
func (*TextTranslationResponse_Text) Descriptor() ([]byte, []int) {
	return file_translation_v1_translation_proto_rawDescGZIP(), []int{16, 0}
}

func (x *TextTranslationResponse_Text) GetSourceLanguage() string {
	if x != nil {
		return x.SourceLanguage
	}
	return ""
}

func (x *TextTranslationResponse_Text) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

var File_translation_v1_translation_proto protoreflect.FileDescriptor

var file_translation_v1_translation_proto_rawDesc = []byte{
	0x0a, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31,
	0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x1a, 0x73, 0x61, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x69, 0x75, 0x73, 0x2e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2f, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xb2, 0x01, 0x0a, 0x17, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x68, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x68, 0x69, 0x6e, 0x74, 0x73, 0x22, 0xc7, 0x01, 0x0a, 0x18, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x44, 0x0a, 0x07,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x73, 0x61, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x69, 0x75, 0x73, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22,
	0xca, 0x01, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x2f, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x61, 0x6e, 0x6b,
	0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x72, 0x61, 0x6e, 0x6b, 0x69,
	0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x26, 0x0a, 0x10,
	0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x22, 0x64, 0x0a, 0x11, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x0a, 0x70, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x73, 0x61, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x69, 0x75, 0x73, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x74, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a,
	0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5a, 0x0a, 0x13, 0x44, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x63, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x13, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x9a, 0x02, 0x0a, 0x12,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x54, 0x0a, 0x0b,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x73, 0x61, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x69, 0x75, 0x73, 0x2e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x43, 0x75, 0x65, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x73, 0x12, 0x2f, 0x0a, 0x14, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x6f, 0x66, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x11, 0x69, 0x73, 0x45, 0x6e, 0x64, 0x4f, 0x66, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x1a, 0x53, 0x0a, 0x03, 0x43, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0xc5, 0x01, 0x0a, 0x1b, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6a, 0x0a, 0x10, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x73, 0x61, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x69, 0x75, 0x73,
	0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x25, 0x0a, 0x0d, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0c, 0x61,
	0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0xb9, 0x02, 0x0a, 0x21, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x54, 0x0a, 0x10, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x67, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x25, 0x0a, 0x0e,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x75, 0x64, 0x69,
	0x6f, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x68, 0x69, 0x6e, 0x74, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x68, 0x69, 0x6e, 0x74, 0x73, 0x22, 0xf6, 0x02, 0x0a,
	0x1c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x63, 0x0a, 0x10, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x36, 0x2e, 0x73, 0x61, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x69, 0x75, 0x73, 0x2e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x56, 0x0a, 0x08,
	0x74, 0x61, 0x73, 0x6b, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38,
	0x2e, 0x73, 0x61, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x69, 0x75, 0x73, 0x2e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b,
	0x69, 0x6e, 0x66, 0x6f, 0x12, 0x59, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x73, 0x61, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x69, 0x75, 0x73, 0x2e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x10, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42,
	0x14, 0x0a, 0x12, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3a, 0x0a, 0x1f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69,
	0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49,
	0x64, 0x22, 0x8f, 0x02, 0x0a, 0x20, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x56, 0x0a, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x38, 0x2e, 0x73, 0x61, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x69, 0x75, 0x73,
	0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x08,
	0x74, 0x61, 0x73, 0x6b, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x54, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x73, 0x61, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x69, 0x75, 0x73, 0x2e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x13,
	0x0a, 0x11, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x5c, 0x0a, 0x1c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0c, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0xb4, 0x01, 0x0a, 0x1a, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x09, 0x73, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x90, 0x01, 0x0a, 0x16, 0x54, 0x65, 0x78,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xdc, 0x01, 0x0a, 0x17,
	0x54, 0x65, 0x78, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x52, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x38, 0x2e, 0x73, 0x61, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x69, 0x75, 0x73,
	0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x65, 0x78, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x52, 0x07, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0x43, 0x0a, 0x04, 0x54, 0x65, 0x78, 0x74, 0x12, 0x27, 0x0a,
	0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0x12, 0x0a, 0x10, 0x55, 0x73,
	0x65, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x70,
	0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x69,
	0x6d, 0x65, 0x4c, 0x65, 0x66, 0x74, 0x12, 0x28, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x22, 0x9b, 0x01, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x75, 0x72, 0x69,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x55, 0x72, 0x69,
	0x12, 0x4c, 0x0a, 0x0c, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x0b, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x63,
	0x0a, 0x14, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2a, 0x46, 0x0a, 0x1c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x08, 0x43,
	0x4f, 0x4e, 0x54, 0x49, 0x4e, 0x55, 0x45, 0x10, 0x8c, 0x47, 0x12, 0x0f, 0x0a, 0x0a, 0x53, 0x4b,
	0x49, 0x50, 0x5f, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x10, 0x8d, 0x47, 0x32, 0xdd, 0x0a, 0x0a, 0x0b,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xcf, 0x01, 0x0a, 0x0e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x33,
	0x2e, 0x73, 0x61, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x69, 0x75, 0x73, 0x2e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x73, 0x61, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x69, 0x75,
	0x73, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x52, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x4c, 0x22, 0x47, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2f, 0x7b, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x7d, 0x2f, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2f, 0x7b, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x7d, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x3a, 0x7b, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0x90, 0x01,
	0x0a, 0x0e, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x12, 0x2c, 0x2e, 0x73, 0x61, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x69, 0x75, 0x73, 0x2e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d,
	0x2e, 0x73, 0x61, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x69, 0x75, 0x73, 0x2e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x74, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x22, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x2f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x3a, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x9a, 0x01, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12,
	0x2d, 0x2e, 0x73, 0x61, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x69, 0x75, 0x73, 0x2e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e,
	0x2e, 0x73, 0x61, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x69, 0x75, 0x73, 0x2e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x22, 0x22, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x3a, 0x01, 0x2a, 0x12, 0xb9, 0x01,
	0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12,
	0x32, 0x2e, 0x73, 0x61, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x69, 0x75, 0x73, 0x2e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x78,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x73, 0x61, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x69, 0x75,
	0x73, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x65, 0x78, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x39,
	0x22, 0x34, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x78, 0x74, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x2f, 0x7b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x7d, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0x8d, 0x01, 0x0a, 0x14, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x37, 0x2e, 0x73, 0x61, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x69, 0x75, 0x73,
	0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x73, 0x61,
	0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x69, 0x75, 0x73, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69,
	0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x12, 0xc5, 0x01, 0x0a, 0x18, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x3b, 0x2e, 0x73, 0x61, 0x67, 0x69, 0x74, 0x74, 0x61,
	0x72, 0x69, 0x75, 0x73, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x73, 0x61, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x69, 0x75,
	0x73, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x22, 0x23, 0x2f, 0x76, 0x31, 0x2f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x2f,
	0x7b, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6e, 0x66, 0x6f, 0x3a, 0x01,
	0x2a, 0x12, 0xa6, 0x01, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x2f, 0x2e, 0x73, 0x61, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x69, 0x75, 0x73,
	0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x73, 0x61, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x69, 0x75,
	0x73, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x22, 0x28, 0x2f,
	0x76, 0x31, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x2f, 0x7b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x8e, 0x01, 0x0a, 0x0c, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x2c, 0x2e, 0x73, 0x61,
	0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x69, 0x75, 0x73, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x6f,
	0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x73, 0x61, 0x67, 0x69,
	0x74, 0x74, 0x61, 0x72, 0x69, 0x75, 0x73, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x61,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b,
	0x12, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x42, 0x43, 0x0a, 0x1d, 0x61,
	0x69, 0x2e, 0x73, 0x61, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x69, 0x75, 0x73, 0x2e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x42, 0x10, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf8, 0x01, 0x01,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_translation_v1_translation_proto_rawDescOnce sync.Once
	file_translation_v1_translation_proto_rawDescData = file_translation_v1_translation_proto_rawDesc
)

func file_translation_v1_translation_proto_rawDescGZIP() []byte {
	file_translation_v1_translation_proto_rawDescOnce.Do(func() {
		file_translation_v1_translation_proto_rawDescData = protoimpl.X.CompressGZIP(file_translation_v1_translation_proto_rawDescData)
	})
	return file_translation_v1_translation_proto_rawDescData
}

var file_translation_v1_translation_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_translation_v1_translation_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_translation_v1_translation_proto_goTypes = []interface{}{
	(StreamingTranslationTaskCode)(0),         // 0: sagittarius.translation.v1.StreamingTranslationTaskCode
	(*MediaTranslationRequest)(nil),           // 1: sagittarius.translation.v1.MediaTranslationRequest
	(*MediaTranslationResponse)(nil),          // 2: sagittarius.translation.v1.MediaTranslationResponse
	(*TranscriptInfo)(nil),                    // 3: sagittarius.translation.v1.TranscriptInfo
	(*DetectionRequest)(nil),                  // 4: sagittarius.translation.v1.DetectionRequest
	(*DetectionResponse)(nil),                 // 5: sagittarius.translation.v1.DetectionResponse
	(*DetectionPrediction)(nil),               // 6: sagittarius.translation.v1.DetectionPrediction
	(*TranscriptRequest)(nil),                 // 7: sagittarius.translation.v1.TranscriptRequest
	(*TranscriptResponse)(nil),                // 8: sagittarius.translation.v1.TranscriptResponse
	(*StreamingTranslationRequest)(nil),       // 9: sagittarius.translation.v1.StreamingTranslationRequest
	(*StreamingTranslationRequestConfig)(nil), // 10: sagittarius.translation.v1.StreamingTranslationRequestConfig
	(*StreamingTranslationResponse)(nil),      // 11: sagittarius.translation.v1.StreamingTranslationResponse
	(*StreamingTranslationTaskRequest)(nil),   // 12: sagittarius.translation.v1.StreamingTranslationTaskRequest
	(*StreamingTranslationTaskResponse)(nil),  // 13: sagittarius.translation.v1.StreamingTranslationTaskResponse
	(*StreamingTranslationTaskInfo)(nil),      // 14: sagittarius.translation.v1.StreamingTranslationTaskInfo
	(*StreamingTranslationResult)(nil),        // 15: sagittarius.translation.v1.StreamingTranslationResult
	(*TextTranslationRequest)(nil),            // 16: sagittarius.translation.v1.TextTranslationRequest
	(*TextTranslationResponse)(nil),           // 17: sagittarius.translation.v1.TextTranslationResponse
	(*UserQuotaRequest)(nil),                  // 18: sagittarius.translation.v1.UserQuotaRequest
	(*UserQuotaResponse)(nil),                 // 19: sagittarius.translation.v1.UserQuotaResponse
	(*ProcessOrderRequest)(nil),               // 20: sagittarius.translation.v1.ProcessOrderRequest
	(*ProcessOrderResponse)(nil),              // 21: sagittarius.translation.v1.ProcessOrderResponse
	(*TranscriptResponse_Cue)(nil),            // 22: sagittarius.translation.v1.TranscriptResponse.Cue
	(*TextTranslationResponse_Text)(nil),      // 23: sagittarius.translation.v1.TextTranslationResponse.Text
	(*status.Status)(nil),                     // 24: google.rpc.Status
	(*v1.RecognitionConfig)(nil),              // 25: google.cloud.speech.v1.RecognitionConfig
}
var file_translation_v1_translation_proto_depIdxs = []int32{
	24, // 0: sagittarius.translation.v1.MediaTranslationResponse.error:type_name -> google.rpc.Status
	3,  // 1: sagittarius.translation.v1.MediaTranslationResponse.results:type_name -> sagittarius.translation.v1.TranscriptInfo
	6,  // 2: sagittarius.translation.v1.DetectionResponse.prediction:type_name -> sagittarius.translation.v1.DetectionPrediction
	24, // 3: sagittarius.translation.v1.TranscriptResponse.error:type_name -> google.rpc.Status
	22, // 4: sagittarius.translation.v1.TranscriptResponse.transcripts:type_name -> sagittarius.translation.v1.TranscriptResponse.Cue
	10, // 5: sagittarius.translation.v1.StreamingTranslationRequest.streaming_config:type_name -> sagittarius.translation.v1.StreamingTranslationRequestConfig
	25, // 6: sagittarius.translation.v1.StreamingTranslationRequestConfig.streaming_config:type_name -> google.cloud.speech.v1.RecognitionConfig
	24, // 7: sagittarius.translation.v1.StreamingTranslationResponse.error:type_name -> google.rpc.Status
	15, // 8: sagittarius.translation.v1.StreamingTranslationResponse.streaming_result:type_name -> sagittarius.translation.v1.StreamingTranslationResult
	14, // 9: sagittarius.translation.v1.StreamingTranslationResponse.taskinfo:type_name -> sagittarius.translation.v1.StreamingTranslationTaskInfo
	3,  // 10: sagittarius.translation.v1.StreamingTranslationResponse.transcript_result:type_name -> sagittarius.translation.v1.TranscriptInfo
	24, // 11: sagittarius.translation.v1.StreamingTranslationTaskResponse.error:type_name -> google.rpc.Status
	14, // 12: sagittarius.translation.v1.StreamingTranslationTaskResponse.taskinfo:type_name -> sagittarius.translation.v1.StreamingTranslationTaskInfo
	3,  // 13: sagittarius.translation.v1.StreamingTranslationTaskResponse.transcriptinfo:type_name -> sagittarius.translation.v1.TranscriptInfo
	24, // 14: sagittarius.translation.v1.TextTranslationResponse.error:type_name -> google.rpc.Status
	23, // 15: sagittarius.translation.v1.TextTranslationResponse.results:type_name -> sagittarius.translation.v1.TextTranslationResponse.Text
	24, // 16: sagittarius.translation.v1.UserQuotaResponse.error:type_name -> google.rpc.Status
	25, // 17: sagittarius.translation.v1.ProcessOrderRequest.audio_config:type_name -> google.cloud.speech.v1.RecognitionConfig
	24, // 18: sagittarius.translation.v1.ProcessOrderResponse.error:type_name -> google.rpc.Status
	1,  // 19: sagittarius.translation.v1.Translation.TranslateMedia:input_type -> sagittarius.translation.v1.MediaTranslationRequest
	4,  // 20: sagittarius.translation.v1.Translation.DetectLanguage:input_type -> sagittarius.translation.v1.DetectionRequest
	7,  // 21: sagittarius.translation.v1.Translation.Transcript:input_type -> sagittarius.translation.v1.TranscriptRequest
	16, // 22: sagittarius.translation.v1.Translation.TranslateText:input_type -> sagittarius.translation.v1.TextTranslationRequest
	9,  // 23: sagittarius.translation.v1.Translation.StreamingTranslation:input_type -> sagittarius.translation.v1.StreamingTranslationRequest
	12, // 24: sagittarius.translation.v1.Translation.StreamingTranslationTask:input_type -> sagittarius.translation.v1.StreamingTranslationTaskRequest
	20, // 25: sagittarius.translation.v1.Translation.ProcessOrder:input_type -> sagittarius.translation.v1.ProcessOrderRequest
	18, // 26: sagittarius.translation.v1.Translation.GetUserQuota:input_type -> sagittarius.translation.v1.UserQuotaRequest
	2,  // 27: sagittarius.translation.v1.Translation.TranslateMedia:output_type -> sagittarius.translation.v1.MediaTranslationResponse
	5,  // 28: sagittarius.translation.v1.Translation.DetectLanguage:output_type -> sagittarius.translation.v1.DetectionResponse
	8,  // 29: sagittarius.translation.v1.Translation.Transcript:output_type -> sagittarius.translation.v1.TranscriptResponse
	17, // 30: sagittarius.translation.v1.Translation.TranslateText:output_type -> sagittarius.translation.v1.TextTranslationResponse
	11, // 31: sagittarius.translation.v1.Translation.StreamingTranslation:output_type -> sagittarius.translation.v1.StreamingTranslationResponse
	13, // 32: sagittarius.translation.v1.Translation.StreamingTranslationTask:output_type -> sagittarius.translation.v1.StreamingTranslationTaskResponse
	21, // 33: sagittarius.translation.v1.Translation.ProcessOrder:output_type -> sagittarius.translation.v1.ProcessOrderResponse
	19, // 34: sagittarius.translation.v1.Translation.GetUserQuota:output_type -> sagittarius.translation.v1.UserQuotaResponse
	27, // [27:35] is the sub-list for method output_type
	19, // [19:27] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_translation_v1_translation_proto_init() }
func file_translation_v1_translation_proto_init() {
	if File_translation_v1_translation_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_translation_v1_translation_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MediaTranslationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_translation_v1_translation_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MediaTranslationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_translation_v1_translation_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_translation_v1_translation_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_translation_v1_translation_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetectionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_translation_v1_translation_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetectionPrediction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_translation_v1_translation_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_translation_v1_translation_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_translation_v1_translation_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingTranslationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_translation_v1_translation_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingTranslationRequestConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_translation_v1_translation_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingTranslationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_translation_v1_translation_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingTranslationTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_translation_v1_translation_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingTranslationTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_translation_v1_translation_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingTranslationTaskInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_translation_v1_translation_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingTranslationResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_translation_v1_translation_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextTranslationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_translation_v1_translation_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextTranslationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_translation_v1_translation_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserQuotaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_translation_v1_translation_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserQuotaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_translation_v1_translation_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_translation_v1_translation_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_translation_v1_translation_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TranscriptResponse_Cue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_translation_v1_translation_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextTranslationResponse_Text); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_translation_v1_translation_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*StreamingTranslationRequest_StreamingConfig)(nil),
		(*StreamingTranslationRequest_AudioContent)(nil),
	}
	file_translation_v1_translation_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*StreamingTranslationResponse_StreamingResult)(nil),
		(*StreamingTranslationResponse_Taskinfo)(nil),
		(*StreamingTranslationResponse_TranscriptResult)(nil),
	}
	file_translation_v1_translation_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*StreamingTranslationTaskResponse_Taskinfo)(nil),
		(*StreamingTranslationTaskResponse_Transcriptinfo)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_translation_v1_translation_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_translation_v1_translation_proto_goTypes,
		DependencyIndexes: file_translation_v1_translation_proto_depIdxs,
		EnumInfos:         file_translation_v1_translation_proto_enumTypes,
		MessageInfos:      file_translation_v1_translation_proto_msgTypes,
	}.Build()
	File_translation_v1_translation_proto = out.File
	file_translation_v1_translation_proto_rawDesc = nil
	file_translation_v1_translation_proto_goTypes = nil
	file_translation_v1_translation_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TranslationClient is the client API for Translation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TranslationClient interface {
	// Translate media(audio or video) by media identity
	TranslateMedia(ctx context.Context, in *MediaTranslationRequest, opts ...grpc.CallOption) (*MediaTranslationResponse, error)
	// detect the language of text
	DetectLanguage(ctx context.Context, in *DetectionRequest, opts ...grpc.CallOption) (*DetectionResponse, error)
	Transcript(ctx context.Context, in *TranscriptRequest, opts ...grpc.CallOption) (*TranscriptResponse, error)
	// Translate text by Google Translation Service
	TranslateText(ctx context.Context, in *TextTranslationRequest, opts ...grpc.CallOption) (*TextTranslationResponse, error)
	// Performs bidirectional streaming audio translation: receive results after or while
	// sending audio. This method is only available via the gRPC API (not REST).
	StreamingTranslation(ctx context.Context, opts ...grpc.CallOption) (Translation_StreamingTranslationClient, error)
	// Check StreamingTranslationTask results or estimate finish time
	// and maybe other informations related to the task
	StreamingTranslationTask(ctx context.Context, in *StreamingTranslationTaskRequest, opts ...grpc.CallOption) (*StreamingTranslationTaskResponse, error)
	// Start an unpaid or failed order
	// for internal use only
	ProcessOrder(ctx context.Context, in *ProcessOrderRequest, opts ...grpc.CallOption) (*ProcessOrderResponse, error)
	// Get User Quota
	GetUserQuota(ctx context.Context, in *UserQuotaRequest, opts ...grpc.CallOption) (*UserQuotaResponse, error)
}

type translationClient struct {
	cc grpc.ClientConnInterface
}

func NewTranslationClient(cc grpc.ClientConnInterface) TranslationClient {
	return &translationClient{cc}
}

func (c *translationClient) TranslateMedia(ctx context.Context, in *MediaTranslationRequest, opts ...grpc.CallOption) (*MediaTranslationResponse, error) {
	out := new(MediaTranslationResponse)
	err := c.cc.Invoke(ctx, "/sagittarius.translation.v1.Translation/TranslateMedia", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *translationClient) DetectLanguage(ctx context.Context, in *DetectionRequest, opts ...grpc.CallOption) (*DetectionResponse, error) {
	out := new(DetectionResponse)
	err := c.cc.Invoke(ctx, "/sagittarius.translation.v1.Translation/DetectLanguage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *translationClient) Transcript(ctx context.Context, in *TranscriptRequest, opts ...grpc.CallOption) (*TranscriptResponse, error) {
	out := new(TranscriptResponse)
	err := c.cc.Invoke(ctx, "/sagittarius.translation.v1.Translation/Transcript", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *translationClient) TranslateText(ctx context.Context, in *TextTranslationRequest, opts ...grpc.CallOption) (*TextTranslationResponse, error) {
	out := new(TextTranslationResponse)
	err := c.cc.Invoke(ctx, "/sagittarius.translation.v1.Translation/TranslateText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *translationClient) StreamingTranslation(ctx context.Context, opts ...grpc.CallOption) (Translation_StreamingTranslationClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Translation_serviceDesc.Streams[0], "/sagittarius.translation.v1.Translation/StreamingTranslation", opts...)
	if err != nil {
		return nil, err
	}
	x := &translationStreamingTranslationClient{stream}
	return x, nil
}

type Translation_StreamingTranslationClient interface {
	Send(*StreamingTranslationRequest) error
	Recv() (*StreamingTranslationResponse, error)
	grpc.ClientStream
}

type translationStreamingTranslationClient struct {
	grpc.ClientStream
}

func (x *translationStreamingTranslationClient) Send(m *StreamingTranslationRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *translationStreamingTranslationClient) Recv() (*StreamingTranslationResponse, error) {
	m := new(StreamingTranslationResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *translationClient) StreamingTranslationTask(ctx context.Context, in *StreamingTranslationTaskRequest, opts ...grpc.CallOption) (*StreamingTranslationTaskResponse, error) {
	out := new(StreamingTranslationTaskResponse)
	err := c.cc.Invoke(ctx, "/sagittarius.translation.v1.Translation/StreamingTranslationTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *translationClient) ProcessOrder(ctx context.Context, in *ProcessOrderRequest, opts ...grpc.CallOption) (*ProcessOrderResponse, error) {
	out := new(ProcessOrderResponse)
	err := c.cc.Invoke(ctx, "/sagittarius.translation.v1.Translation/ProcessOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *translationClient) GetUserQuota(ctx context.Context, in *UserQuotaRequest, opts ...grpc.CallOption) (*UserQuotaResponse, error) {
	out := new(UserQuotaResponse)
	err := c.cc.Invoke(ctx, "/sagittarius.translation.v1.Translation/GetUserQuota", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TranslationServer is the server API for Translation service.
type TranslationServer interface {
	// Translate media(audio or video) by media identity
	TranslateMedia(context.Context, *MediaTranslationRequest) (*MediaTranslationResponse, error)
	// detect the language of text
	DetectLanguage(context.Context, *DetectionRequest) (*DetectionResponse, error)
	Transcript(context.Context, *TranscriptRequest) (*TranscriptResponse, error)
	// Translate text by Google Translation Service
	TranslateText(context.Context, *TextTranslationRequest) (*TextTranslationResponse, error)
	// Performs bidirectional streaming audio translation: receive results after or while
	// sending audio. This method is only available via the gRPC API (not REST).
	StreamingTranslation(Translation_StreamingTranslationServer) error
	// Check StreamingTranslationTask results or estimate finish time
	// and maybe other informations related to the task
	StreamingTranslationTask(context.Context, *StreamingTranslationTaskRequest) (*StreamingTranslationTaskResponse, error)
	// Start an unpaid or failed order
	// for internal use only
	ProcessOrder(context.Context, *ProcessOrderRequest) (*ProcessOrderResponse, error)
	// Get User Quota
	GetUserQuota(context.Context, *UserQuotaRequest) (*UserQuotaResponse, error)
}

// UnimplementedTranslationServer can be embedded to have forward compatible implementations.
type UnimplementedTranslationServer struct {
}

func (*UnimplementedTranslationServer) TranslateMedia(context.Context, *MediaTranslationRequest) (*MediaTranslationResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method TranslateMedia not implemented")
}
func (*UnimplementedTranslationServer) DetectLanguage(context.Context, *DetectionRequest) (*DetectionResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DetectLanguage not implemented")
}
func (*UnimplementedTranslationServer) Transcript(context.Context, *TranscriptRequest) (*TranscriptResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method Transcript not implemented")
}
func (*UnimplementedTranslationServer) TranslateText(context.Context, *TextTranslationRequest) (*TextTranslationResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method TranslateText not implemented")
}
func (*UnimplementedTranslationServer) StreamingTranslation(Translation_StreamingTranslationServer) error {
	return status1.Errorf(codes.Unimplemented, "method StreamingTranslation not implemented")
}
func (*UnimplementedTranslationServer) StreamingTranslationTask(context.Context, *StreamingTranslationTaskRequest) (*StreamingTranslationTaskResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method StreamingTranslationTask not implemented")
}
func (*UnimplementedTranslationServer) ProcessOrder(context.Context, *ProcessOrderRequest) (*ProcessOrderResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ProcessOrder not implemented")
}
func (*UnimplementedTranslationServer) GetUserQuota(context.Context, *UserQuotaRequest) (*UserQuotaResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetUserQuota not implemented")
}

func RegisterTranslationServer(s *grpc.Server, srv TranslationServer) {
	s.RegisterService(&_Translation_serviceDesc, srv)
}

func _Translation_TranslateMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MediaTranslationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranslationServer).TranslateMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sagittarius.translation.v1.Translation/TranslateMedia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranslationServer).TranslateMedia(ctx, req.(*MediaTranslationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Translation_DetectLanguage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranslationServer).DetectLanguage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sagittarius.translation.v1.Translation/DetectLanguage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranslationServer).DetectLanguage(ctx, req.(*DetectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Translation_Transcript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TranscriptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranslationServer).Transcript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sagittarius.translation.v1.Translation/Transcript",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranslationServer).Transcript(ctx, req.(*TranscriptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Translation_TranslateText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextTranslationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranslationServer).TranslateText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sagittarius.translation.v1.Translation/TranslateText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranslationServer).TranslateText(ctx, req.(*TextTranslationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Translation_StreamingTranslation_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TranslationServer).StreamingTranslation(&translationStreamingTranslationServer{stream})
}

type Translation_StreamingTranslationServer interface {
	Send(*StreamingTranslationResponse) error
	Recv() (*StreamingTranslationRequest, error)
	grpc.ServerStream
}

type translationStreamingTranslationServer struct {
	grpc.ServerStream
}

func (x *translationStreamingTranslationServer) Send(m *StreamingTranslationResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *translationStreamingTranslationServer) Recv() (*StreamingTranslationRequest, error) {
	m := new(StreamingTranslationRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Translation_StreamingTranslationTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamingTranslationTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranslationServer).StreamingTranslationTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sagittarius.translation.v1.Translation/StreamingTranslationTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranslationServer).StreamingTranslationTask(ctx, req.(*StreamingTranslationTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Translation_ProcessOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranslationServer).ProcessOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sagittarius.translation.v1.Translation/ProcessOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranslationServer).ProcessOrder(ctx, req.(*ProcessOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Translation_GetUserQuota_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserQuotaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranslationServer).GetUserQuota(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sagittarius.translation.v1.Translation/GetUserQuota",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranslationServer).GetUserQuota(ctx, req.(*UserQuotaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Translation_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sagittarius.translation.v1.Translation",
	HandlerType: (*TranslationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TranslateMedia",
			Handler:    _Translation_TranslateMedia_Handler,
		},
		{
			MethodName: "DetectLanguage",
			Handler:    _Translation_DetectLanguage_Handler,
		},
		{
			MethodName: "Transcript",
			Handler:    _Translation_Transcript_Handler,
		},
		{
			MethodName: "TranslateText",
			Handler:    _Translation_TranslateText_Handler,
		},
		{
			MethodName: "StreamingTranslationTask",
			Handler:    _Translation_StreamingTranslationTask_Handler,
		},
		{
			MethodName: "ProcessOrder",
			Handler:    _Translation_ProcessOrder_Handler,
		},
		{
			MethodName: "GetUserQuota",
			Handler:    _Translation_GetUserQuota_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamingTranslation",
			Handler:       _Translation_StreamingTranslation_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "translation/v1/translation.proto",
}
