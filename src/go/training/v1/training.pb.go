// Code generated by protoc-gen-go. DO NOT EDIT.
// source: training/v1/training.proto

package training

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	v1 "google.golang.org/genproto/googleapis/cloud/speech/v1"
	status "google.golang.org/genproto/googleapis/rpc/status"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TrainingData struct {
	// the media identity
	MediaIdentity string `protobuf:"bytes,1,opt,name=media_identity,json=mediaIdentity,proto3" json:"media_identity,omitempty"`
	// the language code of the payload
	LanguageCode string `protobuf:"bytes,2,opt,name=language_code,json=languageCode,proto3" json:"language_code,omitempty"`
	// the format of the payload
	Format string `protobuf:"bytes,4,opt,name=format,proto3" json:"format,omitempty"`
	// how long does this transcript been played
	PlayedTime float64 `protobuf:"fixed64,5,opt,name=played_time,json=playedTime,proto3" json:"played_time,omitempty"`
	// how long of the entire video
	TotalTime float64 `protobuf:"fixed64,6,opt,name=total_time,json=totalTime,proto3" json:"total_time,omitempty"`
	// in ms, can be +/-
	Delay int64 `protobuf:"varint,8,opt,name=delay,proto3" json:"delay,omitempty"`
	// Types that are valid to be assigned to Data:
	//	*TrainingData_TranscriptIdentity
	//	*TrainingData_Payload
	Data                 isTrainingData_Data `protobuf_oneof:"data"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *TrainingData) Reset()         { *m = TrainingData{} }
func (m *TrainingData) String() string { return proto.CompactTextString(m) }
func (*TrainingData) ProtoMessage()    {}
func (*TrainingData) Descriptor() ([]byte, []int) {
	return fileDescriptor_b17551bd3250fbc4, []int{0}
}

func (m *TrainingData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrainingData.Unmarshal(m, b)
}
func (m *TrainingData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrainingData.Marshal(b, m, deterministic)
}
func (m *TrainingData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrainingData.Merge(m, src)
}
func (m *TrainingData) XXX_Size() int {
	return xxx_messageInfo_TrainingData.Size(m)
}
func (m *TrainingData) XXX_DiscardUnknown() {
	xxx_messageInfo_TrainingData.DiscardUnknown(m)
}

var xxx_messageInfo_TrainingData proto.InternalMessageInfo

func (m *TrainingData) GetMediaIdentity() string {
	if m != nil {
		return m.MediaIdentity
	}
	return ""
}

func (m *TrainingData) GetLanguageCode() string {
	if m != nil {
		return m.LanguageCode
	}
	return ""
}

func (m *TrainingData) GetFormat() string {
	if m != nil {
		return m.Format
	}
	return ""
}

func (m *TrainingData) GetPlayedTime() float64 {
	if m != nil {
		return m.PlayedTime
	}
	return 0
}

func (m *TrainingData) GetTotalTime() float64 {
	if m != nil {
		return m.TotalTime
	}
	return 0
}

func (m *TrainingData) GetDelay() int64 {
	if m != nil {
		return m.Delay
	}
	return 0
}

type isTrainingData_Data interface {
	isTrainingData_Data()
}

type TrainingData_TranscriptIdentity struct {
	TranscriptIdentity string `protobuf:"bytes,3,opt,name=transcript_identity,json=transcriptIdentity,proto3,oneof"`
}

type TrainingData_Payload struct {
	Payload []byte `protobuf:"bytes,7,opt,name=payload,proto3,oneof"`
}

func (*TrainingData_TranscriptIdentity) isTrainingData_Data() {}

func (*TrainingData_Payload) isTrainingData_Data() {}

func (m *TrainingData) GetData() isTrainingData_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *TrainingData) GetTranscriptIdentity() string {
	if x, ok := m.GetData().(*TrainingData_TranscriptIdentity); ok {
		return x.TranscriptIdentity
	}
	return ""
}

func (m *TrainingData) GetPayload() []byte {
	if x, ok := m.GetData().(*TrainingData_Payload); ok {
		return x.Payload
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*TrainingData) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _TrainingData_OneofMarshaler, _TrainingData_OneofUnmarshaler, _TrainingData_OneofSizer, []interface{}{
		(*TrainingData_TranscriptIdentity)(nil),
		(*TrainingData_Payload)(nil),
	}
}

func _TrainingData_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*TrainingData)
	// data
	switch x := m.Data.(type) {
	case *TrainingData_TranscriptIdentity:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.TranscriptIdentity)
	case *TrainingData_Payload:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		b.EncodeRawBytes(x.Payload)
	case nil:
	default:
		return fmt.Errorf("TrainingData.Data has unexpected type %T", x)
	}
	return nil
}

func _TrainingData_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*TrainingData)
	switch tag {
	case 3: // data.transcript_identity
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Data = &TrainingData_TranscriptIdentity{x}
		return true, err
	case 7: // data.payload
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Data = &TrainingData_Payload{x}
		return true, err
	default:
		return false, nil
	}
}

func _TrainingData_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*TrainingData)
	// data
	switch x := m.Data.(type) {
	case *TrainingData_TranscriptIdentity:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.TranscriptIdentity)))
		n += len(x.TranscriptIdentity)
	case *TrainingData_Payload:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.Payload)))
		n += len(x.Payload)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// TODO:
type StreamingTrainingRequest struct {
	// The streaming request, which is either a streaming config or audio content.
	//
	// Types that are valid to be assigned to StreamingRequest:
	//	*StreamingTrainingRequest_StreamingConfig
	//	*StreamingTrainingRequest_AudioContent
	StreamingRequest isStreamingTrainingRequest_StreamingRequest `protobuf_oneof:"streaming_request"`
	Transcript       string                                      `protobuf:"bytes,3,opt,name=transcript,proto3" json:"transcript,omitempty"`
	// the media identity
	MediaIdentity        string   `protobuf:"bytes,4,opt,name=media_identity,json=mediaIdentity,proto3" json:"media_identity,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamingTrainingRequest) Reset()         { *m = StreamingTrainingRequest{} }
func (m *StreamingTrainingRequest) String() string { return proto.CompactTextString(m) }
func (*StreamingTrainingRequest) ProtoMessage()    {}
func (*StreamingTrainingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b17551bd3250fbc4, []int{1}
}

func (m *StreamingTrainingRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamingTrainingRequest.Unmarshal(m, b)
}
func (m *StreamingTrainingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamingTrainingRequest.Marshal(b, m, deterministic)
}
func (m *StreamingTrainingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamingTrainingRequest.Merge(m, src)
}
func (m *StreamingTrainingRequest) XXX_Size() int {
	return xxx_messageInfo_StreamingTrainingRequest.Size(m)
}
func (m *StreamingTrainingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamingTrainingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StreamingTrainingRequest proto.InternalMessageInfo

type isStreamingTrainingRequest_StreamingRequest interface {
	isStreamingTrainingRequest_StreamingRequest()
}

type StreamingTrainingRequest_StreamingConfig struct {
	StreamingConfig *v1.RecognitionConfig `protobuf:"bytes,1,opt,name=streaming_config,json=streamingConfig,proto3,oneof"`
}

type StreamingTrainingRequest_AudioContent struct {
	AudioContent []byte `protobuf:"bytes,2,opt,name=audio_content,json=audioContent,proto3,oneof"`
}

func (*StreamingTrainingRequest_StreamingConfig) isStreamingTrainingRequest_StreamingRequest() {}

func (*StreamingTrainingRequest_AudioContent) isStreamingTrainingRequest_StreamingRequest() {}

func (m *StreamingTrainingRequest) GetStreamingRequest() isStreamingTrainingRequest_StreamingRequest {
	if m != nil {
		return m.StreamingRequest
	}
	return nil
}

func (m *StreamingTrainingRequest) GetStreamingConfig() *v1.RecognitionConfig {
	if x, ok := m.GetStreamingRequest().(*StreamingTrainingRequest_StreamingConfig); ok {
		return x.StreamingConfig
	}
	return nil
}

func (m *StreamingTrainingRequest) GetAudioContent() []byte {
	if x, ok := m.GetStreamingRequest().(*StreamingTrainingRequest_AudioContent); ok {
		return x.AudioContent
	}
	return nil
}

func (m *StreamingTrainingRequest) GetTranscript() string {
	if m != nil {
		return m.Transcript
	}
	return ""
}

func (m *StreamingTrainingRequest) GetMediaIdentity() string {
	if m != nil {
		return m.MediaIdentity
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*StreamingTrainingRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _StreamingTrainingRequest_OneofMarshaler, _StreamingTrainingRequest_OneofUnmarshaler, _StreamingTrainingRequest_OneofSizer, []interface{}{
		(*StreamingTrainingRequest_StreamingConfig)(nil),
		(*StreamingTrainingRequest_AudioContent)(nil),
	}
}

func _StreamingTrainingRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*StreamingTrainingRequest)
	// streaming_request
	switch x := m.StreamingRequest.(type) {
	case *StreamingTrainingRequest_StreamingConfig:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StreamingConfig); err != nil {
			return err
		}
	case *StreamingTrainingRequest_AudioContent:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeRawBytes(x.AudioContent)
	case nil:
	default:
		return fmt.Errorf("StreamingTrainingRequest.StreamingRequest has unexpected type %T", x)
	}
	return nil
}

func _StreamingTrainingRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*StreamingTrainingRequest)
	switch tag {
	case 1: // streaming_request.streaming_config
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(v1.RecognitionConfig)
		err := b.DecodeMessage(msg)
		m.StreamingRequest = &StreamingTrainingRequest_StreamingConfig{msg}
		return true, err
	case 2: // streaming_request.audio_content
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.StreamingRequest = &StreamingTrainingRequest_AudioContent{x}
		return true, err
	default:
		return false, nil
	}
}

func _StreamingTrainingRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*StreamingTrainingRequest)
	// streaming_request
	switch x := m.StreamingRequest.(type) {
	case *StreamingTrainingRequest_StreamingConfig:
		s := proto.Size(x.StreamingConfig)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *StreamingTrainingRequest_AudioContent:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.AudioContent)))
		n += len(x.AudioContent)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*TrainingData)(nil), "sagittarius.training.v1.TrainingData")
	proto.RegisterType((*StreamingTrainingRequest)(nil), "sagittarius.training.v1.StreamingTrainingRequest")
}

func init() { proto.RegisterFile("training/v1/training.proto", fileDescriptor_b17551bd3250fbc4) }

var fileDescriptor_b17551bd3250fbc4 = []byte{
	// 546 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x53, 0xcd, 0x6a, 0xdb, 0x4c,
	0x14, 0xcd, 0xe4, 0xc7, 0x71, 0x6e, 0xec, 0xef, 0x6b, 0x26, 0xa5, 0x11, 0xa2, 0x3f, 0xc6, 0x25,
	0xe0, 0x74, 0x21, 0xe1, 0x74, 0xe7, 0x5d, 0xed, 0x52, 0x5c, 0xe8, 0xc2, 0x28, 0xa1, 0x8b, 0x52,
	0x30, 0xb7, 0xd2, 0x44, 0x19, 0x90, 0x67, 0x54, 0xe9, 0xca, 0x60, 0x42, 0x36, 0x7d, 0x85, 0x3c,
	0x40, 0x1f, 0xaa, 0xaf, 0xd0, 0x57, 0x28, 0x74, 0x53, 0x28, 0x9a, 0x91, 0xec, 0x84, 0xda, 0x3b,
	0xdd, 0x73, 0x34, 0x77, 0xee, 0x3d, 0xe7, 0x0c, 0xb8, 0x94, 0xa1, 0x54, 0x52, 0xc5, 0xfe, 0xbc,
	0xef, 0xd7, 0xdf, 0x5e, 0x9a, 0x69, 0xd2, 0xfc, 0x24, 0xc7, 0x58, 0x12, 0x61, 0x26, 0x8b, 0xdc,
	0x5b, 0x72, 0xf3, 0xbe, 0xfb, 0x34, 0xd6, 0x3a, 0x4e, 0x84, 0x8f, 0xa9, 0xf4, 0x51, 0x29, 0x4d,
	0x48, 0x52, 0xab, 0xdc, 0x1e, 0x73, 0x4f, 0x2a, 0x36, 0x4b, 0x43, 0x3f, 0x27, 0xa4, 0xa2, 0x26,
	0xce, 0x2a, 0x22, 0x4c, 0x74, 0x11, 0xf9, 0x79, 0x2a, 0x44, 0x78, 0x5d, 0x5e, 0x6b, 0xea, 0xa9,
	0xad, 0xed, 0xaf, 0xdd, 0xef, 0xdb, 0xd0, 0xba, 0xac, 0x6e, 0x7c, 0x8b, 0x84, 0xfc, 0x14, 0xfe,
	0x9b, 0x89, 0x48, 0xe2, 0x54, 0x46, 0x42, 0x91, 0xa4, 0x85, 0xc3, 0x3a, 0xac, 0x77, 0x10, 0xb4,
	0x0d, 0xfa, 0xbe, 0x02, 0xf9, 0x4b, 0x68, 0x27, 0xa8, 0xe2, 0x02, 0x63, 0x31, 0x0d, 0x75, 0x24,
	0x9c, 0x6d, 0xf3, 0x57, 0xab, 0x06, 0x47, 0x3a, 0x12, 0xfc, 0x09, 0x34, 0xae, 0x74, 0x36, 0x43,
	0x72, 0x76, 0x0d, 0x5b, 0x55, 0xfc, 0x05, 0x1c, 0xa6, 0x09, 0x2e, 0x44, 0x34, 0x25, 0x39, 0x13,
	0xce, 0x5e, 0x87, 0xf5, 0x58, 0x00, 0x16, 0xba, 0x94, 0x33, 0xc1, 0x9f, 0x01, 0x90, 0x26, 0x4c,
	0x2c, 0xdf, 0x30, 0xfc, 0x81, 0x41, 0x0c, 0xfd, 0x18, 0xf6, 0x22, 0x91, 0xe0, 0xc2, 0x69, 0x76,
	0x58, 0x6f, 0x27, 0xb0, 0x05, 0xef, 0xc3, 0x31, 0x65, 0xa8, 0xf2, 0x30, 0x93, 0x29, 0xad, 0xc6,
	0xdf, 0x29, 0xaf, 0x1e, 0x6f, 0x05, 0x7c, 0x45, 0x2e, 0xb7, 0x70, 0x61, 0x3f, 0xc5, 0x45, 0xa2,
	0x31, 0x72, 0xf6, 0x3b, 0xac, 0xd7, 0x1a, 0x6f, 0x05, 0x35, 0x30, 0x6c, 0xc0, 0x6e, 0x84, 0x84,
	0xdd, 0x5f, 0x0c, 0x9c, 0x0b, 0xca, 0x04, 0xce, 0xa4, 0x8a, 0x6b, 0xa9, 0x02, 0xf1, 0xb5, 0x10,
	0x39, 0xf1, 0x8f, 0xf0, 0x28, 0xaf, 0xb9, 0x69, 0xa8, 0xd5, 0x95, 0x8c, 0x8d, 0x5e, 0x87, 0xe7,
	0x67, 0x9e, 0x35, 0xc1, 0x33, 0xa2, 0x7b, 0x95, 0xe8, 0xf3, 0xbe, 0x17, 0x88, 0x50, 0xc7, 0x4a,
	0x96, 0x46, 0x8e, 0xcc, 0x81, 0xf1, 0x56, 0xf0, 0xff, 0xb2, 0x89, 0x85, 0xf8, 0x29, 0xb4, 0xb1,
	0x88, 0xa4, 0x2e, 0x7b, 0x92, 0x50, 0x64, 0xe4, 0x2d, 0xc7, 0x6b, 0x19, 0x78, 0x64, 0x51, 0xfe,
	0x1c, 0x60, 0xb5, 0x95, 0xdd, 0x34, 0xb8, 0x87, 0xac, 0x31, 0x73, 0x77, 0x8d, 0x99, 0xc3, 0x63,
	0x38, 0x5a, 0x6d, 0x91, 0xd9, 0xd5, 0xce, 0xff, 0x30, 0xd8, 0x37, 0xeb, 0xaa, 0x98, 0xdf, 0x31,
	0x68, 0x4e, 0x8a, 0xfc, 0xda, 0x26, 0xc4, 0xdb, 0x10, 0x57, 0xef, 0x7e, 0x90, 0x5c, 0x5e, 0x0b,
	0x90, 0xa5, 0xa1, 0x77, 0x61, 0xe2, 0xd9, 0xfd, 0xf0, 0xed, 0xc7, 0xcf, 0xbb, 0xed, 0x77, 0xdd,
	0x37, 0x65, 0x1a, 0xcd, 0x0c, 0xfe, 0xcd, 0xc3, 0x01, 0x6f, 0xfd, 0x3a, 0x41, 0xfe, 0xcd, 0x83,
	0x80, 0xdd, 0x2e, 0x1f, 0xcd, 0xa0, 0xb4, 0x65, 0xc0, 0x5e, 0xf1, 0xcf, 0x70, 0xf4, 0x8f, 0x31,
	0xbc, 0xbf, 0x71, 0xba, 0x4d, 0x26, 0xae, 0x9b, 0xb4, 0xc7, 0x86, 0x03, 0x70, 0x51, 0x6e, 0x6a,
	0x36, 0x6c, 0xd7, 0x4d, 0x26, 0xe5, 0x33, 0x9a, 0xb0, 0x4f, 0xcd, 0x9a, 0xfd, 0xcd, 0xd8, 0x97,
	0x86, 0x79, 0x5c, 0xaf, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x97, 0xb5, 0x1f, 0x1f, 0xf5, 0x03,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TrainngClient is the client API for Trainng service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TrainngClient interface {
	// Push accture traning data to server
	PushData(ctx context.Context, in *TrainingData, opts ...grpc.CallOption) (*status.Status, error)
	// Performs bidirectional streaming audio translation: receive results while
	// sending audio. This method is only available via the gRPC API (not REST).
	StreamingTraining(ctx context.Context, opts ...grpc.CallOption) (Trainng_StreamingTrainingClient, error)
}

type trainngClient struct {
	cc *grpc.ClientConn
}

func NewTrainngClient(cc *grpc.ClientConn) TrainngClient {
	return &trainngClient{cc}
}

func (c *trainngClient) PushData(ctx context.Context, in *TrainingData, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/sagittarius.training.v1.Trainng/PushData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainngClient) StreamingTraining(ctx context.Context, opts ...grpc.CallOption) (Trainng_StreamingTrainingClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Trainng_serviceDesc.Streams[0], "/sagittarius.training.v1.Trainng/StreamingTraining", opts...)
	if err != nil {
		return nil, err
	}
	x := &trainngStreamingTrainingClient{stream}
	return x, nil
}

type Trainng_StreamingTrainingClient interface {
	Send(*StreamingTrainingRequest) error
	CloseAndRecv() (*status.Status, error)
	grpc.ClientStream
}

type trainngStreamingTrainingClient struct {
	grpc.ClientStream
}

func (x *trainngStreamingTrainingClient) Send(m *StreamingTrainingRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *trainngStreamingTrainingClient) CloseAndRecv() (*status.Status, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(status.Status)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TrainngServer is the server API for Trainng service.
type TrainngServer interface {
	// Push accture traning data to server
	PushData(context.Context, *TrainingData) (*status.Status, error)
	// Performs bidirectional streaming audio translation: receive results while
	// sending audio. This method is only available via the gRPC API (not REST).
	StreamingTraining(Trainng_StreamingTrainingServer) error
}

func RegisterTrainngServer(s *grpc.Server, srv TrainngServer) {
	s.RegisterService(&_Trainng_serviceDesc, srv)
}

func _Trainng_PushData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrainingData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainngServer).PushData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sagittarius.training.v1.Trainng/PushData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainngServer).PushData(ctx, req.(*TrainingData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trainng_StreamingTraining_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TrainngServer).StreamingTraining(&trainngStreamingTrainingServer{stream})
}

type Trainng_StreamingTrainingServer interface {
	SendAndClose(*status.Status) error
	Recv() (*StreamingTrainingRequest, error)
	grpc.ServerStream
}

type trainngStreamingTrainingServer struct {
	grpc.ServerStream
}

func (x *trainngStreamingTrainingServer) SendAndClose(m *status.Status) error {
	return x.ServerStream.SendMsg(m)
}

func (x *trainngStreamingTrainingServer) Recv() (*StreamingTrainingRequest, error) {
	m := new(StreamingTrainingRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Trainng_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sagittarius.training.v1.Trainng",
	HandlerType: (*TrainngServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PushData",
			Handler:    _Trainng_PushData_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamingTraining",
			Handler:       _Trainng_StreamingTraining_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "training/v1/training.proto",
}
