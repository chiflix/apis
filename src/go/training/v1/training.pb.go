// Copyright 2018 Sagittarius LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.24.0-devel
// 	protoc        (unknown)
// source: training/v1/training.proto

package training

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	v1 "google.golang.org/genproto/googleapis/cloud/speech/v1"
	status "google.golang.org/genproto/googleapis/rpc/status"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status1 "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type TrainingData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the media identity
	MediaIdentity string `protobuf:"bytes,1,opt,name=media_identity,json=mediaIdentity,proto3" json:"media_identity,omitempty"`
	// the language code of the payload
	// ISO-639-1/bcp47 Code with tags
	// https://cloud.google.com/translate/docs/languages
	LanguageCode string `protobuf:"bytes,2,opt,name=language_code,json=languageCode,proto3" json:"language_code,omitempty"`
	// the format of the payload
	Format string `protobuf:"bytes,4,opt,name=format,proto3" json:"format,omitempty"`
	// how long does this transcript been played
	PlayedTime float64 `protobuf:"fixed64,5,opt,name=played_time,json=playedTime,proto3" json:"played_time,omitempty"`
	// how long of the entire video
	TotalTime float64 `protobuf:"fixed64,6,opt,name=total_time,json=totalTime,proto3" json:"total_time,omitempty"`
	// in ms, can be +/-
	Delay int64 `protobuf:"varint,8,opt,name=delay,proto3" json:"delay,omitempty"`
	// hints or keywords related to this media
	Hints string `protobuf:"bytes,9,opt,name=hints,proto3" json:"hints,omitempty"`
	// Types that are assignable to Data:
	//	*TrainingData_TranscriptIdentity
	//	*TrainingData_Payload
	Data isTrainingData_Data `protobuf_oneof:"data"`
}

func (x *TrainingData) Reset() {
	*x = TrainingData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_training_v1_training_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrainingData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrainingData) ProtoMessage() {}

func (x *TrainingData) ProtoReflect() protoreflect.Message {
	mi := &file_training_v1_training_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrainingData.ProtoReflect.Descriptor instead.
func (*TrainingData) Descriptor() ([]byte, []int) {
	return file_training_v1_training_proto_rawDescGZIP(), []int{0}
}

func (x *TrainingData) GetMediaIdentity() string {
	if x != nil {
		return x.MediaIdentity
	}
	return ""
}

func (x *TrainingData) GetLanguageCode() string {
	if x != nil {
		return x.LanguageCode
	}
	return ""
}

func (x *TrainingData) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *TrainingData) GetPlayedTime() float64 {
	if x != nil {
		return x.PlayedTime
	}
	return 0
}

func (x *TrainingData) GetTotalTime() float64 {
	if x != nil {
		return x.TotalTime
	}
	return 0
}

func (x *TrainingData) GetDelay() int64 {
	if x != nil {
		return x.Delay
	}
	return 0
}

func (x *TrainingData) GetHints() string {
	if x != nil {
		return x.Hints
	}
	return ""
}

func (m *TrainingData) GetData() isTrainingData_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *TrainingData) GetTranscriptIdentity() string {
	if x, ok := x.GetData().(*TrainingData_TranscriptIdentity); ok {
		return x.TranscriptIdentity
	}
	return ""
}

func (x *TrainingData) GetPayload() []byte {
	if x, ok := x.GetData().(*TrainingData_Payload); ok {
		return x.Payload
	}
	return nil
}

type isTrainingData_Data interface {
	isTrainingData_Data()
}

type TrainingData_TranscriptIdentity struct {
	// transcript identity if any
	TranscriptIdentity string `protobuf:"bytes,3,opt,name=transcript_identity,json=transcriptIdentity,proto3,oneof"`
}

type TrainingData_Payload struct {
	// the transcripts payload
	Payload []byte `protobuf:"bytes,7,opt,name=payload,proto3,oneof"`
}

func (*TrainingData_TranscriptIdentity) isTrainingData_Data() {}

func (*TrainingData_Payload) isTrainingData_Data() {}

// TODO:
type StreamingTrainingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The streaming request, which is either a streaming config or audio content.
	//
	// Types that are assignable to StreamingRequest:
	//	*StreamingTrainingRequest_StreamingConfig
	//	*StreamingTrainingRequest_AudioContent
	StreamingRequest isStreamingTrainingRequest_StreamingRequest `protobuf_oneof:"streaming_request"`
	Transcript       string                                      `protobuf:"bytes,3,opt,name=transcript,proto3" json:"transcript,omitempty"`
	// the media identity
	MediaIdentity string `protobuf:"bytes,4,opt,name=media_identity,json=mediaIdentity,proto3" json:"media_identity,omitempty"`
}

func (x *StreamingTrainingRequest) Reset() {
	*x = StreamingTrainingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_training_v1_training_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingTrainingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingTrainingRequest) ProtoMessage() {}

func (x *StreamingTrainingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_training_v1_training_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingTrainingRequest.ProtoReflect.Descriptor instead.
func (*StreamingTrainingRequest) Descriptor() ([]byte, []int) {
	return file_training_v1_training_proto_rawDescGZIP(), []int{1}
}

func (m *StreamingTrainingRequest) GetStreamingRequest() isStreamingTrainingRequest_StreamingRequest {
	if m != nil {
		return m.StreamingRequest
	}
	return nil
}

func (x *StreamingTrainingRequest) GetStreamingConfig() *v1.RecognitionConfig {
	if x, ok := x.GetStreamingRequest().(*StreamingTrainingRequest_StreamingConfig); ok {
		return x.StreamingConfig
	}
	return nil
}

func (x *StreamingTrainingRequest) GetAudioContent() []byte {
	if x, ok := x.GetStreamingRequest().(*StreamingTrainingRequest_AudioContent); ok {
		return x.AudioContent
	}
	return nil
}

func (x *StreamingTrainingRequest) GetTranscript() string {
	if x != nil {
		return x.Transcript
	}
	return ""
}

func (x *StreamingTrainingRequest) GetMediaIdentity() string {
	if x != nil {
		return x.MediaIdentity
	}
	return ""
}

type isStreamingTrainingRequest_StreamingRequest interface {
	isStreamingTrainingRequest_StreamingRequest()
}

type StreamingTrainingRequest_StreamingConfig struct {
	// Provides information to the recognizer that specifies how to process the
	// request. The first `StreamingTranslationRequest` message must contain a
	// `streaming_config`  message.
	StreamingConfig *v1.RecognitionConfig `protobuf:"bytes,1,opt,name=streaming_config,json=streamingConfig,proto3,oneof"`
}

type StreamingTrainingRequest_AudioContent struct {
	// The audio data to be trained. Sequential chunks of audio data are sent
	// in sequential `StreamingTranslationRequest` messages. The first
	// `StreamingTranslationRequest` message must not contain `audio_content` data
	// and all subsequent `StreamingTranslationRequest` messages must contain
	// `audio_content` data. The audio bytes must be encoded as specified in
	// `RecognitionConfig`. Note: as with all bytes fields, protobuffers use a
	// pure binary representation (not base64). See
	// [audio limits](https://cloud.google.com/speech/limits#content).
	AudioContent []byte `protobuf:"bytes,2,opt,name=audio_content,json=audioContent,proto3,oneof"`
}

func (*StreamingTrainingRequest_StreamingConfig) isStreamingTrainingRequest_StreamingRequest() {}

func (*StreamingTrainingRequest_AudioContent) isStreamingTrainingRequest_StreamingRequest() {}

var File_training_v1_training_proto protoreflect.FileDescriptor

var file_training_v1_training_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x73, 0x61,
	0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x69, 0x75, 0x73, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x72, 0x70, 0x63, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x73, 0x70, 0x65, 0x65, 0x63,
	0x68, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x63,
	0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb5, 0x02, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x23, 0x0a, 0x0d, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x64, 0x65, 0x6c,
	0x61, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x68, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x68, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0xf5, 0x01, 0x0a, 0x18, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x10,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x25, 0x0a, 0x0d, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0c, 0x61,
	0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x42, 0x13, 0x0a, 0x11, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x32, 0xfd, 0x01, 0x0a, 0x07, 0x54, 0x72, 0x61, 0x69,
	0x6e, 0x6e, 0x67, 0x12, 0x93, 0x01, 0x0a, 0x08, 0x50, 0x75, 0x73, 0x68, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x25, 0x2e, 0x73, 0x61, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x69, 0x75, 0x73, 0x2e, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x4c, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x46, 0x22, 0x41, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2f, 0x7b,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x7d, 0x2f,
	0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x2f, 0x7b, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x7d, 0x2f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x3a, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x01, 0x2a, 0x12, 0x5c, 0x0a, 0x11, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x31,
	0x2e, 0x73, 0x61, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x69, 0x75, 0x73, 0x2e, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69,
	0x6e, 0x67, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x28, 0x01, 0x42, 0x3a, 0x0a, 0x1a, 0x61, 0x69, 0x2e, 0x73, 0x61,
	0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x69, 0x75, 0x73, 0x2e, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x31, 0x42, 0x0d, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x08, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0xf8, 0x01, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_training_v1_training_proto_rawDescOnce sync.Once
	file_training_v1_training_proto_rawDescData = file_training_v1_training_proto_rawDesc
)

func file_training_v1_training_proto_rawDescGZIP() []byte {
	file_training_v1_training_proto_rawDescOnce.Do(func() {
		file_training_v1_training_proto_rawDescData = protoimpl.X.CompressGZIP(file_training_v1_training_proto_rawDescData)
	})
	return file_training_v1_training_proto_rawDescData
}

var file_training_v1_training_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_training_v1_training_proto_goTypes = []interface{}{
	(*TrainingData)(nil),             // 0: sagittarius.training.v1.TrainingData
	(*StreamingTrainingRequest)(nil), // 1: sagittarius.training.v1.StreamingTrainingRequest
	(*v1.RecognitionConfig)(nil),     // 2: google.cloud.speech.v1.RecognitionConfig
	(*status.Status)(nil),            // 3: google.rpc.Status
}
var file_training_v1_training_proto_depIdxs = []int32{
	2, // 0: sagittarius.training.v1.StreamingTrainingRequest.streaming_config:type_name -> google.cloud.speech.v1.RecognitionConfig
	0, // 1: sagittarius.training.v1.Trainng.PushData:input_type -> sagittarius.training.v1.TrainingData
	1, // 2: sagittarius.training.v1.Trainng.StreamingTraining:input_type -> sagittarius.training.v1.StreamingTrainingRequest
	3, // 3: sagittarius.training.v1.Trainng.PushData:output_type -> google.rpc.Status
	3, // 4: sagittarius.training.v1.Trainng.StreamingTraining:output_type -> google.rpc.Status
	3, // [3:5] is the sub-list for method output_type
	1, // [1:3] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_training_v1_training_proto_init() }
func file_training_v1_training_proto_init() {
	if File_training_v1_training_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_training_v1_training_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrainingData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_training_v1_training_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingTrainingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_training_v1_training_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*TrainingData_TranscriptIdentity)(nil),
		(*TrainingData_Payload)(nil),
	}
	file_training_v1_training_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*StreamingTrainingRequest_StreamingConfig)(nil),
		(*StreamingTrainingRequest_AudioContent)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_training_v1_training_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_training_v1_training_proto_goTypes,
		DependencyIndexes: file_training_v1_training_proto_depIdxs,
		MessageInfos:      file_training_v1_training_proto_msgTypes,
	}.Build()
	File_training_v1_training_proto = out.File
	file_training_v1_training_proto_rawDesc = nil
	file_training_v1_training_proto_goTypes = nil
	file_training_v1_training_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TrainngClient is the client API for Trainng service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TrainngClient interface {
	// Push accture traning data to server
	PushData(ctx context.Context, in *TrainingData, opts ...grpc.CallOption) (*status.Status, error)
	// Performs bidirectional streaming audio translation: receive results while
	// sending audio. This method is only available via the gRPC API (not REST).
	StreamingTraining(ctx context.Context, opts ...grpc.CallOption) (Trainng_StreamingTrainingClient, error)
}

type trainngClient struct {
	cc grpc.ClientConnInterface
}

func NewTrainngClient(cc grpc.ClientConnInterface) TrainngClient {
	return &trainngClient{cc}
}

func (c *trainngClient) PushData(ctx context.Context, in *TrainingData, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/sagittarius.training.v1.Trainng/PushData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trainngClient) StreamingTraining(ctx context.Context, opts ...grpc.CallOption) (Trainng_StreamingTrainingClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Trainng_serviceDesc.Streams[0], "/sagittarius.training.v1.Trainng/StreamingTraining", opts...)
	if err != nil {
		return nil, err
	}
	x := &trainngStreamingTrainingClient{stream}
	return x, nil
}

type Trainng_StreamingTrainingClient interface {
	Send(*StreamingTrainingRequest) error
	CloseAndRecv() (*status.Status, error)
	grpc.ClientStream
}

type trainngStreamingTrainingClient struct {
	grpc.ClientStream
}

func (x *trainngStreamingTrainingClient) Send(m *StreamingTrainingRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *trainngStreamingTrainingClient) CloseAndRecv() (*status.Status, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(status.Status)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TrainngServer is the server API for Trainng service.
type TrainngServer interface {
	// Push accture traning data to server
	PushData(context.Context, *TrainingData) (*status.Status, error)
	// Performs bidirectional streaming audio translation: receive results while
	// sending audio. This method is only available via the gRPC API (not REST).
	StreamingTraining(Trainng_StreamingTrainingServer) error
}

// UnimplementedTrainngServer can be embedded to have forward compatible implementations.
type UnimplementedTrainngServer struct {
}

func (*UnimplementedTrainngServer) PushData(context.Context, *TrainingData) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PushData not implemented")
}
func (*UnimplementedTrainngServer) StreamingTraining(Trainng_StreamingTrainingServer) error {
	return status1.Errorf(codes.Unimplemented, "method StreamingTraining not implemented")
}

func RegisterTrainngServer(s *grpc.Server, srv TrainngServer) {
	s.RegisterService(&_Trainng_serviceDesc, srv)
}

func _Trainng_PushData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrainingData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrainngServer).PushData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sagittarius.training.v1.Trainng/PushData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrainngServer).PushData(ctx, req.(*TrainingData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Trainng_StreamingTraining_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TrainngServer).StreamingTraining(&trainngStreamingTrainingServer{stream})
}

type Trainng_StreamingTrainingServer interface {
	SendAndClose(*status.Status) error
	Recv() (*StreamingTrainingRequest, error)
	grpc.ServerStream
}

type trainngStreamingTrainingServer struct {
	grpc.ServerStream
}

func (x *trainngStreamingTrainingServer) SendAndClose(m *status.Status) error {
	return x.ServerStream.SendMsg(m)
}

func (x *trainngStreamingTrainingServer) Recv() (*StreamingTrainingRequest, error) {
	m := new(StreamingTrainingRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Trainng_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sagittarius.training.v1.Trainng",
	HandlerType: (*TrainngServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PushData",
			Handler:    _Trainng_PushData_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamingTraining",
			Handler:       _Trainng_StreamingTraining_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "training/v1/training.proto",
}
