// Copyright 2018 Sagittarius LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.24.0-devel
// 	protoc        (unknown)
// source: media/v1/media.proto

package media

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	status "google.golang.org/genproto/googleapis/rpc/status"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status1 "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Info_TrackInfo_Type int32

const (
	Info_TrackInfo_VIDEO Info_TrackInfo_Type = 0
	Info_TrackInfo_AUDIO Info_TrackInfo_Type = 1
	Info_TrackInfo_TEXT  Info_TrackInfo_Type = 2
	Info_TrackInfo_OTHER Info_TrackInfo_Type = 3
)

// Enum value maps for Info_TrackInfo_Type.
var (
	Info_TrackInfo_Type_name = map[int32]string{
		0: "VIDEO",
		1: "AUDIO",
		2: "TEXT",
		3: "OTHER",
	}
	Info_TrackInfo_Type_value = map[string]int32{
		"VIDEO": 0,
		"AUDIO": 1,
		"TEXT":  2,
		"OTHER": 3,
	}
)

func (x Info_TrackInfo_Type) Enum() *Info_TrackInfo_Type {
	p := new(Info_TrackInfo_Type)
	*p = x
	return p
}

func (x Info_TrackInfo_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Info_TrackInfo_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_media_v1_media_proto_enumTypes[0].Descriptor()
}

func (Info_TrackInfo_Type) Type() protoreflect.EnumType {
	return &file_media_v1_media_proto_enumTypes[0]
}

func (x Info_TrackInfo_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Info_TrackInfo_Type.Descriptor instead.
func (Info_TrackInfo_Type) EnumDescriptor() ([]byte, []int) {
	return file_media_v1_media_proto_rawDescGZIP(), []int{0, 0, 0}
}

type Info struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resource id of the media. It must have the format of "media/*/info".
	// For example: "media/1111-2222-3333-4444/info".
	MediaHash string            `protobuf:"bytes,1,opt,name=media_hash,json=mediaHash,proto3" json:"media_hash,omitempty"`
	Tracks    []*Info_TrackInfo `protobuf:"bytes,2,rep,name=tracks,proto3" json:"tracks,omitempty"`
}

func (x *Info) Reset() {
	*x = Info{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_v1_media_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Info) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Info) ProtoMessage() {}

func (x *Info) ProtoReflect() protoreflect.Message {
	mi := &file_media_v1_media_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Info.ProtoReflect.Descriptor instead.
func (*Info) Descriptor() ([]byte, []int) {
	return file_media_v1_media_proto_rawDescGZIP(), []int{0}
}

func (x *Info) GetMediaHash() string {
	if x != nil {
		return x.MediaHash
	}
	return ""
}

func (x *Info) GetTracks() []*Info_TrackInfo {
	if x != nil {
		return x.Tracks
	}
	return nil
}

// retrieve media info like sound track resolutions, length/duringation etc.
type GetInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// quick hash of the media. For example: "media/1111-2222-3333-4444/info".
	MediaHash string `protobuf:"bytes,1,opt,name=media_hash,json=mediaHash,proto3" json:"media_hash,omitempty"`
}

func (x *GetInfoRequest) Reset() {
	*x = GetInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_v1_media_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInfoRequest) ProtoMessage() {}

func (x *GetInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_media_v1_media_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInfoRequest.ProtoReflect.Descriptor instead.
func (*GetInfoRequest) Descriptor() ([]byte, []int) {
	return file_media_v1_media_proto_rawDescGZIP(), []int{1}
}

func (x *GetInfoRequest) GetMediaHash() string {
	if x != nil {
		return x.MediaHash
	}
	return ""
}

// try to update media info
type UpdateInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// quick hash of the media. For example: "media/1111-2222-3333-4444/info".
	MediaHash string `protobuf:"bytes,1,opt,name=media_hash,json=mediaHash,proto3" json:"media_hash,omitempty"`
	// the media info to be updated
	Info *Info `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *UpdateInfoRequest) Reset() {
	*x = UpdateInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_v1_media_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInfoRequest) ProtoMessage() {}

func (x *UpdateInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_media_v1_media_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInfoRequest.ProtoReflect.Descriptor instead.
func (*UpdateInfoRequest) Descriptor() ([]byte, []int) {
	return file_media_v1_media_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateInfoRequest) GetMediaHash() string {
	if x != nil {
		return x.MediaHash
	}
	return ""
}

func (x *UpdateInfoRequest) GetInfo() *Info {
	if x != nil {
		return x.Info
	}
	return nil
}

// try to retrieve Thumbnails
type ThumbnailTimeRangesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// use quick media hash to get thumbnails
	MediaHash string `protobuf:"bytes,1,opt,name=media_hash,json=mediaHash,proto3" json:"media_hash,omitempty"`
	// time length of the  media resource, in seconds
	MediaLength float64 `protobuf:"fixed64,2,opt,name=media_length,json=mediaLength,proto3" json:"media_length,omitempty"`
}

func (x *ThumbnailTimeRangesRequest) Reset() {
	*x = ThumbnailTimeRangesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_v1_media_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThumbnailTimeRangesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThumbnailTimeRangesRequest) ProtoMessage() {}

func (x *ThumbnailTimeRangesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_media_v1_media_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThumbnailTimeRangesRequest.ProtoReflect.Descriptor instead.
func (*ThumbnailTimeRangesRequest) Descriptor() ([]byte, []int) {
	return file_media_v1_media_proto_rawDescGZIP(), []int{3}
}

func (x *ThumbnailTimeRangesRequest) GetMediaHash() string {
	if x != nil {
		return x.MediaHash
	}
	return ""
}

func (x *ThumbnailTimeRangesRequest) GetMediaLength() float64 {
	if x != nil {
		return x.MediaLength
	}
	return 0
}

// time range is used to tell the client the screenshot range
type TimeRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the beginning of the time range, in seconds
	Begin float64 `protobuf:"fixed64,1,opt,name=begin,proto3" json:"begin,omitempty"`
	// the end of the time range, in seconds
	End float64 `protobuf:"fixed64,2,opt,name=end,proto3" json:"end,omitempty"`
	// time interval between each thumbnails, in seconds
	Interval float64 `protobuf:"fixed64,3,opt,name=interval,proto3" json:"interval,omitempty"`
}

func (x *TimeRange) Reset() {
	*x = TimeRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_v1_media_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeRange) ProtoMessage() {}

func (x *TimeRange) ProtoReflect() protoreflect.Message {
	mi := &file_media_v1_media_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeRange.ProtoReflect.Descriptor instead.
func (*TimeRange) Descriptor() ([]byte, []int) {
	return file_media_v1_media_proto_rawDescGZIP(), []int{4}
}

func (x *TimeRange) GetBegin() float64 {
	if x != nil {
		return x.Begin
	}
	return 0
}

func (x *TimeRange) GetEnd() float64 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *TimeRange) GetInterval() float64 {
	if x != nil {
		return x.Interval
	}
	return 0
}

type ThumbnailTimeRangesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error *status.Status `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	// time range is used to tell the client the screenshot range
	MediaHash string `protobuf:"bytes,2,opt,name=media_hash,json=mediaHash,proto3" json:"media_hash,omitempty"`
	// thumbnails that the server have, in time ranges
	Availables []*TimeRange `protobuf:"bytes,3,rep,name=availables,proto3" json:"availables,omitempty"`
	// thumbnails that the server is missing and wanted, in time ranges
	Missings []*TimeRange `protobuf:"bytes,4,rep,name=missings,proto3" json:"missings,omitempty"`
	// access token for read and/or write thumbnail by timestamp
	// session_token will not have write premission if there is not missing
	Token string `protobuf:"bytes,5,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *ThumbnailTimeRangesResponse) Reset() {
	*x = ThumbnailTimeRangesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_v1_media_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThumbnailTimeRangesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThumbnailTimeRangesResponse) ProtoMessage() {}

func (x *ThumbnailTimeRangesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_media_v1_media_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThumbnailTimeRangesResponse.ProtoReflect.Descriptor instead.
func (*ThumbnailTimeRangesResponse) Descriptor() ([]byte, []int) {
	return file_media_v1_media_proto_rawDescGZIP(), []int{5}
}

func (x *ThumbnailTimeRangesResponse) GetError() *status.Status {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ThumbnailTimeRangesResponse) GetMediaHash() string {
	if x != nil {
		return x.MediaHash
	}
	return ""
}

func (x *ThumbnailTimeRangesResponse) GetAvailables() []*TimeRange {
	if x != nil {
		return x.Availables
	}
	return nil
}

func (x *ThumbnailTimeRangesResponse) GetMissings() []*TimeRange {
	if x != nil {
		return x.Missings
	}
	return nil
}

func (x *ThumbnailTimeRangesResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type ThumbnailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MediaHash string `protobuf:"bytes,1,opt,name=media_hash,json=mediaHash,proto3" json:"media_hash,omitempty"`
	// which thumbnail the client wants
	//
	// Types that are assignable to Time:
	//	*ThumbnailRequest_Range
	//	*ThumbnailRequest_Timestamp
	Time isThumbnailRequest_Time `protobuf_oneof:"time"`
	// access token for read and write thumbnail by timestamp
	Token string `protobuf:"bytes,4,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *ThumbnailRequest) Reset() {
	*x = ThumbnailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_v1_media_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThumbnailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThumbnailRequest) ProtoMessage() {}

func (x *ThumbnailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_media_v1_media_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThumbnailRequest.ProtoReflect.Descriptor instead.
func (*ThumbnailRequest) Descriptor() ([]byte, []int) {
	return file_media_v1_media_proto_rawDescGZIP(), []int{6}
}

func (x *ThumbnailRequest) GetMediaHash() string {
	if x != nil {
		return x.MediaHash
	}
	return ""
}

func (m *ThumbnailRequest) GetTime() isThumbnailRequest_Time {
	if m != nil {
		return m.Time
	}
	return nil
}

func (x *ThumbnailRequest) GetRange() *TimeRange {
	if x, ok := x.GetTime().(*ThumbnailRequest_Range); ok {
		return x.Range
	}
	return nil
}

func (x *ThumbnailRequest) GetTimestamp() float64 {
	if x, ok := x.GetTime().(*ThumbnailRequest_Timestamp); ok {
		return x.Timestamp
	}
	return 0
}

func (x *ThumbnailRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type isThumbnailRequest_Time interface {
	isThumbnailRequest_Time()
}

type ThumbnailRequest_Range struct {
	Range *TimeRange `protobuf:"bytes,2,opt,name=range,proto3,oneof"`
}

type ThumbnailRequest_Timestamp struct {
	Timestamp float64 `protobuf:"fixed64,3,opt,name=timestamp,proto3,oneof"`
}

func (*ThumbnailRequest_Range) isThumbnailRequest_Time() {}

func (*ThumbnailRequest_Timestamp) isThumbnailRequest_Time() {}

type Thumbnail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// timestamp of this thumbnail in relative to the begginning of the media_hash
	Timestamp float64 `protobuf:"fixed64,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// image's file extension
	Ext string `protobuf:"bytes,2,opt,name=ext,proto3" json:"ext,omitempty"`
	// image's binary content
	Payload []byte `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *Thumbnail) Reset() {
	*x = Thumbnail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_v1_media_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Thumbnail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Thumbnail) ProtoMessage() {}

func (x *Thumbnail) ProtoReflect() protoreflect.Message {
	mi := &file_media_v1_media_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Thumbnail.ProtoReflect.Descriptor instead.
func (*Thumbnail) Descriptor() ([]byte, []int) {
	return file_media_v1_media_proto_rawDescGZIP(), []int{7}
}

func (x *Thumbnail) GetTimestamp() float64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Thumbnail) GetExt() string {
	if x != nil {
		return x.Ext
	}
	return ""
}

func (x *Thumbnail) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type ThumbnailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error *status.Status `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	// thumbnails. with timestamp, extension, and payload
	Thumbnails []*Thumbnail `protobuf:"bytes,2,rep,name=thumbnails,proto3" json:"thumbnails,omitempty"`
}

func (x *ThumbnailResponse) Reset() {
	*x = ThumbnailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_v1_media_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThumbnailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThumbnailResponse) ProtoMessage() {}

func (x *ThumbnailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_media_v1_media_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThumbnailResponse.ProtoReflect.Descriptor instead.
func (*ThumbnailResponse) Descriptor() ([]byte, []int) {
	return file_media_v1_media_proto_rawDescGZIP(), []int{8}
}

func (x *ThumbnailResponse) GetError() *status.Status {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ThumbnailResponse) GetThumbnails() []*Thumbnail {
	if x != nil {
		return x.Thumbnails
	}
	return nil
}

type UpdateThumbnailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MediaHash string `protobuf:"bytes,1,opt,name=media_hash,json=mediaHash,proto3" json:"media_hash,omitempty"`
	// the thumbnails to be updated
	Thumbnails []*Thumbnail `protobuf:"bytes,2,rep,name=thumbnails,proto3" json:"thumbnails,omitempty"`
	// access token for read and write thumbnail by timestamp
	Token string `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *UpdateThumbnailRequest) Reset() {
	*x = UpdateThumbnailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_v1_media_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateThumbnailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateThumbnailRequest) ProtoMessage() {}

func (x *UpdateThumbnailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_media_v1_media_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateThumbnailRequest.ProtoReflect.Descriptor instead.
func (*UpdateThumbnailRequest) Descriptor() ([]byte, []int) {
	return file_media_v1_media_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateThumbnailRequest) GetMediaHash() string {
	if x != nil {
		return x.MediaHash
	}
	return ""
}

func (x *UpdateThumbnailRequest) GetThumbnails() []*Thumbnail {
	if x != nil {
		return x.Thumbnails
	}
	return nil
}

func (x *UpdateThumbnailRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type Info_TrackInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Types Info_TrackInfo_Type `protobuf:"varint,1,opt,name=types,proto3,enum=sagittarius.media.v1.Info_TrackInfo_Type" json:"types,omitempty"`
}

func (x *Info_TrackInfo) Reset() {
	*x = Info_TrackInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_v1_media_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Info_TrackInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Info_TrackInfo) ProtoMessage() {}

func (x *Info_TrackInfo) ProtoReflect() protoreflect.Message {
	mi := &file_media_v1_media_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Info_TrackInfo.ProtoReflect.Descriptor instead.
func (*Info_TrackInfo) Descriptor() ([]byte, []int) {
	return file_media_v1_media_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Info_TrackInfo) GetTypes() Info_TrackInfo_Type {
	if x != nil {
		return x.Types
	}
	return Info_TrackInfo_VIDEO
}

var File_media_v1_media_proto protoreflect.FileDescriptor

var file_media_v1_media_proto_rawDesc = []byte{
	0x0a, 0x14, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x73, 0x61, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72,
	0x69, 0x75, 0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xe4, 0x01, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x48, 0x61, 0x73, 0x68, 0x12, 0x3c, 0x0a, 0x06, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x61,
	0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x69, 0x75, 0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x06, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x1a, 0x7f, 0x0a, 0x09, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3f, 0x0a, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x73, 0x61, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72,
	0x69, 0x75, 0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x22, 0x31, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x09, 0x0a, 0x05, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x55,
	0x44, 0x49, 0x4f, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x45, 0x58, 0x54, 0x10, 0x02, 0x12,
	0x09, 0x0a, 0x05, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x03, 0x22, 0x2f, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x48, 0x61, 0x73, 0x68, 0x22, 0x62, 0x0a, 0x11, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x2e, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x73, 0x61, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x69, 0x75, 0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22,
	0x5e, 0x0a, 0x1a, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x48, 0x61, 0x73, 0x68, 0x12, 0x21, 0x0a, 0x0c,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0b, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22,
	0x4f, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x62, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x62, 0x65, 0x67,
	0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x03, 0x65, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x22, 0xfa, 0x01, 0x0a, 0x1b, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x28, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x48, 0x61, 0x73, 0x68, 0x12, 0x3f, 0x0a, 0x0a, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x73, 0x61, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x69, 0x75, 0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0a,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x08, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73,
	0x61, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x69, 0x75, 0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x08, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xa8, 0x01,
	0x0a, 0x10, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x37, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x73, 0x61, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x69, 0x75, 0x73, 0x2e, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x42, 0x06, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x55, 0x0a, 0x09, 0x54, 0x68, 0x75, 0x6d,
	0x62, 0x6e, 0x61, 0x69, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x65, 0x78, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22,
	0x7e, 0x0a, 0x11, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3f,
	0x0a, 0x0a, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x61, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x69, 0x75, 0x73,
	0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e,
	0x61, 0x69, 0x6c, 0x52, 0x0a, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x73, 0x22,
	0x8e, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x48, 0x61, 0x73, 0x68, 0x12, 0x3f, 0x0a, 0x0a, 0x74, 0x68, 0x75,
	0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x73, 0x61, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x69, 0x75, 0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x52, 0x0a,
	0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x32, 0xca, 0x05, 0x0a, 0x05, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x70, 0x0a, 0x07, 0x47, 0x65,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x2e, 0x73, 0x61, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72,
	0x69, 0x75, 0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x73, 0x61,
	0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x69, 0x75, 0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12,
	0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2f, 0x7b, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x7d, 0x2f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x80, 0x01, 0x0a,
	0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x27, 0x2e, 0x73, 0x61,
	0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x69, 0x75, 0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x73, 0x61, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x69,
	0x75, 0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x22, 0x22, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x2f, 0x7b, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x7d,
	0x2f, 0x69, 0x6e, 0x66, 0x6f, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x12,
	0xb2, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c,
	0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x30, 0x2e, 0x73, 0x61, 0x67,
	0x69, 0x74, 0x74, 0x61, 0x72, 0x69, 0x75, 0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x73,
	0x61, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x69, 0x75, 0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x54, 0x69, 0x6d,
	0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x12, 0x2b, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x2f, 0x7b, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x7d, 0x2f,
	0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x12, 0x8c, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x54, 0x68, 0x75, 0x6d,
	0x62, 0x6e, 0x61, 0x69, 0x6c, 0x12, 0x26, 0x2e, 0x73, 0x61, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72,
	0x69, 0x75, 0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x68, 0x75,
	0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e,
	0x73, 0x61, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x69, 0x75, 0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x22, 0x20,
	0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2f, 0x7b, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x7d, 0x2f, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c,
	0x3a, 0x01, 0x2a, 0x12, 0x87, 0x01, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x68,
	0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x12, 0x2c, 0x2e, 0x73, 0x61, 0x67, 0x69, 0x74, 0x74,
	0x61, 0x72, 0x69, 0x75, 0x73, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2c, 0x22, 0x27, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2f, 0x7b, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x7d, 0x2f, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x6e,
	0x61, 0x69, 0x6c, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x42, 0x31, 0x0a,
	0x17, 0x61, 0x69, 0x2e, 0x73, 0x61, 0x67, 0x69, 0x74, 0x74, 0x61, 0x72, 0x69, 0x75, 0x73, 0x2e,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x76, 0x31, 0x42, 0x0a, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0xf8, 0x01, 0x01,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_media_v1_media_proto_rawDescOnce sync.Once
	file_media_v1_media_proto_rawDescData = file_media_v1_media_proto_rawDesc
)

func file_media_v1_media_proto_rawDescGZIP() []byte {
	file_media_v1_media_proto_rawDescOnce.Do(func() {
		file_media_v1_media_proto_rawDescData = protoimpl.X.CompressGZIP(file_media_v1_media_proto_rawDescData)
	})
	return file_media_v1_media_proto_rawDescData
}

var file_media_v1_media_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_media_v1_media_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_media_v1_media_proto_goTypes = []interface{}{
	(Info_TrackInfo_Type)(0),            // 0: sagittarius.media.v1.Info.TrackInfo.Type
	(*Info)(nil),                        // 1: sagittarius.media.v1.Info
	(*GetInfoRequest)(nil),              // 2: sagittarius.media.v1.GetInfoRequest
	(*UpdateInfoRequest)(nil),           // 3: sagittarius.media.v1.UpdateInfoRequest
	(*ThumbnailTimeRangesRequest)(nil),  // 4: sagittarius.media.v1.ThumbnailTimeRangesRequest
	(*TimeRange)(nil),                   // 5: sagittarius.media.v1.TimeRange
	(*ThumbnailTimeRangesResponse)(nil), // 6: sagittarius.media.v1.ThumbnailTimeRangesResponse
	(*ThumbnailRequest)(nil),            // 7: sagittarius.media.v1.ThumbnailRequest
	(*Thumbnail)(nil),                   // 8: sagittarius.media.v1.Thumbnail
	(*ThumbnailResponse)(nil),           // 9: sagittarius.media.v1.ThumbnailResponse
	(*UpdateThumbnailRequest)(nil),      // 10: sagittarius.media.v1.UpdateThumbnailRequest
	(*Info_TrackInfo)(nil),              // 11: sagittarius.media.v1.Info.TrackInfo
	(*status.Status)(nil),               // 12: google.rpc.Status
}
var file_media_v1_media_proto_depIdxs = []int32{
	11, // 0: sagittarius.media.v1.Info.tracks:type_name -> sagittarius.media.v1.Info.TrackInfo
	1,  // 1: sagittarius.media.v1.UpdateInfoRequest.info:type_name -> sagittarius.media.v1.Info
	12, // 2: sagittarius.media.v1.ThumbnailTimeRangesResponse.error:type_name -> google.rpc.Status
	5,  // 3: sagittarius.media.v1.ThumbnailTimeRangesResponse.availables:type_name -> sagittarius.media.v1.TimeRange
	5,  // 4: sagittarius.media.v1.ThumbnailTimeRangesResponse.missings:type_name -> sagittarius.media.v1.TimeRange
	5,  // 5: sagittarius.media.v1.ThumbnailRequest.range:type_name -> sagittarius.media.v1.TimeRange
	12, // 6: sagittarius.media.v1.ThumbnailResponse.error:type_name -> google.rpc.Status
	8,  // 7: sagittarius.media.v1.ThumbnailResponse.thumbnails:type_name -> sagittarius.media.v1.Thumbnail
	8,  // 8: sagittarius.media.v1.UpdateThumbnailRequest.thumbnails:type_name -> sagittarius.media.v1.Thumbnail
	0,  // 9: sagittarius.media.v1.Info.TrackInfo.types:type_name -> sagittarius.media.v1.Info.TrackInfo.Type
	2,  // 10: sagittarius.media.v1.Media.GetInfo:input_type -> sagittarius.media.v1.GetInfoRequest
	3,  // 11: sagittarius.media.v1.Media.UpdateInfo:input_type -> sagittarius.media.v1.UpdateInfoRequest
	4,  // 12: sagittarius.media.v1.Media.GetThumbnailTimeRanges:input_type -> sagittarius.media.v1.ThumbnailTimeRangesRequest
	7,  // 13: sagittarius.media.v1.Media.GetThumbnail:input_type -> sagittarius.media.v1.ThumbnailRequest
	10, // 14: sagittarius.media.v1.Media.UpdateThumbnail:input_type -> sagittarius.media.v1.UpdateThumbnailRequest
	1,  // 15: sagittarius.media.v1.Media.GetInfo:output_type -> sagittarius.media.v1.Info
	1,  // 16: sagittarius.media.v1.Media.UpdateInfo:output_type -> sagittarius.media.v1.Info
	6,  // 17: sagittarius.media.v1.Media.GetThumbnailTimeRanges:output_type -> sagittarius.media.v1.ThumbnailTimeRangesResponse
	9,  // 18: sagittarius.media.v1.Media.GetThumbnail:output_type -> sagittarius.media.v1.ThumbnailResponse
	12, // 19: sagittarius.media.v1.Media.UpdateThumbnail:output_type -> google.rpc.Status
	15, // [15:20] is the sub-list for method output_type
	10, // [10:15] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_media_v1_media_proto_init() }
func file_media_v1_media_proto_init() {
	if File_media_v1_media_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_media_v1_media_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Info); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_v1_media_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_v1_media_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_v1_media_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThumbnailTimeRangesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_v1_media_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_v1_media_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThumbnailTimeRangesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_v1_media_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThumbnailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_v1_media_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Thumbnail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_v1_media_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThumbnailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_v1_media_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateThumbnailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_v1_media_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Info_TrackInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_media_v1_media_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*ThumbnailRequest_Range)(nil),
		(*ThumbnailRequest_Timestamp)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_media_v1_media_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_media_v1_media_proto_goTypes,
		DependencyIndexes: file_media_v1_media_proto_depIdxs,
		EnumInfos:         file_media_v1_media_proto_enumTypes,
		MessageInfos:      file_media_v1_media_proto_msgTypes,
	}.Build()
	File_media_v1_media_proto = out.File
	file_media_v1_media_proto_rawDesc = nil
	file_media_v1_media_proto_goTypes = nil
	file_media_v1_media_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MediaClient is the client API for Media service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MediaClient interface {
	//
	GetInfo(ctx context.Context, in *GetInfoRequest, opts ...grpc.CallOption) (*Info, error)
	//
	UpdateInfo(ctx context.Context, in *UpdateInfoRequest, opts ...grpc.CallOption) (*Info, error)
	// Query obtainable thumbnails time range and unavailable ones by media identity
	GetThumbnailTimeRanges(ctx context.Context, in *ThumbnailTimeRangesRequest, opts ...grpc.CallOption) (*ThumbnailTimeRangesResponse, error)
	// Get thumbnail by timestamps
	GetThumbnail(ctx context.Context, in *ThumbnailRequest, opts ...grpc.CallOption) (*ThumbnailResponse, error)
	// Update thumbnail by timestamps
	UpdateThumbnail(ctx context.Context, in *UpdateThumbnailRequest, opts ...grpc.CallOption) (*status.Status, error)
}

type mediaClient struct {
	cc grpc.ClientConnInterface
}

func NewMediaClient(cc grpc.ClientConnInterface) MediaClient {
	return &mediaClient{cc}
}

func (c *mediaClient) GetInfo(ctx context.Context, in *GetInfoRequest, opts ...grpc.CallOption) (*Info, error) {
	out := new(Info)
	err := c.cc.Invoke(ctx, "/sagittarius.media.v1.Media/GetInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaClient) UpdateInfo(ctx context.Context, in *UpdateInfoRequest, opts ...grpc.CallOption) (*Info, error) {
	out := new(Info)
	err := c.cc.Invoke(ctx, "/sagittarius.media.v1.Media/UpdateInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaClient) GetThumbnailTimeRanges(ctx context.Context, in *ThumbnailTimeRangesRequest, opts ...grpc.CallOption) (*ThumbnailTimeRangesResponse, error) {
	out := new(ThumbnailTimeRangesResponse)
	err := c.cc.Invoke(ctx, "/sagittarius.media.v1.Media/GetThumbnailTimeRanges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaClient) GetThumbnail(ctx context.Context, in *ThumbnailRequest, opts ...grpc.CallOption) (*ThumbnailResponse, error) {
	out := new(ThumbnailResponse)
	err := c.cc.Invoke(ctx, "/sagittarius.media.v1.Media/GetThumbnail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaClient) UpdateThumbnail(ctx context.Context, in *UpdateThumbnailRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/sagittarius.media.v1.Media/UpdateThumbnail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MediaServer is the server API for Media service.
type MediaServer interface {
	//
	GetInfo(context.Context, *GetInfoRequest) (*Info, error)
	//
	UpdateInfo(context.Context, *UpdateInfoRequest) (*Info, error)
	// Query obtainable thumbnails time range and unavailable ones by media identity
	GetThumbnailTimeRanges(context.Context, *ThumbnailTimeRangesRequest) (*ThumbnailTimeRangesResponse, error)
	// Get thumbnail by timestamps
	GetThumbnail(context.Context, *ThumbnailRequest) (*ThumbnailResponse, error)
	// Update thumbnail by timestamps
	UpdateThumbnail(context.Context, *UpdateThumbnailRequest) (*status.Status, error)
}

// UnimplementedMediaServer can be embedded to have forward compatible implementations.
type UnimplementedMediaServer struct {
}

func (*UnimplementedMediaServer) GetInfo(context.Context, *GetInfoRequest) (*Info, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetInfo not implemented")
}
func (*UnimplementedMediaServer) UpdateInfo(context.Context, *UpdateInfoRequest) (*Info, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method UpdateInfo not implemented")
}
func (*UnimplementedMediaServer) GetThumbnailTimeRanges(context.Context, *ThumbnailTimeRangesRequest) (*ThumbnailTimeRangesResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetThumbnailTimeRanges not implemented")
}
func (*UnimplementedMediaServer) GetThumbnail(context.Context, *ThumbnailRequest) (*ThumbnailResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetThumbnail not implemented")
}
func (*UnimplementedMediaServer) UpdateThumbnail(context.Context, *UpdateThumbnailRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method UpdateThumbnail not implemented")
}

func RegisterMediaServer(s *grpc.Server, srv MediaServer) {
	s.RegisterService(&_Media_serviceDesc, srv)
}

func _Media_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sagittarius.media.v1.Media/GetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServer).GetInfo(ctx, req.(*GetInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Media_UpdateInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServer).UpdateInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sagittarius.media.v1.Media/UpdateInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServer).UpdateInfo(ctx, req.(*UpdateInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Media_GetThumbnailTimeRanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThumbnailTimeRangesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServer).GetThumbnailTimeRanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sagittarius.media.v1.Media/GetThumbnailTimeRanges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServer).GetThumbnailTimeRanges(ctx, req.(*ThumbnailTimeRangesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Media_GetThumbnail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThumbnailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServer).GetThumbnail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sagittarius.media.v1.Media/GetThumbnail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServer).GetThumbnail(ctx, req.(*ThumbnailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Media_UpdateThumbnail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateThumbnailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaServer).UpdateThumbnail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sagittarius.media.v1.Media/UpdateThumbnail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaServer).UpdateThumbnail(ctx, req.(*UpdateThumbnailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Media_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sagittarius.media.v1.Media",
	HandlerType: (*MediaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInfo",
			Handler:    _Media_GetInfo_Handler,
		},
		{
			MethodName: "UpdateInfo",
			Handler:    _Media_UpdateInfo_Handler,
		},
		{
			MethodName: "GetThumbnailTimeRanges",
			Handler:    _Media_GetThumbnailTimeRanges_Handler,
		},
		{
			MethodName: "GetThumbnail",
			Handler:    _Media_GetThumbnail_Handler,
		},
		{
			MethodName: "UpdateThumbnail",
			Handler:    _Media_UpdateThumbnail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "media/v1/media.proto",
}
