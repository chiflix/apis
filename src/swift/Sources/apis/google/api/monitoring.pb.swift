// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/api/monitoring.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2018 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Monitoring configuration of the service.
///
/// The example below shows how to configure monitored resources and metrics
/// for monitoring. In the example, a monitored resource and two metrics are
/// defined. The `library.googleapis.com/book/returned_count` metric is sent
/// to both producer and consumer projects, whereas the
/// `library.googleapis.com/book/overdue_count` metric is only sent to the
/// consumer project.
///
///     monitored_resources:
///     - type: library.googleapis.com/branch
///       labels:
///       - key: /city
///         description: The city where the library branch is located in.
///       - key: /name
///         description: The name of the branch.
///     metrics:
///     - name: library.googleapis.com/book/returned_count
///       metric_kind: DELTA
///       value_type: INT64
///       labels:
///       - key: /customer_id
///     - name: library.googleapis.com/book/overdue_count
///       metric_kind: GAUGE
///       value_type: INT64
///       labels:
///       - key: /customer_id
///     monitoring:
///       producer_destinations:
///       - monitored_resource: library.googleapis.com/branch
///         metrics:
///         - library.googleapis.com/book/returned_count
///       consumer_destinations:
///       - monitored_resource: library.googleapis.com/branch
///         metrics:
///         - library.googleapis.com/book/returned_count
///         - library.googleapis.com/book/overdue_count
public struct Google_Api_Monitoring {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Monitoring configurations for sending metrics to the producer project.
  /// There can be multiple producer destinations, each one must have a
  /// different monitored resource type. A metric can be used in at most
  /// one producer destination.
  public var producerDestinations: [Google_Api_Monitoring.MonitoringDestination] = []

  /// Monitoring configurations for sending metrics to the consumer project.
  /// There can be multiple consumer destinations, each one must have a
  /// different monitored resource type. A metric can be used in at most
  /// one consumer destination.
  public var consumerDestinations: [Google_Api_Monitoring.MonitoringDestination] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Configuration of a specific monitoring destination (the producer project
  /// or the consumer project).
  public struct MonitoringDestination {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The monitored resource type. The type must be defined in
    /// [Service.monitored_resources][google.api.Service.monitored_resources] section.
    public var monitoredResource: String = String()

    /// Names of the metrics to report to this monitoring destination.
    /// Each name must be defined in [Service.metrics][google.api.Service.metrics] section.
    public var metrics: [String] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.api"

extension Google_Api_Monitoring: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Monitoring"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "producer_destinations"),
    2: .standard(proto: "consumer_destinations"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.producerDestinations)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.consumerDestinations)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.producerDestinations.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.producerDestinations, fieldNumber: 1)
    }
    if !self.consumerDestinations.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.consumerDestinations, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Api_Monitoring, rhs: Google_Api_Monitoring) -> Bool {
    if lhs.producerDestinations != rhs.producerDestinations {return false}
    if lhs.consumerDestinations != rhs.consumerDestinations {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Api_Monitoring.MonitoringDestination: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Api_Monitoring.protoMessageName + ".MonitoringDestination"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "monitored_resource"),
    2: .same(proto: "metrics"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.monitoredResource)
      case 2: try decoder.decodeRepeatedStringField(value: &self.metrics)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.monitoredResource.isEmpty {
      try visitor.visitSingularStringField(value: self.monitoredResource, fieldNumber: 1)
    }
    if !self.metrics.isEmpty {
      try visitor.visitRepeatedStringField(value: self.metrics, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Api_Monitoring.MonitoringDestination, rhs: Google_Api_Monitoring.MonitoringDestination) -> Bool {
    if lhs.monitoredResource != rhs.monitoredResource {return false}
    if lhs.metrics != rhs.metrics {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
