// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/api/config_change.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2018 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Classifies set of possible modifications to an object in the service
/// configuration.
public enum Google_Api_ChangeType: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// No value was provided.
  case unspecified // = 0

  /// The changed object exists in the 'new' service configuration, but not
  /// in the 'old' service configuration.
  case added // = 1

  /// The changed object exists in the 'old' service configuration, but not
  /// in the 'new' service configuration.
  case removed // = 2

  /// The changed object exists in both service configurations, but its value
  /// is different.
  case modified // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .added
    case 2: self = .removed
    case 3: self = .modified
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .added: return 1
    case .removed: return 2
    case .modified: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Google_Api_ChangeType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Api_ChangeType] = [
    .unspecified,
    .added,
    .removed,
    .modified,
  ]
}

#endif  // swift(>=4.2)

/// Output generated from semantically comparing two versions of a service
/// configuration.
///
/// Includes detailed information about a field that have changed with
/// applicable advice about potential consequences for the change, such as
/// backwards-incompatibility.
public struct Google_Api_ConfigChange {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Object hierarchy path to the change, with levels separated by a '.'
  /// character. For repeated fields, an applicable unique identifier field is
  /// used for the index (usually selector, name, or id). For maps, the term
  /// 'key' is used. If the field has no unique identifier, the numeric index
  /// is used.
  /// Examples:
  /// - visibility.rules[selector=="google.LibraryService.CreateBook"].restriction
  /// - quota.metric_rules[selector=="google"].metric_costs[key=="reads"].value
  /// - logging.producer_destinations[0]
  public var element: String = String()

  /// Value of the changed object in the old Service configuration,
  /// in JSON format. This field will not be populated if ChangeType == ADDED.
  public var oldValue: String = String()

  /// Value of the changed object in the new Service configuration,
  /// in JSON format. This field will not be populated if ChangeType == REMOVED.
  public var newValue: String = String()

  /// The type for this change, either ADDED, REMOVED, or MODIFIED.
  public var changeType: Google_Api_ChangeType = .unspecified

  /// Collection of advice provided for this change, useful for determining the
  /// possible impact of this change.
  public var advices: [Google_Api_Advice] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Generated advice about this change, used for providing more
/// information about how a change will affect the existing service.
public struct Google_Api_Advice {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Useful description for why this advice was applied and what actions should
  /// be taken to mitigate any implied risks.
  public var description_p: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.api"

extension Google_Api_ChangeType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "CHANGE_TYPE_UNSPECIFIED"),
    1: .same(proto: "ADDED"),
    2: .same(proto: "REMOVED"),
    3: .same(proto: "MODIFIED"),
  ]
}

extension Google_Api_ConfigChange: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ConfigChange"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "element"),
    2: .standard(proto: "old_value"),
    3: .standard(proto: "new_value"),
    4: .standard(proto: "change_type"),
    5: .same(proto: "advices"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.element)
      case 2: try decoder.decodeSingularStringField(value: &self.oldValue)
      case 3: try decoder.decodeSingularStringField(value: &self.newValue)
      case 4: try decoder.decodeSingularEnumField(value: &self.changeType)
      case 5: try decoder.decodeRepeatedMessageField(value: &self.advices)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.element.isEmpty {
      try visitor.visitSingularStringField(value: self.element, fieldNumber: 1)
    }
    if !self.oldValue.isEmpty {
      try visitor.visitSingularStringField(value: self.oldValue, fieldNumber: 2)
    }
    if !self.newValue.isEmpty {
      try visitor.visitSingularStringField(value: self.newValue, fieldNumber: 3)
    }
    if self.changeType != .unspecified {
      try visitor.visitSingularEnumField(value: self.changeType, fieldNumber: 4)
    }
    if !self.advices.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.advices, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Api_ConfigChange, rhs: Google_Api_ConfigChange) -> Bool {
    if lhs.element != rhs.element {return false}
    if lhs.oldValue != rhs.oldValue {return false}
    if lhs.newValue != rhs.newValue {return false}
    if lhs.changeType != rhs.changeType {return false}
    if lhs.advices != rhs.advices {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Api_Advice: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Advice"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "description"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 2: try decoder.decodeSingularStringField(value: &self.description_p)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Api_Advice, rhs: Google_Api_Advice) -> Bool {
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
