//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: google/longrunning/operations.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import GRPC
import NIO
import NIOHTTP1
import SwiftProtobuf


/// Usage: instantiate Google_Longrunning_OperationsServiceClient, then call methods of this protocol to make API calls.
public protocol Google_Longrunning_OperationsService {
  func listOperations(_ request: Google_Longrunning_ListOperationsRequest, callOptions: CallOptions?) -> UnaryCall<Google_Longrunning_ListOperationsRequest, Google_Longrunning_ListOperationsResponse>
  func getOperation(_ request: Google_Longrunning_GetOperationRequest, callOptions: CallOptions?) -> UnaryCall<Google_Longrunning_GetOperationRequest, Google_Longrunning_Operation>
  func deleteOperation(_ request: Google_Longrunning_DeleteOperationRequest, callOptions: CallOptions?) -> UnaryCall<Google_Longrunning_DeleteOperationRequest, SwiftProtobuf.Google_Protobuf_Empty>
  func cancelOperation(_ request: Google_Longrunning_CancelOperationRequest, callOptions: CallOptions?) -> UnaryCall<Google_Longrunning_CancelOperationRequest, SwiftProtobuf.Google_Protobuf_Empty>
}

public final class Google_Longrunning_OperationsServiceClient: GRPCClient, Google_Longrunning_OperationsService {
  public let connection: ClientConnection
  public var defaultCallOptions: CallOptions

  /// Creates a client for the google.longrunning.Operations service.
  ///
  /// - Parameters:
  ///   - connection: `ClientConnection` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(connection: ClientConnection, defaultCallOptions: CallOptions = CallOptions()) {
    self.connection = connection
    self.defaultCallOptions = defaultCallOptions
  }

  /// Asynchronous unary call to ListOperations.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListOperations.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listOperations(_ request: Google_Longrunning_ListOperationsRequest, callOptions: CallOptions? = nil) -> UnaryCall<Google_Longrunning_ListOperationsRequest, Google_Longrunning_ListOperationsResponse> {
    return self.makeUnaryCall(path: "/google.longrunning.Operations/ListOperations",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to GetOperation.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetOperation.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func getOperation(_ request: Google_Longrunning_GetOperationRequest, callOptions: CallOptions? = nil) -> UnaryCall<Google_Longrunning_GetOperationRequest, Google_Longrunning_Operation> {
    return self.makeUnaryCall(path: "/google.longrunning.Operations/GetOperation",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to DeleteOperation.
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteOperation.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func deleteOperation(_ request: Google_Longrunning_DeleteOperationRequest, callOptions: CallOptions? = nil) -> UnaryCall<Google_Longrunning_DeleteOperationRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(path: "/google.longrunning.Operations/DeleteOperation",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to CancelOperation.
  ///
  /// - Parameters:
  ///   - request: Request to send to CancelOperation.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func cancelOperation(_ request: Google_Longrunning_CancelOperationRequest, callOptions: CallOptions? = nil) -> UnaryCall<Google_Longrunning_CancelOperationRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(path: "/google.longrunning.Operations/CancelOperation",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

}

/// To build a server, implement a class that conforms to this protocol.
public protocol Google_Longrunning_OperationsProvider: CallHandlerProvider {
  func listOperations(request: Google_Longrunning_ListOperationsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Longrunning_ListOperationsResponse>
  func getOperation(request: Google_Longrunning_GetOperationRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Longrunning_Operation>
  func deleteOperation(request: Google_Longrunning_DeleteOperationRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>
  func cancelOperation(request: Google_Longrunning_CancelOperationRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>
}

extension Google_Longrunning_OperationsProvider {
  public var serviceName: String { return "google.longrunning.Operations" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: String, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "ListOperations":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listOperations(request: request, context: context)
        }
      }

    case "GetOperation":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getOperation(request: request, context: context)
        }
      }

    case "DeleteOperation":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.deleteOperation(request: request, context: context)
        }
      }

    case "CancelOperation":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.cancelOperation(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

