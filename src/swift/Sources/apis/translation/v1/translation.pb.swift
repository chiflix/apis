// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: translation/v1/translation.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2018 Sagittarius LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// The canonical error codes for StreamingTranslationTaskResponse
public enum Sagittarius_Translation_V1_StreamingTranslationTaskCode: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// The first enum value must be zero in proto3.
  case ok // = 0

  /// instruct client to continue sending audio data
  case `continue` // = 9100

  /// instruct client to skip sending audio data
  case skipAudio // = 9101
  case UNRECOGNIZED(Int)

  public init() {
    self = .ok
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .ok
    case 9100: self = .continue
    case 9101: self = .skipAudio
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .ok: return 0
    case .continue: return 9100
    case .skipAudio: return 9101
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Sagittarius_Translation_V1_StreamingTranslationTaskCode: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Sagittarius_Translation_V1_StreamingTranslationTaskCode] = [
    .ok,
    .continue,
    .skipAudio,
  ]
}

#endif  // swift(>=4.2)

public struct Sagittarius_Translation_V1_MediaTranslationRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Media Identity
  public var mediaIdentity: String = String()

  /// target language
  /// ISO-639-1 Code https://cloud.google.com/translate/docs/languages
  public var languageCode: String = String()

  /// the format of the transcripts
  public var format: String = String()

  /// position of the transcript relative to the begginning of the audio or video
  public var startTime: Double = 0

  /// hints or keywords for more possible results
  public var hints: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Sagittarius_Translation_V1_MediaTranslationResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// *Output-only* If set, returns a [google.rpc.Status][google.rpc.Status] message that
  /// specifies the error for the operation.
  /// return 404 if no result, in this case, client should use StreamingTranslationRequest
  public var error: Google_Rpc_Status {
    get {return _storage._error ?? Google_Rpc_Status()}
    set {_uniqueStorage()._error = newValue}
  }
  /// Returns true if `error` has been explicitly set.
  public var hasError: Bool {return _storage._error != nil}
  /// Clears the value of `error`. Subsequent reads from it will return its default value.
  public mutating func clearError() {_uniqueStorage()._error = nil}

  /// best translation results
  public var results: [Sagittarius_Translation_V1_TranscriptInfo] {
    get {return _storage._results}
    set {_uniqueStorage()._results = newValue}
  }

  /// if there is a stream translation task running, return task id
  public var streamTranslationTaskID: String {
    get {return _storage._streamTranslationTaskID}
    set {_uniqueStorage()._streamTranslationTaskID = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Sagittarius_Translation_V1_TranscriptInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// the identity, can be used in TranslationRequest
  public var transcriptIdentity: String = String()

  /// ISO-639-1 Code https://cloud.google.com/translate/docs/languages
  public var languageCode: String = String()

  /// actually we should use as "confidence"
  /// use "ranking" for back ward competibility
  public var ranking: Float = 0

  /// maybe: "ai" - result from ai tranlation
  /// "edited" - result from user contribution
  public var tags: [String] = []

  /// in ms, can be +/-
  public var delay: Int64 = 0

  /// the confidence of the quality of the translation
  public var confidence: Float = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Sagittarius_Translation_V1_DetectionRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// the text to be detect
  public var text: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Sagittarius_Translation_V1_DetectionResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// there might be more than one prediction
  public var prediction: [Sagittarius_Translation_V1_DetectionPrediction] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Sagittarius_Translation_V1_DetectionPrediction {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// *Output-only* the language code of the detection result
  public var languageCode: String = String()

  /// *Output-only* The confidence estimate between 0.0 and 1.0. A higher number
  /// indicates an estimated greater likelihood that the detection result are
  /// correct.
  public var confidence: Float = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Sagittarius_Translation_V1_TranscriptRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// oneof case 2
  /// return translate result by transcript_identity
  public var transcriptIdentity: String = String()

  /// position of the transcript relative to the begginning of the audio or video
  public var startTime: Double = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Sagittarius_Translation_V1_TranscriptResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var error: Google_Rpc_Status {
    get {return _storage._error ?? Google_Rpc_Status()}
    set {_uniqueStorage()._error = newValue}
  }
  /// Returns true if `error` has been explicitly set.
  public var hasError: Bool {return _storage._error != nil}
  /// Clears the value of `error`. Subsequent reads from it will return its default value.
  public mutating func clearError() {_uniqueStorage()._error = nil}

  /// each line of the transcript
  public var transcripts: [Sagittarius_Translation_V1_TranscriptResponse.Cue] {
    get {return _storage._transcripts}
    set {_uniqueStorage()._transcripts = newValue}
  }

  /// if transcripts ended in this result
  public var isEndOfTranscript: Bool {
    get {return _storage._isEndOfTranscript}
    set {_uniqueStorage()._isEndOfTranscript = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct Cue {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// the start and end of the transcripts
    public var startTime: Double = 0

    public var endTime: Double = 0

    public var text: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// The top-level message sent by the client for the `StreamingTranslation` method.
/// Multiple `StreamingTranslationRequest` messages are sent. The first message
/// must contain a `streaming_config` message
/// and must not contain `audio` data.
/// All subsequent messages must contain `audio` data and must not contain a
/// `streaming_config` message.
public struct Sagittarius_Translation_V1_StreamingTranslationRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The streaming request, which is either a streaming config or audio content.
  public var streamingRequest: OneOf_StreamingRequest? {
    get {return _storage._streamingRequest}
    set {_uniqueStorage()._streamingRequest = newValue}
  }

  public var streamingConfig: Sagittarius_Translation_V1_StreamingTranslationRequestConfig {
    get {
      if case .streamingConfig(let v)? = _storage._streamingRequest {return v}
      return Sagittarius_Translation_V1_StreamingTranslationRequestConfig()
    }
    set {_uniqueStorage()._streamingRequest = .streamingConfig(newValue)}
  }

  /// The audio data to be recognized. Sequential chunks of audio data are sent
  /// in sequential `StreamingTranslationRequest` messages. The first
  /// `StreamingTranslationRequest` message must not contain `audio_content` data
  /// and all subsequent `StreamingTranslationRequest` messages must contain
  /// `audio_content` data. The audio bytes must be encoded as specified in
  /// `RecognitionConfig`. Note: as with all bytes fields, protobuffers use a
  /// pure binary representation (not base64). See
  /// [audio limits](https://cloud.google.com/speech/limits#content).
  public var audioContent: Data {
    get {
      if case .audioContent(let v)? = _storage._streamingRequest {return v}
      return SwiftProtobuf.Internal.emptyData
    }
    set {_uniqueStorage()._streamingRequest = .audioContent(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// The streaming request, which is either a streaming config or audio content.
  public enum OneOf_StreamingRequest: Equatable {
    case streamingConfig(Sagittarius_Translation_V1_StreamingTranslationRequestConfig)
    /// The audio data to be recognized. Sequential chunks of audio data are sent
    /// in sequential `StreamingTranslationRequest` messages. The first
    /// `StreamingTranslationRequest` message must not contain `audio_content` data
    /// and all subsequent `StreamingTranslationRequest` messages must contain
    /// `audio_content` data. The audio bytes must be encoded as specified in
    /// `RecognitionConfig`. Note: as with all bytes fields, protobuffers use a
    /// pure binary representation (not base64). See
    /// [audio limits](https://cloud.google.com/speech/limits#content).
    case audioContent(Data)

  #if !swift(>=4.1)
    public static func ==(lhs: Sagittarius_Translation_V1_StreamingTranslationRequest.OneOf_StreamingRequest, rhs: Sagittarius_Translation_V1_StreamingTranslationRequest.OneOf_StreamingRequest) -> Bool {
      switch (lhs, rhs) {
      case (.streamingConfig(let l), .streamingConfig(let r)): return l == r
      case (.audioContent(let l), .audioContent(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Sagittarius_Translation_V1_StreamingTranslationRequestConfig {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Provides information to the recognizer that specifies how to process the
  /// request. The first `StreamingTranslationRequest` message must contain a
  /// `streaming_config`  message.
  public var streamingConfig: Google_Cloud_Speech_V1_RecognitionConfig {
    get {return _storage._streamingConfig ?? Google_Cloud_Speech_V1_RecognitionConfig()}
    set {_uniqueStorage()._streamingConfig = newValue}
  }
  /// Returns true if `streamingConfig` has been explicitly set.
  public var hasStreamingConfig: Bool {return _storage._streamingConfig != nil}
  /// Clears the value of `streamingConfig`. Subsequent reads from it will return its default value.
  public mutating func clearStreamingConfig() {_uniqueStorage()._streamingConfig = nil}

  /// the media identity
  public var mediaIdentity: String {
    get {return _storage._mediaIdentity}
    set {_uniqueStorage()._mediaIdentity = newValue}
  }

  /// the language code of the audio
  /// ISO-639-1 Code https://cloud.google.com/translate/docs/languages
  public var audioLanguageCode: String {
    get {return _storage._audioLanguageCode}
    set {_uniqueStorage()._audioLanguageCode = newValue}
  }

  /// ISO-639-1 Code https://cloud.google.com/translate/docs/languages
  public var targetLanguageCode: String {
    get {return _storage._targetLanguageCode}
    set {_uniqueStorage()._targetLanguageCode = newValue}
  }

  /// the track of audio
  public var audioTrack: String {
    get {return _storage._audioTrack}
    set {_uniqueStorage()._audioTrack = newValue}
  }

  /// maybe video or file name
  public var hints: String {
    get {return _storage._hints}
    set {_uniqueStorage()._hints = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// The top-level message sent by server for the `StreamingTranslation` method.
/// Multiple `StreamingTranslationResponse` messages may be sent.
public struct Sagittarius_Translation_V1_StreamingTranslationResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// *Output-only* If set, returns a [google.rpc.Status][google.rpc.Status] message that
  /// specifies the error for the operation.
  public var error: Google_Rpc_Status {
    get {return _storage._error ?? Google_Rpc_Status()}
    set {_uniqueStorage()._error = newValue}
  }
  /// Returns true if `error` has been explicitly set.
  public var hasError: Bool {return _storage._error != nil}
  /// Clears the value of `error`. Subsequent reads from it will return its default value.
  public mutating func clearError() {_uniqueStorage()._error = nil}

  /// streaming_response must be one of following
  public var streamingResponse: OneOf_StreamingResponse? {
    get {return _storage._streamingResponse}
    set {_uniqueStorage()._streamingResponse = newValue}
  }

  /// *Output-only* If the request is suit for streaming result, This contains results that
  /// correspond to consecutive portions of the audio currently being processed.
  public var streamingResult: Sagittarius_Translation_V1_StreamingTranslationResult {
    get {
      if case .streamingResult(let v)? = _storage._streamingResponse {return v}
      return Sagittarius_Translation_V1_StreamingTranslationResult()
    }
    set {_uniqueStorage()._streamingResponse = .streamingResult(newValue)}
  }

  /// *Output-only* If StreamingTranslationTask has been created for farther inquiry
  /// this is the task info include id and estimated finish time, etc.
  public var taskinfo: Sagittarius_Translation_V1_StreamingTranslationTaskInfo {
    get {
      if case .taskinfo(let v)? = _storage._streamingResponse {return v}
      return Sagittarius_Translation_V1_StreamingTranslationTaskInfo()
    }
    set {_uniqueStorage()._streamingResponse = .taskinfo(newValue)}
  }

  /// *Output-only* If the StreamingTranslationTask has finished and the client still alive
  /// this is the translated transcript in whole
  public var transcriptResult: Sagittarius_Translation_V1_TranscriptInfo {
    get {
      if case .transcriptResult(let v)? = _storage._streamingResponse {return v}
      return Sagittarius_Translation_V1_TranscriptInfo()
    }
    set {_uniqueStorage()._streamingResponse = .transcriptResult(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// streaming_response must be one of following
  public enum OneOf_StreamingResponse: Equatable {
    /// *Output-only* If the request is suit for streaming result, This contains results that
    /// correspond to consecutive portions of the audio currently being processed.
    case streamingResult(Sagittarius_Translation_V1_StreamingTranslationResult)
    /// *Output-only* If StreamingTranslationTask has been created for farther inquiry
    /// this is the task info include id and estimated finish time, etc.
    case taskinfo(Sagittarius_Translation_V1_StreamingTranslationTaskInfo)
    /// *Output-only* If the StreamingTranslationTask has finished and the client still alive
    /// this is the translated transcript in whole
    case transcriptResult(Sagittarius_Translation_V1_TranscriptInfo)

  #if !swift(>=4.1)
    public static func ==(lhs: Sagittarius_Translation_V1_StreamingTranslationResponse.OneOf_StreamingResponse, rhs: Sagittarius_Translation_V1_StreamingTranslationResponse.OneOf_StreamingResponse) -> Bool {
      switch (lhs, rhs) {
      case (.streamingResult(let l), .streamingResult(let r)): return l == r
      case (.taskinfo(let l), .taskinfo(let r)): return l == r
      case (.transcriptResult(let l), .transcriptResult(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// the StreamingTranslationTask id that created by the `StreamingTranslation` method.
public struct Sagittarius_Translation_V1_StreamingTranslationTaskRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var taskID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// the translated TranscriptInfo or `StreamingTranslationTaskInfo`
public struct Sagittarius_Translation_V1_StreamingTranslationTaskResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// maybe be:
  /// StreamingTranslationTaskCode.CONTINUE
  /// StreamingTranslationTaskCode.SKIP_AUDIO
  public var error: Google_Rpc_Status {
    get {return _storage._error ?? Google_Rpc_Status()}
    set {_uniqueStorage()._error = newValue}
  }
  /// Returns true if `error` has been explicitly set.
  public var hasError: Bool {return _storage._error != nil}
  /// Clears the value of `error`. Subsequent reads from it will return its default value.
  public mutating func clearError() {_uniqueStorage()._error = nil}

  public var streamingRequest: OneOf_StreamingRequest? {
    get {return _storage._streamingRequest}
    set {_uniqueStorage()._streamingRequest = newValue}
  }

  public var taskinfo: Sagittarius_Translation_V1_StreamingTranslationTaskInfo {
    get {
      if case .taskinfo(let v)? = _storage._streamingRequest {return v}
      return Sagittarius_Translation_V1_StreamingTranslationTaskInfo()
    }
    set {_uniqueStorage()._streamingRequest = .taskinfo(newValue)}
  }

  /// can return result
  public var transcriptinfo: Sagittarius_Translation_V1_TranscriptInfo {
    get {
      if case .transcriptinfo(let v)? = _storage._streamingRequest {return v}
      return Sagittarius_Translation_V1_TranscriptInfo()
    }
    set {_uniqueStorage()._streamingRequest = .transcriptinfo(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_StreamingRequest: Equatable {
    case taskinfo(Sagittarius_Translation_V1_StreamingTranslationTaskInfo)
    /// can return result
    case transcriptinfo(Sagittarius_Translation_V1_TranscriptInfo)

  #if !swift(>=4.1)
    public static func ==(lhs: Sagittarius_Translation_V1_StreamingTranslationTaskResponse.OneOf_StreamingRequest, rhs: Sagittarius_Translation_V1_StreamingTranslationTaskResponse.OneOf_StreamingRequest) -> Bool {
      switch (lhs, rhs) {
      case (.taskinfo(let l), .taskinfo(let r)): return l == r
      case (.transcriptinfo(let l), .transcriptinfo(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// the StreamingTranslationTask that created by the `StreamingTranslation` method.
public struct Sagittarius_Translation_V1_StreamingTranslationTaskInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// this task id can be used for farther inquiry
  public var taskID: String = String()

  /// this is the estimated finished time, the task is finished if the time is zero
  /// or less
  public var estimateTime: Double = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Sagittarius_Translation_V1_StreamingTranslationResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// *Output-only* Transcript text representing the words that the user spoke.
  public var transcript: String = String()

  /// *Output-only* The confidence estimate between 0.0 and 1.0. A higher number
  /// indicates an estimated greater likelihood that the recognized words are
  /// correct. This field is typically provided only for the top hypothesis, and
  /// only for `is_final=true` results. Clients should not rely on the
  /// `confidence` field as it is not guaranteed to be accurate or consistent.
  /// The default of 0.0 is a sentinel value indicating `confidence` was not set.
  public var confidence: Float = 0

  /// *Output-only* An estimate of the likelihood that the recognizer will not
  /// change its guess about this interim result. Values range from 0.0
  /// (completely unstable) to 1.0 (completely stable).
  /// This field is only provided for interim results (`is_final=false`).
  /// The default of 0.0 is a sentinel value indicating `stability` was not set.
  public var stability: Float = 0

  /// *Output-only* Time offset relative to the beginning of the audio,
  /// and corresponding to the start of the spoken word.
  /// This field is only set if `enable_word_time_offsets=true` and only
  /// in the top hypothesis.
  /// This is an experimental feature and the accuracy of the time offset can
  /// vary.
  public var startTime: Double = 0

  /// *Output-only* Time offset relative to the beginning of the audio,
  /// and corresponding to the end of the spoken word.
  /// This field is only set if `enable_word_time_offsets=true` and only
  /// in the top hypothesis.
  /// This is an experimental feature and the accuracy of the time offset can
  /// vary.
  public var endTime: Double = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// We use Google Translation Service for text translation.
/// Translation API Reference: https://cloud.google.com/translate/docs/reference/translate
public struct Sagittarius_Translation_V1_TextTranslationRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The text to translate
  public var text: [String] = []

  /// The language to use for translation of the text
  /// ISO-639-1/bcp47 Code with tags
  /// https://cloud.google.com/translate/docs/languages
  public var targetLanguageCode: String = String()

  /// The language of the source text
  /// ISO-639-1/bcp47 Code with tags
  /// https://cloud.google.com/translate/docs/languages
  public var sourceLanguageCode: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Sagittarius_Translation_V1_TextTranslationResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var error: Google_Rpc_Status {
    get {return _storage._error ?? Google_Rpc_Status()}
    set {_uniqueStorage()._error = newValue}
  }
  /// Returns true if `error` has been explicitly set.
  public var hasError: Bool {return _storage._error != nil}
  /// Clears the value of `error`. Subsequent reads from it will return its default value.
  public mutating func clearError() {_uniqueStorage()._error = nil}

  /// translation results for the requested text
  public var results: [Sagittarius_Translation_V1_TextTranslationResponse.Text] {
    get {return _storage._results}
    set {_uniqueStorage()._results = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct Text {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The source language of the text detected
    /// ISO-639-1/bcp47 Code with tags
    /// https://cloud.google.com/translate/docs/languages
    public var sourceLanguage: String = String()

    /// The translated Text
    public var text: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Sagittarius_Translation_V1_UserQuotaRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Remaining user quota
public struct Sagittarius_Translation_V1_UserQuotaResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// remaining user quota in number
  public var quota: Int64 {
    get {return _storage._quota}
    set {_uniqueStorage()._quota = newValue}
  }

  /// remaining quota in time(second)
  public var timeLeft: Int64 {
    get {return _storage._timeLeft}
    set {_uniqueStorage()._timeLeft = newValue}
  }

  public var error: Google_Rpc_Status {
    get {return _storage._error ?? Google_Rpc_Status()}
    set {_uniqueStorage()._error = newValue}
  }
  /// Returns true if `error` has been explicitly set.
  public var hasError: Bool {return _storage._error != nil}
  /// Clears the value of `error`. Subsequent reads from it will return its default value.
  public mutating func clearError() {_uniqueStorage()._error = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "sagittarius.translation.v1"

extension Sagittarius_Translation_V1_StreamingTranslationTaskCode: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OK"),
    9100: .same(proto: "CONTINUE"),
    9101: .same(proto: "SKIP_AUDIO"),
  ]
}

extension Sagittarius_Translation_V1_MediaTranslationRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MediaTranslationRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "media_identity"),
    2: .standard(proto: "language_code"),
    3: .same(proto: "format"),
    6: .standard(proto: "start_time"),
    7: .same(proto: "hints"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.mediaIdentity)
      case 2: try decoder.decodeSingularStringField(value: &self.languageCode)
      case 3: try decoder.decodeSingularStringField(value: &self.format)
      case 6: try decoder.decodeSingularDoubleField(value: &self.startTime)
      case 7: try decoder.decodeSingularStringField(value: &self.hints)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.mediaIdentity.isEmpty {
      try visitor.visitSingularStringField(value: self.mediaIdentity, fieldNumber: 1)
    }
    if !self.languageCode.isEmpty {
      try visitor.visitSingularStringField(value: self.languageCode, fieldNumber: 2)
    }
    if !self.format.isEmpty {
      try visitor.visitSingularStringField(value: self.format, fieldNumber: 3)
    }
    if self.startTime != 0 {
      try visitor.visitSingularDoubleField(value: self.startTime, fieldNumber: 6)
    }
    if !self.hints.isEmpty {
      try visitor.visitSingularStringField(value: self.hints, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Sagittarius_Translation_V1_MediaTranslationRequest, rhs: Sagittarius_Translation_V1_MediaTranslationRequest) -> Bool {
    if lhs.mediaIdentity != rhs.mediaIdentity {return false}
    if lhs.languageCode != rhs.languageCode {return false}
    if lhs.format != rhs.format {return false}
    if lhs.startTime != rhs.startTime {return false}
    if lhs.hints != rhs.hints {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sagittarius_Translation_V1_MediaTranslationResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MediaTranslationResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
    2: .same(proto: "results"),
    3: .standard(proto: "stream_translation_task_id"),
  ]

  fileprivate class _StorageClass {
    var _error: Google_Rpc_Status? = nil
    var _results: [Sagittarius_Translation_V1_TranscriptInfo] = []
    var _streamTranslationTaskID: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _error = source._error
      _results = source._results
      _streamTranslationTaskID = source._streamTranslationTaskID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._error)
        case 2: try decoder.decodeRepeatedMessageField(value: &_storage._results)
        case 3: try decoder.decodeSingularStringField(value: &_storage._streamTranslationTaskID)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._error {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._results.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._results, fieldNumber: 2)
      }
      if !_storage._streamTranslationTaskID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._streamTranslationTaskID, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Sagittarius_Translation_V1_MediaTranslationResponse, rhs: Sagittarius_Translation_V1_MediaTranslationResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._error != rhs_storage._error {return false}
        if _storage._results != rhs_storage._results {return false}
        if _storage._streamTranslationTaskID != rhs_storage._streamTranslationTaskID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sagittarius_Translation_V1_TranscriptInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TranscriptInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "transcript_identity"),
    2: .standard(proto: "language_code"),
    3: .same(proto: "ranking"),
    4: .same(proto: "tags"),
    5: .same(proto: "delay"),
    6: .same(proto: "confidence"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.transcriptIdentity)
      case 2: try decoder.decodeSingularStringField(value: &self.languageCode)
      case 3: try decoder.decodeSingularFloatField(value: &self.ranking)
      case 4: try decoder.decodeRepeatedStringField(value: &self.tags)
      case 5: try decoder.decodeSingularInt64Field(value: &self.delay)
      case 6: try decoder.decodeSingularFloatField(value: &self.confidence)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.transcriptIdentity.isEmpty {
      try visitor.visitSingularStringField(value: self.transcriptIdentity, fieldNumber: 1)
    }
    if !self.languageCode.isEmpty {
      try visitor.visitSingularStringField(value: self.languageCode, fieldNumber: 2)
    }
    if self.ranking != 0 {
      try visitor.visitSingularFloatField(value: self.ranking, fieldNumber: 3)
    }
    if !self.tags.isEmpty {
      try visitor.visitRepeatedStringField(value: self.tags, fieldNumber: 4)
    }
    if self.delay != 0 {
      try visitor.visitSingularInt64Field(value: self.delay, fieldNumber: 5)
    }
    if self.confidence != 0 {
      try visitor.visitSingularFloatField(value: self.confidence, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Sagittarius_Translation_V1_TranscriptInfo, rhs: Sagittarius_Translation_V1_TranscriptInfo) -> Bool {
    if lhs.transcriptIdentity != rhs.transcriptIdentity {return false}
    if lhs.languageCode != rhs.languageCode {return false}
    if lhs.ranking != rhs.ranking {return false}
    if lhs.tags != rhs.tags {return false}
    if lhs.delay != rhs.delay {return false}
    if lhs.confidence != rhs.confidence {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sagittarius_Translation_V1_DetectionRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DetectionRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "text"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.text)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Sagittarius_Translation_V1_DetectionRequest, rhs: Sagittarius_Translation_V1_DetectionRequest) -> Bool {
    if lhs.text != rhs.text {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sagittarius_Translation_V1_DetectionResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DetectionResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "prediction"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.prediction)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.prediction.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.prediction, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Sagittarius_Translation_V1_DetectionResponse, rhs: Sagittarius_Translation_V1_DetectionResponse) -> Bool {
    if lhs.prediction != rhs.prediction {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sagittarius_Translation_V1_DetectionPrediction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DetectionPrediction"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "language_code"),
    2: .same(proto: "confidence"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.languageCode)
      case 2: try decoder.decodeSingularFloatField(value: &self.confidence)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.languageCode.isEmpty {
      try visitor.visitSingularStringField(value: self.languageCode, fieldNumber: 1)
    }
    if self.confidence != 0 {
      try visitor.visitSingularFloatField(value: self.confidence, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Sagittarius_Translation_V1_DetectionPrediction, rhs: Sagittarius_Translation_V1_DetectionPrediction) -> Bool {
    if lhs.languageCode != rhs.languageCode {return false}
    if lhs.confidence != rhs.confidence {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sagittarius_Translation_V1_TranscriptRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TranscriptRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    4: .standard(proto: "transcript_identity"),
    6: .standard(proto: "start_time"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 4: try decoder.decodeSingularStringField(value: &self.transcriptIdentity)
      case 6: try decoder.decodeSingularDoubleField(value: &self.startTime)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.transcriptIdentity.isEmpty {
      try visitor.visitSingularStringField(value: self.transcriptIdentity, fieldNumber: 4)
    }
    if self.startTime != 0 {
      try visitor.visitSingularDoubleField(value: self.startTime, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Sagittarius_Translation_V1_TranscriptRequest, rhs: Sagittarius_Translation_V1_TranscriptRequest) -> Bool {
    if lhs.transcriptIdentity != rhs.transcriptIdentity {return false}
    if lhs.startTime != rhs.startTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sagittarius_Translation_V1_TranscriptResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TranscriptResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
    2: .same(proto: "transcripts"),
    3: .standard(proto: "is_end_of_transcript"),
  ]

  fileprivate class _StorageClass {
    var _error: Google_Rpc_Status? = nil
    var _transcripts: [Sagittarius_Translation_V1_TranscriptResponse.Cue] = []
    var _isEndOfTranscript: Bool = false

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _error = source._error
      _transcripts = source._transcripts
      _isEndOfTranscript = source._isEndOfTranscript
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._error)
        case 2: try decoder.decodeRepeatedMessageField(value: &_storage._transcripts)
        case 3: try decoder.decodeSingularBoolField(value: &_storage._isEndOfTranscript)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._error {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._transcripts.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._transcripts, fieldNumber: 2)
      }
      if _storage._isEndOfTranscript != false {
        try visitor.visitSingularBoolField(value: _storage._isEndOfTranscript, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Sagittarius_Translation_V1_TranscriptResponse, rhs: Sagittarius_Translation_V1_TranscriptResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._error != rhs_storage._error {return false}
        if _storage._transcripts != rhs_storage._transcripts {return false}
        if _storage._isEndOfTranscript != rhs_storage._isEndOfTranscript {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sagittarius_Translation_V1_TranscriptResponse.Cue: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Sagittarius_Translation_V1_TranscriptResponse.protoMessageName + ".Cue"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "start_time"),
    2: .standard(proto: "end_time"),
    3: .same(proto: "text"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularDoubleField(value: &self.startTime)
      case 2: try decoder.decodeSingularDoubleField(value: &self.endTime)
      case 3: try decoder.decodeSingularStringField(value: &self.text)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.startTime != 0 {
      try visitor.visitSingularDoubleField(value: self.startTime, fieldNumber: 1)
    }
    if self.endTime != 0 {
      try visitor.visitSingularDoubleField(value: self.endTime, fieldNumber: 2)
    }
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Sagittarius_Translation_V1_TranscriptResponse.Cue, rhs: Sagittarius_Translation_V1_TranscriptResponse.Cue) -> Bool {
    if lhs.startTime != rhs.startTime {return false}
    if lhs.endTime != rhs.endTime {return false}
    if lhs.text != rhs.text {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sagittarius_Translation_V1_StreamingTranslationRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StreamingTranslationRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "streaming_config"),
    2: .standard(proto: "audio_content"),
  ]

  fileprivate class _StorageClass {
    var _streamingRequest: Sagittarius_Translation_V1_StreamingTranslationRequest.OneOf_StreamingRequest?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _streamingRequest = source._streamingRequest
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1:
          var v: Sagittarius_Translation_V1_StreamingTranslationRequestConfig?
          if let current = _storage._streamingRequest {
            try decoder.handleConflictingOneOf()
            if case .streamingConfig(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._streamingRequest = .streamingConfig(v)}
        case 2:
          if _storage._streamingRequest != nil {try decoder.handleConflictingOneOf()}
          var v: Data?
          try decoder.decodeSingularBytesField(value: &v)
          if let v = v {_storage._streamingRequest = .audioContent(v)}
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._streamingRequest {
      case .streamingConfig(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      case .audioContent(let v)?:
        try visitor.visitSingularBytesField(value: v, fieldNumber: 2)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Sagittarius_Translation_V1_StreamingTranslationRequest, rhs: Sagittarius_Translation_V1_StreamingTranslationRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._streamingRequest != rhs_storage._streamingRequest {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sagittarius_Translation_V1_StreamingTranslationRequestConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StreamingTranslationRequestConfig"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "streaming_config"),
    2: .standard(proto: "media_identity"),
    3: .standard(proto: "audio_language_code"),
    4: .standard(proto: "target_language_code"),
    5: .standard(proto: "audio_track"),
    6: .same(proto: "hints"),
  ]

  fileprivate class _StorageClass {
    var _streamingConfig: Google_Cloud_Speech_V1_RecognitionConfig? = nil
    var _mediaIdentity: String = String()
    var _audioLanguageCode: String = String()
    var _targetLanguageCode: String = String()
    var _audioTrack: String = String()
    var _hints: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _streamingConfig = source._streamingConfig
      _mediaIdentity = source._mediaIdentity
      _audioLanguageCode = source._audioLanguageCode
      _targetLanguageCode = source._targetLanguageCode
      _audioTrack = source._audioTrack
      _hints = source._hints
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._streamingConfig)
        case 2: try decoder.decodeSingularStringField(value: &_storage._mediaIdentity)
        case 3: try decoder.decodeSingularStringField(value: &_storage._audioLanguageCode)
        case 4: try decoder.decodeSingularStringField(value: &_storage._targetLanguageCode)
        case 5: try decoder.decodeSingularStringField(value: &_storage._audioTrack)
        case 6: try decoder.decodeSingularStringField(value: &_storage._hints)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._streamingConfig {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._mediaIdentity.isEmpty {
        try visitor.visitSingularStringField(value: _storage._mediaIdentity, fieldNumber: 2)
      }
      if !_storage._audioLanguageCode.isEmpty {
        try visitor.visitSingularStringField(value: _storage._audioLanguageCode, fieldNumber: 3)
      }
      if !_storage._targetLanguageCode.isEmpty {
        try visitor.visitSingularStringField(value: _storage._targetLanguageCode, fieldNumber: 4)
      }
      if !_storage._audioTrack.isEmpty {
        try visitor.visitSingularStringField(value: _storage._audioTrack, fieldNumber: 5)
      }
      if !_storage._hints.isEmpty {
        try visitor.visitSingularStringField(value: _storage._hints, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Sagittarius_Translation_V1_StreamingTranslationRequestConfig, rhs: Sagittarius_Translation_V1_StreamingTranslationRequestConfig) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._streamingConfig != rhs_storage._streamingConfig {return false}
        if _storage._mediaIdentity != rhs_storage._mediaIdentity {return false}
        if _storage._audioLanguageCode != rhs_storage._audioLanguageCode {return false}
        if _storage._targetLanguageCode != rhs_storage._targetLanguageCode {return false}
        if _storage._audioTrack != rhs_storage._audioTrack {return false}
        if _storage._hints != rhs_storage._hints {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sagittarius_Translation_V1_StreamingTranslationResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StreamingTranslationResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
    2: .standard(proto: "streaming_result"),
    3: .same(proto: "taskinfo"),
    4: .standard(proto: "transcript_result"),
  ]

  fileprivate class _StorageClass {
    var _error: Google_Rpc_Status? = nil
    var _streamingResponse: Sagittarius_Translation_V1_StreamingTranslationResponse.OneOf_StreamingResponse?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _error = source._error
      _streamingResponse = source._streamingResponse
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._error)
        case 2:
          var v: Sagittarius_Translation_V1_StreamingTranslationResult?
          if let current = _storage._streamingResponse {
            try decoder.handleConflictingOneOf()
            if case .streamingResult(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._streamingResponse = .streamingResult(v)}
        case 3:
          var v: Sagittarius_Translation_V1_StreamingTranslationTaskInfo?
          if let current = _storage._streamingResponse {
            try decoder.handleConflictingOneOf()
            if case .taskinfo(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._streamingResponse = .taskinfo(v)}
        case 4:
          var v: Sagittarius_Translation_V1_TranscriptInfo?
          if let current = _storage._streamingResponse {
            try decoder.handleConflictingOneOf()
            if case .transcriptResult(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._streamingResponse = .transcriptResult(v)}
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._error {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      switch _storage._streamingResponse {
      case .streamingResult(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      case .taskinfo(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      case .transcriptResult(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Sagittarius_Translation_V1_StreamingTranslationResponse, rhs: Sagittarius_Translation_V1_StreamingTranslationResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._error != rhs_storage._error {return false}
        if _storage._streamingResponse != rhs_storage._streamingResponse {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sagittarius_Translation_V1_StreamingTranslationTaskRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StreamingTranslationTaskRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "task_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.taskID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.taskID.isEmpty {
      try visitor.visitSingularStringField(value: self.taskID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Sagittarius_Translation_V1_StreamingTranslationTaskRequest, rhs: Sagittarius_Translation_V1_StreamingTranslationTaskRequest) -> Bool {
    if lhs.taskID != rhs.taskID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sagittarius_Translation_V1_StreamingTranslationTaskResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StreamingTranslationTaskResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
    2: .same(proto: "taskinfo"),
    3: .same(proto: "transcriptinfo"),
  ]

  fileprivate class _StorageClass {
    var _error: Google_Rpc_Status? = nil
    var _streamingRequest: Sagittarius_Translation_V1_StreamingTranslationTaskResponse.OneOf_StreamingRequest?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _error = source._error
      _streamingRequest = source._streamingRequest
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._error)
        case 2:
          var v: Sagittarius_Translation_V1_StreamingTranslationTaskInfo?
          if let current = _storage._streamingRequest {
            try decoder.handleConflictingOneOf()
            if case .taskinfo(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._streamingRequest = .taskinfo(v)}
        case 3:
          var v: Sagittarius_Translation_V1_TranscriptInfo?
          if let current = _storage._streamingRequest {
            try decoder.handleConflictingOneOf()
            if case .transcriptinfo(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._streamingRequest = .transcriptinfo(v)}
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._error {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      switch _storage._streamingRequest {
      case .taskinfo(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      case .transcriptinfo(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Sagittarius_Translation_V1_StreamingTranslationTaskResponse, rhs: Sagittarius_Translation_V1_StreamingTranslationTaskResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._error != rhs_storage._error {return false}
        if _storage._streamingRequest != rhs_storage._streamingRequest {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sagittarius_Translation_V1_StreamingTranslationTaskInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StreamingTranslationTaskInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "task_id"),
    2: .standard(proto: "estimate_time"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.taskID)
      case 2: try decoder.decodeSingularDoubleField(value: &self.estimateTime)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.taskID.isEmpty {
      try visitor.visitSingularStringField(value: self.taskID, fieldNumber: 1)
    }
    if self.estimateTime != 0 {
      try visitor.visitSingularDoubleField(value: self.estimateTime, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Sagittarius_Translation_V1_StreamingTranslationTaskInfo, rhs: Sagittarius_Translation_V1_StreamingTranslationTaskInfo) -> Bool {
    if lhs.taskID != rhs.taskID {return false}
    if lhs.estimateTime != rhs.estimateTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sagittarius_Translation_V1_StreamingTranslationResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StreamingTranslationResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "transcript"),
    2: .same(proto: "confidence"),
    3: .same(proto: "stability"),
    4: .standard(proto: "start_time"),
    5: .standard(proto: "end_time"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.transcript)
      case 2: try decoder.decodeSingularFloatField(value: &self.confidence)
      case 3: try decoder.decodeSingularFloatField(value: &self.stability)
      case 4: try decoder.decodeSingularDoubleField(value: &self.startTime)
      case 5: try decoder.decodeSingularDoubleField(value: &self.endTime)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.transcript.isEmpty {
      try visitor.visitSingularStringField(value: self.transcript, fieldNumber: 1)
    }
    if self.confidence != 0 {
      try visitor.visitSingularFloatField(value: self.confidence, fieldNumber: 2)
    }
    if self.stability != 0 {
      try visitor.visitSingularFloatField(value: self.stability, fieldNumber: 3)
    }
    if self.startTime != 0 {
      try visitor.visitSingularDoubleField(value: self.startTime, fieldNumber: 4)
    }
    if self.endTime != 0 {
      try visitor.visitSingularDoubleField(value: self.endTime, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Sagittarius_Translation_V1_StreamingTranslationResult, rhs: Sagittarius_Translation_V1_StreamingTranslationResult) -> Bool {
    if lhs.transcript != rhs.transcript {return false}
    if lhs.confidence != rhs.confidence {return false}
    if lhs.stability != rhs.stability {return false}
    if lhs.startTime != rhs.startTime {return false}
    if lhs.endTime != rhs.endTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sagittarius_Translation_V1_TextTranslationRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TextTranslationRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "text"),
    2: .standard(proto: "target_language_code"),
    3: .standard(proto: "source_language_code"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedStringField(value: &self.text)
      case 2: try decoder.decodeSingularStringField(value: &self.targetLanguageCode)
      case 3: try decoder.decodeSingularStringField(value: &self.sourceLanguageCode)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.text.isEmpty {
      try visitor.visitRepeatedStringField(value: self.text, fieldNumber: 1)
    }
    if !self.targetLanguageCode.isEmpty {
      try visitor.visitSingularStringField(value: self.targetLanguageCode, fieldNumber: 2)
    }
    if !self.sourceLanguageCode.isEmpty {
      try visitor.visitSingularStringField(value: self.sourceLanguageCode, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Sagittarius_Translation_V1_TextTranslationRequest, rhs: Sagittarius_Translation_V1_TextTranslationRequest) -> Bool {
    if lhs.text != rhs.text {return false}
    if lhs.targetLanguageCode != rhs.targetLanguageCode {return false}
    if lhs.sourceLanguageCode != rhs.sourceLanguageCode {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sagittarius_Translation_V1_TextTranslationResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TextTranslationResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
    2: .same(proto: "results"),
  ]

  fileprivate class _StorageClass {
    var _error: Google_Rpc_Status? = nil
    var _results: [Sagittarius_Translation_V1_TextTranslationResponse.Text] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _error = source._error
      _results = source._results
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._error)
        case 2: try decoder.decodeRepeatedMessageField(value: &_storage._results)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._error {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._results.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._results, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Sagittarius_Translation_V1_TextTranslationResponse, rhs: Sagittarius_Translation_V1_TextTranslationResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._error != rhs_storage._error {return false}
        if _storage._results != rhs_storage._results {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sagittarius_Translation_V1_TextTranslationResponse.Text: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Sagittarius_Translation_V1_TextTranslationResponse.protoMessageName + ".Text"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "source_language"),
    2: .same(proto: "text"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.sourceLanguage)
      case 2: try decoder.decodeSingularStringField(value: &self.text)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sourceLanguage.isEmpty {
      try visitor.visitSingularStringField(value: self.sourceLanguage, fieldNumber: 1)
    }
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Sagittarius_Translation_V1_TextTranslationResponse.Text, rhs: Sagittarius_Translation_V1_TextTranslationResponse.Text) -> Bool {
    if lhs.sourceLanguage != rhs.sourceLanguage {return false}
    if lhs.text != rhs.text {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sagittarius_Translation_V1_UserQuotaRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UserQuotaRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Sagittarius_Translation_V1_UserQuotaRequest, rhs: Sagittarius_Translation_V1_UserQuotaRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sagittarius_Translation_V1_UserQuotaResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UserQuotaResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "quota"),
    2: .standard(proto: "time_left"),
    3: .same(proto: "error"),
  ]

  fileprivate class _StorageClass {
    var _quota: Int64 = 0
    var _timeLeft: Int64 = 0
    var _error: Google_Rpc_Status? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _quota = source._quota
      _timeLeft = source._timeLeft
      _error = source._error
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt64Field(value: &_storage._quota)
        case 2: try decoder.decodeSingularInt64Field(value: &_storage._timeLeft)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._error)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._quota != 0 {
        try visitor.visitSingularInt64Field(value: _storage._quota, fieldNumber: 1)
      }
      if _storage._timeLeft != 0 {
        try visitor.visitSingularInt64Field(value: _storage._timeLeft, fieldNumber: 2)
      }
      if let v = _storage._error {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Sagittarius_Translation_V1_UserQuotaResponse, rhs: Sagittarius_Translation_V1_UserQuotaResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._quota != rhs_storage._quota {return false}
        if _storage._timeLeft != rhs_storage._timeLeft {return false}
        if _storage._error != rhs_storage._error {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
