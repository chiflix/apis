// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: media/v1/media.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright 2018 Sagittarius LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Sagittarius_Media_V1_Info {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Resource id of the media. It must have the format of "media/*/info".
  /// For example: "media/1111-2222-3333-4444/info".
  public var mediaHash: String = String()

  public var tracks: [Sagittarius_Media_V1_Info.TrackInfo] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct TrackInfo {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var types: Sagittarius_Media_V1_Info.TrackInfo.TypeEnum = .video

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public enum TypeEnum: SwiftProtobuf.Enum {
      public typealias RawValue = Int
      case video // = 0
      case audio // = 1
      case text // = 2
      case other // = 3
      case UNRECOGNIZED(Int)

      public init() {
        self = .video
      }

      public init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .video
        case 1: self = .audio
        case 2: self = .text
        case 3: self = .other
        default: self = .UNRECOGNIZED(rawValue)
        }
      }

      public var rawValue: Int {
        switch self {
        case .video: return 0
        case .audio: return 1
        case .text: return 2
        case .other: return 3
        case .UNRECOGNIZED(let i): return i
        }
      }

    }

    public init() {}
  }

  public init() {}
}

/// retrieve media info like sound track resolutions, length/duringation etc.
public struct Sagittarius_Media_V1_GetInfoRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// quick hash of the media. For example: "media/1111-2222-3333-4444/info".
  public var mediaHash: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// try to update media info
public struct Sagittarius_Media_V1_UpdateInfoRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// quick hash of the media. For example: "media/1111-2222-3333-4444/info".
  public var mediaHash: String {
    get {return _storage._mediaHash}
    set {_uniqueStorage()._mediaHash = newValue}
  }

  /// the media info to be updated
  public var info: Sagittarius_Media_V1_Info {
    get {return _storage._info ?? Sagittarius_Media_V1_Info()}
    set {_uniqueStorage()._info = newValue}
  }
  /// Returns true if `info` has been explicitly set.
  public var hasInfo: Bool {return _storage._info != nil}
  /// Clears the value of `info`. Subsequent reads from it will return its default value.
  public mutating func clearInfo() {_uniqueStorage()._info = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// try to retrieve Thumbnails
public struct Sagittarius_Media_V1_ThumbnailTimeRangesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// use quick media hash to get thumbnails
  public var mediaHash: String = String()

  /// time length of the  media resource, in seconds
  public var mediaLength: Double = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// time range is used to tell the client the screenshot range
public struct Sagittarius_Media_V1_TimeRange {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// the beginning of the time range, in seconds
  public var begin: Double = 0

  /// the end of the time range, in seconds
  public var end: Double = 0

  /// time interval between each thumbnails, in seconds
  public var interval: Double = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Sagittarius_Media_V1_ThumbnailTimeRangesResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var error: Google_Rpc_Status {
    get {return _storage._error ?? Google_Rpc_Status()}
    set {_uniqueStorage()._error = newValue}
  }
  /// Returns true if `error` has been explicitly set.
  public var hasError: Bool {return _storage._error != nil}
  /// Clears the value of `error`. Subsequent reads from it will return its default value.
  public mutating func clearError() {_uniqueStorage()._error = nil}

  /// time range is used to tell the client the screenshot range
  public var mediaHash: String {
    get {return _storage._mediaHash}
    set {_uniqueStorage()._mediaHash = newValue}
  }

  /// thumbnails that the server have, in time ranges
  public var availables: [Sagittarius_Media_V1_TimeRange] {
    get {return _storage._availables}
    set {_uniqueStorage()._availables = newValue}
  }

  /// thumbnails that the server is missing and wanted, in time ranges
  public var missings: [Sagittarius_Media_V1_TimeRange] {
    get {return _storage._missings}
    set {_uniqueStorage()._missings = newValue}
  }

  /// access token for read and/or write thumbnail by timestamp
  /// session_token will not have write premission if there is not missing
  public var token: String {
    get {return _storage._token}
    set {_uniqueStorage()._token = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Sagittarius_Media_V1_ThumbnailRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var mediaHash: String {
    get {return _storage._mediaHash}
    set {_uniqueStorage()._mediaHash = newValue}
  }

  /// which thumbnail the client wants
  public var time: OneOf_Time? {
    get {return _storage._time}
    set {_uniqueStorage()._time = newValue}
  }

  public var range: Sagittarius_Media_V1_TimeRange {
    get {
      if case .range(let v)? = _storage._time {return v}
      return Sagittarius_Media_V1_TimeRange()
    }
    set {_uniqueStorage()._time = .range(newValue)}
  }

  public var timestamp: Double {
    get {
      if case .timestamp(let v)? = _storage._time {return v}
      return 0
    }
    set {_uniqueStorage()._time = .timestamp(newValue)}
  }

  /// access token for read and write thumbnail by timestamp
  public var token: String {
    get {return _storage._token}
    set {_uniqueStorage()._token = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// which thumbnail the client wants
  public enum OneOf_Time: Equatable {
    case range(Sagittarius_Media_V1_TimeRange)
    case timestamp(Double)

  #if !swift(>=4.1)
    public static func ==(lhs: Sagittarius_Media_V1_ThumbnailRequest.OneOf_Time, rhs: Sagittarius_Media_V1_ThumbnailRequest.OneOf_Time) -> Bool {
      switch (lhs, rhs) {
      case (.range(let l), .range(let r)): return l == r
      case (.timestamp(let l), .timestamp(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Sagittarius_Media_V1_Thumbnail {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// timestamp of this thumbnail in relative to the begginning of the media_hash
  public var timestamp: Double = 0

  /// image's file extension
  public var ext: String = String()

  /// image's binary content
  public var payload: Data = SwiftProtobuf.Internal.emptyData

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Sagittarius_Media_V1_ThumbnailResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var error: Google_Rpc_Status {
    get {return _storage._error ?? Google_Rpc_Status()}
    set {_uniqueStorage()._error = newValue}
  }
  /// Returns true if `error` has been explicitly set.
  public var hasError: Bool {return _storage._error != nil}
  /// Clears the value of `error`. Subsequent reads from it will return its default value.
  public mutating func clearError() {_uniqueStorage()._error = nil}

  /// thumbnails. with timestamp, extension, and payload
  public var thumbnails: [Sagittarius_Media_V1_Thumbnail] {
    get {return _storage._thumbnails}
    set {_uniqueStorage()._thumbnails = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Sagittarius_Media_V1_UpdateThumbnailRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var mediaHash: String = String()

  /// the thumbnails to be updated
  public var thumbnails: [Sagittarius_Media_V1_Thumbnail] = []

  /// access token for read and write thumbnail by timestamp
  public var token: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "sagittarius.media.v1"

extension Sagittarius_Media_V1_Info: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Info"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "media_hash"),
    2: .same(proto: "tracks"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.mediaHash)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.tracks)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.mediaHash.isEmpty {
      try visitor.visitSingularStringField(value: self.mediaHash, fieldNumber: 1)
    }
    if !self.tracks.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.tracks, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Sagittarius_Media_V1_Info, rhs: Sagittarius_Media_V1_Info) -> Bool {
    if lhs.mediaHash != rhs.mediaHash {return false}
    if lhs.tracks != rhs.tracks {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sagittarius_Media_V1_Info.TrackInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Sagittarius_Media_V1_Info.protoMessageName + ".TrackInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "types"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.types)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.types != .video {
      try visitor.visitSingularEnumField(value: self.types, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Sagittarius_Media_V1_Info.TrackInfo, rhs: Sagittarius_Media_V1_Info.TrackInfo) -> Bool {
    if lhs.types != rhs.types {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sagittarius_Media_V1_Info.TrackInfo.TypeEnum: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "VIDEO"),
    1: .same(proto: "AUDIO"),
    2: .same(proto: "TEXT"),
    3: .same(proto: "OTHER"),
  ]
}

extension Sagittarius_Media_V1_GetInfoRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetInfoRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "media_hash"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.mediaHash)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.mediaHash.isEmpty {
      try visitor.visitSingularStringField(value: self.mediaHash, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Sagittarius_Media_V1_GetInfoRequest, rhs: Sagittarius_Media_V1_GetInfoRequest) -> Bool {
    if lhs.mediaHash != rhs.mediaHash {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sagittarius_Media_V1_UpdateInfoRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpdateInfoRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "media_hash"),
    2: .same(proto: "info"),
  ]

  fileprivate class _StorageClass {
    var _mediaHash: String = String()
    var _info: Sagittarius_Media_V1_Info? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _mediaHash = source._mediaHash
      _info = source._info
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._mediaHash)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._info)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._mediaHash.isEmpty {
        try visitor.visitSingularStringField(value: _storage._mediaHash, fieldNumber: 1)
      }
      if let v = _storage._info {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Sagittarius_Media_V1_UpdateInfoRequest, rhs: Sagittarius_Media_V1_UpdateInfoRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._mediaHash != rhs_storage._mediaHash {return false}
        if _storage._info != rhs_storage._info {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sagittarius_Media_V1_ThumbnailTimeRangesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ThumbnailTimeRangesRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "media_hash"),
    2: .standard(proto: "media_length"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.mediaHash)
      case 2: try decoder.decodeSingularDoubleField(value: &self.mediaLength)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.mediaHash.isEmpty {
      try visitor.visitSingularStringField(value: self.mediaHash, fieldNumber: 1)
    }
    if self.mediaLength != 0 {
      try visitor.visitSingularDoubleField(value: self.mediaLength, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Sagittarius_Media_V1_ThumbnailTimeRangesRequest, rhs: Sagittarius_Media_V1_ThumbnailTimeRangesRequest) -> Bool {
    if lhs.mediaHash != rhs.mediaHash {return false}
    if lhs.mediaLength != rhs.mediaLength {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sagittarius_Media_V1_TimeRange: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TimeRange"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "begin"),
    2: .same(proto: "end"),
    3: .same(proto: "interval"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularDoubleField(value: &self.begin)
      case 2: try decoder.decodeSingularDoubleField(value: &self.end)
      case 3: try decoder.decodeSingularDoubleField(value: &self.interval)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.begin != 0 {
      try visitor.visitSingularDoubleField(value: self.begin, fieldNumber: 1)
    }
    if self.end != 0 {
      try visitor.visitSingularDoubleField(value: self.end, fieldNumber: 2)
    }
    if self.interval != 0 {
      try visitor.visitSingularDoubleField(value: self.interval, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Sagittarius_Media_V1_TimeRange, rhs: Sagittarius_Media_V1_TimeRange) -> Bool {
    if lhs.begin != rhs.begin {return false}
    if lhs.end != rhs.end {return false}
    if lhs.interval != rhs.interval {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sagittarius_Media_V1_ThumbnailTimeRangesResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ThumbnailTimeRangesResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
    2: .standard(proto: "media_hash"),
    3: .same(proto: "availables"),
    4: .same(proto: "missings"),
    5: .same(proto: "token"),
  ]

  fileprivate class _StorageClass {
    var _error: Google_Rpc_Status? = nil
    var _mediaHash: String = String()
    var _availables: [Sagittarius_Media_V1_TimeRange] = []
    var _missings: [Sagittarius_Media_V1_TimeRange] = []
    var _token: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _error = source._error
      _mediaHash = source._mediaHash
      _availables = source._availables
      _missings = source._missings
      _token = source._token
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._error)
        case 2: try decoder.decodeSingularStringField(value: &_storage._mediaHash)
        case 3: try decoder.decodeRepeatedMessageField(value: &_storage._availables)
        case 4: try decoder.decodeRepeatedMessageField(value: &_storage._missings)
        case 5: try decoder.decodeSingularStringField(value: &_storage._token)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._error {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._mediaHash.isEmpty {
        try visitor.visitSingularStringField(value: _storage._mediaHash, fieldNumber: 2)
      }
      if !_storage._availables.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._availables, fieldNumber: 3)
      }
      if !_storage._missings.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._missings, fieldNumber: 4)
      }
      if !_storage._token.isEmpty {
        try visitor.visitSingularStringField(value: _storage._token, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Sagittarius_Media_V1_ThumbnailTimeRangesResponse, rhs: Sagittarius_Media_V1_ThumbnailTimeRangesResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._error != rhs_storage._error {return false}
        if _storage._mediaHash != rhs_storage._mediaHash {return false}
        if _storage._availables != rhs_storage._availables {return false}
        if _storage._missings != rhs_storage._missings {return false}
        if _storage._token != rhs_storage._token {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sagittarius_Media_V1_ThumbnailRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ThumbnailRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "media_hash"),
    2: .same(proto: "range"),
    3: .same(proto: "timestamp"),
    4: .same(proto: "token"),
  ]

  fileprivate class _StorageClass {
    var _mediaHash: String = String()
    var _time: Sagittarius_Media_V1_ThumbnailRequest.OneOf_Time?
    var _token: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _mediaHash = source._mediaHash
      _time = source._time
      _token = source._token
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._mediaHash)
        case 2:
          var v: Sagittarius_Media_V1_TimeRange?
          if let current = _storage._time {
            try decoder.handleConflictingOneOf()
            if case .range(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._time = .range(v)}
        case 3:
          if _storage._time != nil {try decoder.handleConflictingOneOf()}
          var v: Double?
          try decoder.decodeSingularDoubleField(value: &v)
          if let v = v {_storage._time = .timestamp(v)}
        case 4: try decoder.decodeSingularStringField(value: &_storage._token)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._mediaHash.isEmpty {
        try visitor.visitSingularStringField(value: _storage._mediaHash, fieldNumber: 1)
      }
      switch _storage._time {
      case .range(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      case .timestamp(let v)?:
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 3)
      case nil: break
      }
      if !_storage._token.isEmpty {
        try visitor.visitSingularStringField(value: _storage._token, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Sagittarius_Media_V1_ThumbnailRequest, rhs: Sagittarius_Media_V1_ThumbnailRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._mediaHash != rhs_storage._mediaHash {return false}
        if _storage._time != rhs_storage._time {return false}
        if _storage._token != rhs_storage._token {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sagittarius_Media_V1_Thumbnail: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Thumbnail"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "timestamp"),
    2: .same(proto: "ext"),
    3: .same(proto: "payload"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularDoubleField(value: &self.timestamp)
      case 2: try decoder.decodeSingularStringField(value: &self.ext)
      case 3: try decoder.decodeSingularBytesField(value: &self.payload)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.timestamp != 0 {
      try visitor.visitSingularDoubleField(value: self.timestamp, fieldNumber: 1)
    }
    if !self.ext.isEmpty {
      try visitor.visitSingularStringField(value: self.ext, fieldNumber: 2)
    }
    if !self.payload.isEmpty {
      try visitor.visitSingularBytesField(value: self.payload, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Sagittarius_Media_V1_Thumbnail, rhs: Sagittarius_Media_V1_Thumbnail) -> Bool {
    if lhs.timestamp != rhs.timestamp {return false}
    if lhs.ext != rhs.ext {return false}
    if lhs.payload != rhs.payload {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sagittarius_Media_V1_ThumbnailResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ThumbnailResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
    2: .same(proto: "thumbnails"),
  ]

  fileprivate class _StorageClass {
    var _error: Google_Rpc_Status? = nil
    var _thumbnails: [Sagittarius_Media_V1_Thumbnail] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _error = source._error
      _thumbnails = source._thumbnails
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._error)
        case 2: try decoder.decodeRepeatedMessageField(value: &_storage._thumbnails)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._error {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._thumbnails.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._thumbnails, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Sagittarius_Media_V1_ThumbnailResponse, rhs: Sagittarius_Media_V1_ThumbnailResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._error != rhs_storage._error {return false}
        if _storage._thumbnails != rhs_storage._thumbnails {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Sagittarius_Media_V1_UpdateThumbnailRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpdateThumbnailRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "media_hash"),
    2: .same(proto: "thumbnails"),
    3: .same(proto: "token"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.mediaHash)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.thumbnails)
      case 3: try decoder.decodeSingularStringField(value: &self.token)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.mediaHash.isEmpty {
      try visitor.visitSingularStringField(value: self.mediaHash, fieldNumber: 1)
    }
    if !self.thumbnails.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.thumbnails, fieldNumber: 2)
    }
    if !self.token.isEmpty {
      try visitor.visitSingularStringField(value: self.token, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Sagittarius_Media_V1_UpdateThumbnailRequest, rhs: Sagittarius_Media_V1_UpdateThumbnailRequest) -> Bool {
    if lhs.mediaHash != rhs.mediaHash {return false}
    if lhs.thumbnails != rhs.thumbnails {return false}
    if lhs.token != rhs.token {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
