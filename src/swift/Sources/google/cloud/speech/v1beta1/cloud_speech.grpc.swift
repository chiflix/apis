//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: google/cloud/speech/v1beta1/cloud_speech.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import GRPC
import NIO
import NIOHTTP1
import SwiftProtobuf
import GoogleAPIModel
import GoogleLongrunningModel
import GoogleRPCModel


/// Usage: instantiate Google_Cloud_Speech_V1beta1_SpeechServiceClient, then call methods of this protocol to make API calls.
public protocol Google_Cloud_Speech_V1beta1_SpeechService {
  func syncRecognize(_ request: Google_Cloud_Speech_V1beta1_SyncRecognizeRequest, callOptions: CallOptions?) -> UnaryCall<Google_Cloud_Speech_V1beta1_SyncRecognizeRequest, Google_Cloud_Speech_V1beta1_SyncRecognizeResponse>
  func asyncRecognize(_ request: Google_Cloud_Speech_V1beta1_AsyncRecognizeRequest, callOptions: CallOptions?) -> UnaryCall<Google_Cloud_Speech_V1beta1_AsyncRecognizeRequest, GoogleLongrunningModel.Google_Longrunning_Operation>
  func streamingRecognize(callOptions: CallOptions?, handler: @escaping (Google_Cloud_Speech_V1beta1_StreamingRecognizeResponse) -> Void) -> BidirectionalStreamingCall<Google_Cloud_Speech_V1beta1_StreamingRecognizeRequest, Google_Cloud_Speech_V1beta1_StreamingRecognizeResponse>
}

public final class Google_Cloud_Speech_V1beta1_SpeechServiceClient: GRPCClient, Google_Cloud_Speech_V1beta1_SpeechService {
  public let connection: ClientConnection
  public var defaultCallOptions: CallOptions

  /// Creates a client for the google.cloud.speech.v1beta1.Speech service.
  ///
  /// - Parameters:
  ///   - connection: `ClientConnection` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(connection: ClientConnection, defaultCallOptions: CallOptions = CallOptions()) {
    self.connection = connection
    self.defaultCallOptions = defaultCallOptions
  }

  /// Asynchronous unary call to SyncRecognize.
  ///
  /// - Parameters:
  ///   - request: Request to send to SyncRecognize.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func syncRecognize(_ request: Google_Cloud_Speech_V1beta1_SyncRecognizeRequest, callOptions: CallOptions? = nil) -> UnaryCall<Google_Cloud_Speech_V1beta1_SyncRecognizeRequest, Google_Cloud_Speech_V1beta1_SyncRecognizeResponse> {
    return self.makeUnaryCall(path: "/google.cloud.speech.v1beta1.Speech/SyncRecognize",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous unary call to AsyncRecognize.
  ///
  /// - Parameters:
  ///   - request: Request to send to AsyncRecognize.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func asyncRecognize(_ request: Google_Cloud_Speech_V1beta1_AsyncRecognizeRequest, callOptions: CallOptions? = nil) -> UnaryCall<Google_Cloud_Speech_V1beta1_AsyncRecognizeRequest, GoogleLongrunningModel.Google_Longrunning_Operation> {
    return self.makeUnaryCall(path: "/google.cloud.speech.v1beta1.Speech/AsyncRecognize",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous bidirectional-streaming call to StreamingRecognize.
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  public func streamingRecognize(callOptions: CallOptions? = nil, handler: @escaping (Google_Cloud_Speech_V1beta1_StreamingRecognizeResponse) -> Void) -> BidirectionalStreamingCall<Google_Cloud_Speech_V1beta1_StreamingRecognizeRequest, Google_Cloud_Speech_V1beta1_StreamingRecognizeResponse> {
    return self.makeBidirectionalStreamingCall(path: "/google.cloud.speech.v1beta1.Speech/StreamingRecognize",
                                               callOptions: callOptions ?? self.defaultCallOptions,
                                               handler: handler)
  }

}

/// To build a server, implement a class that conforms to this protocol.
public protocol Google_Cloud_Speech_V1beta1_SpeechProvider: CallHandlerProvider {
  func syncRecognize(request: Google_Cloud_Speech_V1beta1_SyncRecognizeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Google_Cloud_Speech_V1beta1_SyncRecognizeResponse>
  func asyncRecognize(request: Google_Cloud_Speech_V1beta1_AsyncRecognizeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<GoogleLongrunningModel.Google_Longrunning_Operation>
  func streamingRecognize(context: StreamingResponseCallContext<Google_Cloud_Speech_V1beta1_StreamingRecognizeResponse>) -> EventLoopFuture<(StreamEvent<Google_Cloud_Speech_V1beta1_StreamingRecognizeRequest>) -> Void>
}

extension Google_Cloud_Speech_V1beta1_SpeechProvider {
  public var serviceName: String { return "google.cloud.speech.v1beta1.Speech" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: String, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "SyncRecognize":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.syncRecognize(request: request, context: context)
        }
      }

    case "AsyncRecognize":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.asyncRecognize(request: request, context: context)
        }
      }

    case "StreamingRecognize":
      return BidirectionalStreamingCallHandler(callHandlerContext: callHandlerContext) { context in
        return self.streamingRecognize(context: context)
      }

    default: return nil
    }
  }
}

